
# Copyright (c) 2013-2016 The Khronos Group Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and/or associated documentation files (the
# "Materials"), to deal in the Materials without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Materials, and to
# permit persons to whom the Materials are furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Materials.
# 
# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
# 
# ------------------------------------------------------------------------
# 
# This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
# ".spec" file format has been retired and will no longer be updated with
# new extensions and API versions. The canonical version of the registry,
# together with documentation, schema, and Python generator scripts used
# to generate C header files for OpenGL and OpenGL ES, can always be found
# in the Khronos Registry at
#         http://www.opengl.org/registry/
#

static {
  addLinkerFlags("-lGL")
}

emit "#include <GL/gl.h>"
const GL_CURRENT_BIT:u32 = 0x00000001
const GL_POINT_BIT:u32 = 0x00000002
const GL_LINE_BIT:u32 = 0x00000004
const GL_POLYGON_BIT:u32 = 0x00000008
const GL_POLYGON_STIPPLE_BIT:u32 = 0x00000010
const GL_PIXEL_MODE_BIT:u32 = 0x00000020
const GL_LIGHTING_BIT:u32 = 0x00000040
const GL_FOG_BIT:u32 = 0x00000080
const GL_DEPTH_BUFFER_BIT:u32 = 0x00000100
const GL_ACCUM_BUFFER_BIT:u32 = 0x00000200
const GL_STENCIL_BUFFER_BIT:u32 = 0x00000400
const GL_VIEWPORT_BIT:u32 = 0x00000800
const GL_TRANSFORM_BIT:u32 = 0x00001000
const GL_ENABLE_BIT:u32 = 0x00002000
const GL_COLOR_BUFFER_BIT:u32 = 0x00004000
const GL_HINT_BIT:u32 = 0x00008000
const GL_EVAL_BIT:u32 = 0x00010000
const GL_LIST_BIT:u32 = 0x00020000
const GL_TEXTURE_BIT:u32 = 0x00040000
const GL_SCISSOR_BIT:u32 = 0x00080000
const GL_MULTISAMPLE_BIT:u32 = 0x20000000
# Guaranteed to mark all attribute groups at once
const GL_ALL_ATTRIB_BITS:u32 = 0xFFFFFFFF
const GL_CLIENT_PIXEL_STORE_BIT:u32 = 0x00000001
const GL_CLIENT_VERTEX_ARRAY_BIT:u32 = 0x00000002
const GL_CLIENT_ALL_ATTRIB_BITS:u32 = 0xFFFFFFFF
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT:u32 = 0x00000001
const GL_CONTEXT_FLAG_DEBUG_BIT:u32 = 0x00000002
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT:u32 = 0x00000004
const GL_CONTEXT_CORE_PROFILE_BIT:u32 = 0x00000001
const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT:u32 = 0x00000002
const GL_MAP_READ_BIT:u32 = 0x0001
const GL_MAP_WRITE_BIT:u32 = 0x0002
const GL_MAP_INVALIDATE_RANGE_BIT:u32 = 0x0004
const GL_MAP_INVALIDATE_BUFFER_BIT:u32 = 0x0008
const GL_MAP_FLUSH_EXPLICIT_BIT:u32 = 0x0010
const GL_MAP_UNSYNCHRONIZED_BIT:u32 = 0x0020
const GL_MAP_PERSISTENT_BIT:u32 = 0x0040
const GL_MAP_COHERENT_BIT:u32 = 0x0080
const GL_DYNAMIC_STORAGE_BIT:u32 = 0x0100
const GL_CLIENT_STORAGE_BIT:u32 = 0x0200
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT:u32 = 0x00000001
const GL_ELEMENT_ARRAY_BARRIER_BIT:u32 = 0x00000002
const GL_UNIFORM_BARRIER_BIT:u32 = 0x00000004
const GL_TEXTURE_FETCH_BARRIER_BIT:u32 = 0x00000008
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT:u32 = 0x00000020
const GL_COMMAND_BARRIER_BIT:u32 = 0x00000040
const GL_PIXEL_BUFFER_BARRIER_BIT:u32 = 0x00000080
const GL_TEXTURE_UPDATE_BARRIER_BIT:u32 = 0x00000100
const GL_BUFFER_UPDATE_BARRIER_BIT:u32 = 0x00000200
const GL_FRAMEBUFFER_BARRIER_BIT:u32 = 0x00000400
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT:u32 = 0x00000800
const GL_ATOMIC_COUNTER_BARRIER_BIT:u32 = 0x00001000
const GL_SHADER_STORAGE_BARRIER_BIT:u32 = 0x00002000
const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT:u32 = 0x00004000
const GL_QUERY_BUFFER_BARRIER_BIT:u32 = 0x00008000
const GL_ALL_BARRIER_BITS:u32 = 0xFFFFFFFF
const GL_SYNC_FLUSH_COMMANDS_BIT:u32 = 0x00000001
const GL_VERTEX_SHADER_BIT:u32 = 0x00000001
const GL_FRAGMENT_SHADER_BIT:u32 = 0x00000002
const GL_GEOMETRY_SHADER_BIT:u32 = 0x00000004
const GL_TESS_CONTROL_SHADER_BIT:u32 = 0x00000008
const GL_TESS_EVALUATION_SHADER_BIT:u32 = 0x00000010
const GL_COMPUTE_SHADER_BIT:u32 = 0x00000020
const GL_ALL_SHADER_BITS:u32 = 0xFFFFFFFF
const GL_FALSE:u32 = 0
const GL_NO_ERROR:u32 = 0
const GL_ZERO:u32 = 0
const GL_NONE:u32 = 0
const GL_TRUE:u32 = 1
const GL_ONE:u32 = 1
# Tagged as uint
const GL_INVALID_INDEX:u32 = 0xFFFFFFFF
# Tagged as uint64
# const GL_TIMEOUT_IGNORED:u64 = 0xFFFFFFFFFFFFFFFF
const GL_POINTS:u32 = 0x0000
const GL_LINES:u32 = 0x0001
const GL_LINE_LOOP:u32 = 0x0002
const GL_LINE_STRIP:u32 = 0x0003
const GL_TRIANGLES:u32 = 0x0004
const GL_TRIANGLE_STRIP:u32 = 0x0005
const GL_TRIANGLE_FAN:u32 = 0x0006
const GL_QUADS:u32 = 0x0007
const GL_QUAD_STRIP:u32 = 0x0008
const GL_POLYGON:u32 = 0x0009
const GL_LINES_ADJACENCY:u32 = 0x000A
const GL_LINE_STRIP_ADJACENCY:u32 = 0x000B
const GL_TRIANGLES_ADJACENCY:u32 = 0x000C
const GL_TRIANGLE_STRIP_ADJACENCY:u32 = 0x000D
const GL_PATCHES:u32 = 0x000E
const GL_ACCUM:u32 = 0x0100
const GL_LOAD:u32 = 0x0101
const GL_RETURN:u32 = 0x0102
const GL_MULT:u32 = 0x0103
const GL_ADD:u32 = 0x0104
const GL_NEVER:u32 = 0x0200
const GL_LESS:u32 = 0x0201
const GL_EQUAL:u32 = 0x0202
const GL_LEQUAL:u32 = 0x0203
const GL_GREATER:u32 = 0x0204
const GL_NOTEQUAL:u32 = 0x0205
const GL_GEQUAL:u32 = 0x0206
const GL_ALWAYS:u32 = 0x0207
const GL_SRC_COLOR:u32 = 0x0300
const GL_ONE_MINUS_SRC_COLOR:u32 = 0x0301
const GL_SRC_ALPHA:u32 = 0x0302
const GL_ONE_MINUS_SRC_ALPHA:u32 = 0x0303
const GL_DST_ALPHA:u32 = 0x0304
const GL_ONE_MINUS_DST_ALPHA:u32 = 0x0305
const GL_DST_COLOR:u32 = 0x0306
const GL_ONE_MINUS_DST_COLOR:u32 = 0x0307
const GL_SRC_ALPHA_SATURATE:u32 = 0x0308
const GL_FRONT_LEFT:u32 = 0x0400
const GL_FRONT_RIGHT:u32 = 0x0401
const GL_BACK_LEFT:u32 = 0x0402
const GL_BACK_RIGHT:u32 = 0x0403
const GL_FRONT:u32 = 0x0404
const GL_BACK:u32 = 0x0405
const GL_LEFT:u32 = 0x0406
const GL_RIGHT:u32 = 0x0407
const GL_FRONT_AND_BACK:u32 = 0x0408
const GL_AUX0:u32 = 0x0409
const GL_AUX1:u32 = 0x040A
const GL_AUX2:u32 = 0x040B
const GL_AUX3:u32 = 0x040C
const GL_INVALID_ENUM:u32 = 0x0500
const GL_INVALID_VALUE:u32 = 0x0501
const GL_INVALID_OPERATION:u32 = 0x0502
const GL_STACK_OVERFLOW:u32 = 0x0503
const GL_STACK_UNDERFLOW:u32 = 0x0504
const GL_OUT_OF_MEMORY:u32 = 0x0505
const GL_INVALID_FRAMEBUFFER_OPERATION:u32 = 0x0506
const GL_CONTEXT_LOST:u32 = 0x0507
const GL_2D:u32 = 0x0600
const GL_3D:u32 = 0x0601
const GL_3D_COLOR:u32 = 0x0602
const GL_3D_COLOR_TEXTURE:u32 = 0x0603
const GL_4D_COLOR_TEXTURE:u32 = 0x0604
const GL_PASS_THROUGH_TOKEN:u32 = 0x0700
const GL_POINT_TOKEN:u32 = 0x0701
const GL_LINE_TOKEN:u32 = 0x0702
const GL_POLYGON_TOKEN:u32 = 0x0703
const GL_BITMAP_TOKEN:u32 = 0x0704
const GL_DRAW_PIXEL_TOKEN:u32 = 0x0705
const GL_COPY_PIXEL_TOKEN:u32 = 0x0706
const GL_LINE_RESET_TOKEN:u32 = 0x0707
const GL_EXP:u32 = 0x0800
const GL_EXP2:u32 = 0x0801
const GL_CW:u32 = 0x0900
const GL_CCW:u32 = 0x0901
const GL_COEFF:u32 = 0x0A00
const GL_ORDER:u32 = 0x0A01
const GL_DOMAIN:u32 = 0x0A02
const GL_CURRENT_COLOR:u32 = 0x0B00
const GL_CURRENT_INDEX:u32 = 0x0B01
const GL_CURRENT_NORMAL:u32 = 0x0B02
const GL_CURRENT_TEXTURE_COORDS:u32 = 0x0B03
const GL_CURRENT_RASTER_COLOR:u32 = 0x0B04
const GL_CURRENT_RASTER_INDEX:u32 = 0x0B05
const GL_CURRENT_RASTER_TEXTURE_COORDS:u32 = 0x0B06
const GL_CURRENT_RASTER_POSITION:u32 = 0x0B07
const GL_CURRENT_RASTER_POSITION_VALID:u32 = 0x0B08
const GL_CURRENT_RASTER_DISTANCE:u32 = 0x0B09
const GL_POINT_SMOOTH:u32 = 0x0B10
const GL_POINT_SIZE:u32 = 0x0B11
const GL_POINT_SIZE_RANGE:u32 = 0x0B12
const GL_SMOOTH_POINT_SIZE_RANGE:u32 = 0x0B12
const GL_POINT_SIZE_GRANULARITY:u32 = 0x0B13
const GL_SMOOTH_POINT_SIZE_GRANULARITY:u32 = 0x0B13
const GL_LINE_SMOOTH:u32 = 0x0B20
const GL_LINE_WIDTH:u32 = 0x0B21
const GL_LINE_WIDTH_RANGE:u32 = 0x0B22
const GL_SMOOTH_LINE_WIDTH_RANGE:u32 = 0x0B22
const GL_LINE_WIDTH_GRANULARITY:u32 = 0x0B23
const GL_SMOOTH_LINE_WIDTH_GRANULARITY:u32 = 0x0B23
const GL_LINE_STIPPLE:u32 = 0x0B24
const GL_LINE_STIPPLE_PATTERN:u32 = 0x0B25
const GL_LINE_STIPPLE_REPEAT:u32 = 0x0B26
const GL_LIST_MODE:u32 = 0x0B30
const GL_MAX_LIST_NESTING:u32 = 0x0B31
const GL_LIST_BASE:u32 = 0x0B32
const GL_LIST_INDEX:u32 = 0x0B33
const GL_POLYGON_MODE:u32 = 0x0B40
const GL_POLYGON_SMOOTH:u32 = 0x0B41
const GL_POLYGON_STIPPLE:u32 = 0x0B42
const GL_EDGE_FLAG:u32 = 0x0B43
const GL_CULL_FACE:u32 = 0x0B44
const GL_CULL_FACE_MODE:u32 = 0x0B45
const GL_FRONT_FACE:u32 = 0x0B46
const GL_LIGHTING:u32 = 0x0B50
const GL_LIGHT_MODEL_LOCAL_VIEWER:u32 = 0x0B51
const GL_LIGHT_MODEL_TWO_SIDE:u32 = 0x0B52
const GL_LIGHT_MODEL_AMBIENT:u32 = 0x0B53
const GL_SHADE_MODEL:u32 = 0x0B54
const GL_COLOR_MATERIAL_FACE:u32 = 0x0B55
const GL_COLOR_MATERIAL_PARAMETER:u32 = 0x0B56
const GL_COLOR_MATERIAL:u32 = 0x0B57
const GL_FOG:u32 = 0x0B60
const GL_FOG_INDEX:u32 = 0x0B61
const GL_FOG_DENSITY:u32 = 0x0B62
const GL_FOG_START:u32 = 0x0B63
const GL_FOG_END:u32 = 0x0B64
const GL_FOG_MODE:u32 = 0x0B65
const GL_FOG_COLOR:u32 = 0x0B66
const GL_DEPTH_RANGE:u32 = 0x0B70
const GL_DEPTH_TEST:u32 = 0x0B71
const GL_DEPTH_WRITEMASK:u32 = 0x0B72
const GL_DEPTH_CLEAR_VALUE:u32 = 0x0B73
const GL_DEPTH_FUNC:u32 = 0x0B74
const GL_ACCUM_CLEAR_VALUE:u32 = 0x0B80
const GL_STENCIL_TEST:u32 = 0x0B90
const GL_STENCIL_CLEAR_VALUE:u32 = 0x0B91
const GL_STENCIL_FUNC:u32 = 0x0B92
const GL_STENCIL_VALUE_MASK:u32 = 0x0B93
const GL_STENCIL_FAIL:u32 = 0x0B94
const GL_STENCIL_PASS_DEPTH_FAIL:u32 = 0x0B95
const GL_STENCIL_PASS_DEPTH_PASS:u32 = 0x0B96
const GL_STENCIL_REF:u32 = 0x0B97
const GL_STENCIL_WRITEMASK:u32 = 0x0B98
const GL_MATRIX_MODE:u32 = 0x0BA0
const GL_NORMALIZE:u32 = 0x0BA1
const GL_VIEWPORT:u32 = 0x0BA2
const GL_MODELVIEW_STACK_DEPTH:u32 = 0x0BA3
const GL_PROJECTION_STACK_DEPTH:u32 = 0x0BA4
const GL_TEXTURE_STACK_DEPTH:u32 = 0x0BA5
const GL_MODELVIEW_MATRIX:u32 = 0x0BA6
const GL_PROJECTION_MATRIX:u32 = 0x0BA7
const GL_TEXTURE_MATRIX:u32 = 0x0BA8
const GL_ATTRIB_STACK_DEPTH:u32 = 0x0BB0
const GL_CLIENT_ATTRIB_STACK_DEPTH:u32 = 0x0BB1
const GL_ALPHA_TEST:u32 = 0x0BC0
const GL_ALPHA_TEST_FUNC:u32 = 0x0BC1
const GL_ALPHA_TEST_REF:u32 = 0x0BC2
const GL_DITHER:u32 = 0x0BD0
const GL_BLEND_DST:u32 = 0x0BE0
const GL_BLEND_SRC:u32 = 0x0BE1
const GL_BLEND:u32 = 0x0BE2
const GL_LOGIC_OP_MODE:u32 = 0x0BF0
const GL_INDEX_LOGIC_OP:u32 = 0x0BF1
const GL_LOGIC_OP:u32 = 0x0BF1
const GL_COLOR_LOGIC_OP:u32 = 0x0BF2
const GL_AUX_BUFFERS:u32 = 0x0C00
const GL_DRAW_BUFFER:u32 = 0x0C01
const GL_READ_BUFFER:u32 = 0x0C02
const GL_SCISSOR_BOX:u32 = 0x0C10
const GL_SCISSOR_TEST:u32 = 0x0C11
const GL_INDEX_CLEAR_VALUE:u32 = 0x0C20
const GL_INDEX_WRITEMASK:u32 = 0x0C21
const GL_COLOR_CLEAR_VALUE:u32 = 0x0C22
const GL_COLOR_WRITEMASK:u32 = 0x0C23
const GL_INDEX_MODE:u32 = 0x0C30
const GL_RGBA_MODE:u32 = 0x0C31
const GL_DOUBLEBUFFER:u32 = 0x0C32
const GL_STEREO:u32 = 0x0C33
const GL_RENDER_MODE:u32 = 0x0C40
const GL_PERSPECTIVE_CORRECTION_HINT:u32 = 0x0C50
const GL_POINT_SMOOTH_HINT:u32 = 0x0C51
const GL_LINE_SMOOTH_HINT:u32 = 0x0C52
const GL_POLYGON_SMOOTH_HINT:u32 = 0x0C53
const GL_FOG_HINT:u32 = 0x0C54
const GL_TEXTURE_GEN_S:u32 = 0x0C60
const GL_TEXTURE_GEN_T:u32 = 0x0C61
const GL_TEXTURE_GEN_R:u32 = 0x0C62
const GL_TEXTURE_GEN_Q:u32 = 0x0C63
const GL_PIXEL_MAP_I_TO_I:u32 = 0x0C70
const GL_PIXEL_MAP_S_TO_S:u32 = 0x0C71
const GL_PIXEL_MAP_I_TO_R:u32 = 0x0C72
const GL_PIXEL_MAP_I_TO_G:u32 = 0x0C73
const GL_PIXEL_MAP_I_TO_B:u32 = 0x0C74
const GL_PIXEL_MAP_I_TO_A:u32 = 0x0C75
const GL_PIXEL_MAP_R_TO_R:u32 = 0x0C76
const GL_PIXEL_MAP_G_TO_G:u32 = 0x0C77
const GL_PIXEL_MAP_B_TO_B:u32 = 0x0C78
const GL_PIXEL_MAP_A_TO_A:u32 = 0x0C79
const GL_PIXEL_MAP_I_TO_I_SIZE:u32 = 0x0CB0
const GL_PIXEL_MAP_S_TO_S_SIZE:u32 = 0x0CB1
const GL_PIXEL_MAP_I_TO_R_SIZE:u32 = 0x0CB2
const GL_PIXEL_MAP_I_TO_G_SIZE:u32 = 0x0CB3
const GL_PIXEL_MAP_I_TO_B_SIZE:u32 = 0x0CB4
const GL_PIXEL_MAP_I_TO_A_SIZE:u32 = 0x0CB5
const GL_PIXEL_MAP_R_TO_R_SIZE:u32 = 0x0CB6
const GL_PIXEL_MAP_G_TO_G_SIZE:u32 = 0x0CB7
const GL_PIXEL_MAP_B_TO_B_SIZE:u32 = 0x0CB8
const GL_PIXEL_MAP_A_TO_A_SIZE:u32 = 0x0CB9
const GL_UNPACK_SWAP_BYTES:u32 = 0x0CF0
const GL_UNPACK_LSB_FIRST:u32 = 0x0CF1
const GL_UNPACK_ROW_LENGTH:u32 = 0x0CF2
const GL_UNPACK_SKIP_ROWS:u32 = 0x0CF3
const GL_UNPACK_SKIP_PIXELS:u32 = 0x0CF4
const GL_UNPACK_ALIGNMENT:u32 = 0x0CF5
const GL_PACK_SWAP_BYTES:u32 = 0x0D00
const GL_PACK_LSB_FIRST:u32 = 0x0D01
const GL_PACK_ROW_LENGTH:u32 = 0x0D02
const GL_PACK_SKIP_ROWS:u32 = 0x0D03
const GL_PACK_SKIP_PIXELS:u32 = 0x0D04
const GL_PACK_ALIGNMENT:u32 = 0x0D05
const GL_MAP_COLOR:u32 = 0x0D10
const GL_MAP_STENCIL:u32 = 0x0D11
const GL_INDEX_SHIFT:u32 = 0x0D12
const GL_INDEX_OFFSET:u32 = 0x0D13
const GL_RED_SCALE:u32 = 0x0D14
const GL_RED_BIAS:u32 = 0x0D15
const GL_ZOOM_X:u32 = 0x0D16
const GL_ZOOM_Y:u32 = 0x0D17
const GL_GREEN_SCALE:u32 = 0x0D18
const GL_GREEN_BIAS:u32 = 0x0D19
const GL_BLUE_SCALE:u32 = 0x0D1A
const GL_BLUE_BIAS:u32 = 0x0D1B
const GL_ALPHA_SCALE:u32 = 0x0D1C
const GL_ALPHA_BIAS:u32 = 0x0D1D
const GL_DEPTH_SCALE:u32 = 0x0D1E
const GL_DEPTH_BIAS:u32 = 0x0D1F
const GL_MAX_EVAL_ORDER:u32 = 0x0D30
const GL_MAX_LIGHTS:u32 = 0x0D31
const GL_MAX_CLIP_PLANES:u32 = 0x0D32
const GL_MAX_CLIP_DISTANCES:u32 = 0x0D32
const GL_MAX_TEXTURE_SIZE:u32 = 0x0D33
const GL_MAX_PIXEL_MAP_TABLE:u32 = 0x0D34
const GL_MAX_ATTRIB_STACK_DEPTH:u32 = 0x0D35
const GL_MAX_MODELVIEW_STACK_DEPTH:u32 = 0x0D36
const GL_MAX_NAME_STACK_DEPTH:u32 = 0x0D37
const GL_MAX_PROJECTION_STACK_DEPTH:u32 = 0x0D38
const GL_MAX_TEXTURE_STACK_DEPTH:u32 = 0x0D39
const GL_MAX_VIEWPORT_DIMS:u32 = 0x0D3A
const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH:u32 = 0x0D3B
const GL_SUBPIXEL_BITS:u32 = 0x0D50
const GL_INDEX_BITS:u32 = 0x0D51
const GL_RED_BITS:u32 = 0x0D52
const GL_GREEN_BITS:u32 = 0x0D53
const GL_BLUE_BITS:u32 = 0x0D54
const GL_ALPHA_BITS:u32 = 0x0D55
const GL_DEPTH_BITS:u32 = 0x0D56
const GL_STENCIL_BITS:u32 = 0x0D57
const GL_ACCUM_RED_BITS:u32 = 0x0D58
const GL_ACCUM_GREEN_BITS:u32 = 0x0D59
const GL_ACCUM_BLUE_BITS:u32 = 0x0D5A
const GL_ACCUM_ALPHA_BITS:u32 = 0x0D5B
const GL_NAME_STACK_DEPTH:u32 = 0x0D70
const GL_AUTO_NORMAL:u32 = 0x0D80
const GL_MAP1_COLOR_4:u32 = 0x0D90
const GL_MAP1_INDEX:u32 = 0x0D91
const GL_MAP1_NORMAL:u32 = 0x0D92
const GL_MAP1_TEXTURE_COORD_1:u32 = 0x0D93
const GL_MAP1_TEXTURE_COORD_2:u32 = 0x0D94
const GL_MAP1_TEXTURE_COORD_3:u32 = 0x0D95
const GL_MAP1_TEXTURE_COORD_4:u32 = 0x0D96
const GL_MAP1_VERTEX_3:u32 = 0x0D97
const GL_MAP1_VERTEX_4:u32 = 0x0D98
const GL_MAP2_COLOR_4:u32 = 0x0DB0
const GL_MAP2_INDEX:u32 = 0x0DB1
const GL_MAP2_NORMAL:u32 = 0x0DB2
const GL_MAP2_TEXTURE_COORD_1:u32 = 0x0DB3
const GL_MAP2_TEXTURE_COORD_2:u32 = 0x0DB4
const GL_MAP2_TEXTURE_COORD_3:u32 = 0x0DB5
const GL_MAP2_TEXTURE_COORD_4:u32 = 0x0DB6
const GL_MAP2_VERTEX_3:u32 = 0x0DB7
const GL_MAP2_VERTEX_4:u32 = 0x0DB8
const GL_MAP1_GRID_DOMAIN:u32 = 0x0DD0
const GL_MAP1_GRID_SEGMENTS:u32 = 0x0DD1
const GL_MAP2_GRID_DOMAIN:u32 = 0x0DD2
const GL_MAP2_GRID_SEGMENTS:u32 = 0x0DD3
const GL_TEXTURE_1D:u32 = 0x0DE0
const GL_TEXTURE_2D:u32 = 0x0DE1
const GL_FEEDBACK_BUFFER_POINTER:u32 = 0x0DF0
const GL_FEEDBACK_BUFFER_SIZE:u32 = 0x0DF1
const GL_FEEDBACK_BUFFER_TYPE:u32 = 0x0DF2
const GL_SELECTION_BUFFER_POINTER:u32 = 0x0DF3
const GL_SELECTION_BUFFER_SIZE:u32 = 0x0DF4
const GL_TEXTURE_WIDTH:u32 = 0x1000
const GL_TEXTURE_HEIGHT:u32 = 0x1001
const GL_TEXTURE_INTERNAL_FORMAT:u32 = 0x1003
const GL_TEXTURE_COMPONENTS:u32 = 0x1003
const GL_TEXTURE_BORDER_COLOR:u32 = 0x1004
const GL_TEXTURE_BORDER:u32 = 0x1005
const GL_TEXTURE_TARGET:u32 = 0x1006
const GL_DONT_CARE:u32 = 0x1100
const GL_FASTEST:u32 = 0x1101
const GL_NICEST:u32 = 0x1102
const GL_AMBIENT:u32 = 0x1200
const GL_DIFFUSE:u32 = 0x1201
const GL_SPECULAR:u32 = 0x1202
const GL_POSITION:u32 = 0x1203
const GL_SPOT_DIRECTION:u32 = 0x1204
const GL_SPOT_EXPONENT:u32 = 0x1205
const GL_SPOT_CUTOFF:u32 = 0x1206
const GL_CONSTANT_ATTENUATION:u32 = 0x1207
const GL_LINEAR_ATTENUATION:u32 = 0x1208
const GL_QUADRATIC_ATTENUATION:u32 = 0x1209
const GL_COMPILE:u32 = 0x1300
const GL_COMPILE_AND_EXECUTE:u32 = 0x1301
const GL_BYTE:u32 = 0x1400
const GL_UNSIGNED_BYTE:u32 = 0x1401
const GL_SHORT:u32 = 0x1402
const GL_UNSIGNED_SHORT:u32 = 0x1403
const GL_INT:u32 = 0x1404
const GL_UNSIGNED_INT:u32 = 0x1405
const GL_FLOAT:u32 = 0x1406
const GL_2_BYTES:u32 = 0x1407
const GL_3_BYTES:u32 = 0x1408
const GL_4_BYTES:u32 = 0x1409
const GL_DOUBLE:u32 = 0x140A
const GL_HALF_FLOAT:u32 = 0x140B
const GL_FIXED:u32 = 0x140C
const GL_CLEAR:u32 = 0x1500
const GL_AND:u32 = 0x1501
const GL_AND_REVERSE:u32 = 0x1502
const GL_COPY:u32 = 0x1503
const GL_AND_INVERTED:u32 = 0x1504
const GL_NOOP:u32 = 0x1505
const GL_XOR:u32 = 0x1506
const GL_OR:u32 = 0x1507
const GL_NOR:u32 = 0x1508
const GL_EQUIV:u32 = 0x1509
const GL_INVERT:u32 = 0x150A
const GL_OR_REVERSE:u32 = 0x150B
const GL_COPY_INVERTED:u32 = 0x150C
const GL_OR_INVERTED:u32 = 0x150D
const GL_NAND:u32 = 0x150E
const GL_SET:u32 = 0x150F
const GL_EMISSION:u32 = 0x1600
const GL_SHININESS:u32 = 0x1601
const GL_AMBIENT_AND_DIFFUSE:u32 = 0x1602
const GL_COLOR_INDEXES:u32 = 0x1603
const GL_MODELVIEW:u32 = 0x1700
const GL_PROJECTION:u32 = 0x1701
const GL_TEXTURE:u32 = 0x1702
const GL_COLOR:u32 = 0x1800
const GL_DEPTH:u32 = 0x1801
const GL_STENCIL:u32 = 0x1802
const GL_COLOR_INDEX:u32 = 0x1900
const GL_STENCIL_INDEX:u32 = 0x1901
const GL_DEPTH_COMPONENT:u32 = 0x1902
const GL_RED:u32 = 0x1903
const GL_GREEN:u32 = 0x1904
const GL_BLUE:u32 = 0x1905
const GL_ALPHA:u32 = 0x1906
const GL_RGB:u32 = 0x1907
const GL_RGBA:u32 = 0x1908
const GL_LUMINANCE:u32 = 0x1909
const GL_LUMINANCE_ALPHA:u32 = 0x190A
const GL_BITMAP:u32 = 0x1A00
const GL_POINT:u32 = 0x1B00
const GL_LINE:u32 = 0x1B01
const GL_FILL:u32 = 0x1B02
const GL_RENDER:u32 = 0x1C00
const GL_FEEDBACK:u32 = 0x1C01
const GL_SELECT:u32 = 0x1C02
const GL_FLAT:u32 = 0x1D00
const GL_SMOOTH:u32 = 0x1D01
const GL_KEEP:u32 = 0x1E00
const GL_REPLACE:u32 = 0x1E01
const GL_INCR:u32 = 0x1E02
const GL_DECR:u32 = 0x1E03
const GL_VENDOR:u32 = 0x1F00
const GL_RENDERER:u32 = 0x1F01
const GL_VERSION:u32 = 0x1F02
const GL_EXTENSIONS:u32 = 0x1F03
const GL_S:u32 = 0x2000
const GL_T:u32 = 0x2001
const GL_R:u32 = 0x2002
const GL_Q:u32 = 0x2003
const GL_MODULATE:u32 = 0x2100
const GL_DECAL:u32 = 0x2101
const GL_TEXTURE_ENV_MODE:u32 = 0x2200
const GL_TEXTURE_ENV_COLOR:u32 = 0x2201
const GL_TEXTURE_ENV:u32 = 0x2300
const GL_EYE_LINEAR:u32 = 0x2400
const GL_OBJECT_LINEAR:u32 = 0x2401
const GL_SPHERE_MAP:u32 = 0x2402
const GL_TEXTURE_GEN_MODE:u32 = 0x2500
const GL_OBJECT_PLANE:u32 = 0x2501
const GL_EYE_PLANE:u32 = 0x2502
const GL_NEAREST:u32 = 0x2600
const GL_LINEAR:u32 = 0x2601
const GL_NEAREST_MIPMAP_NEAREST:u32 = 0x2700
const GL_LINEAR_MIPMAP_NEAREST:u32 = 0x2701
const GL_NEAREST_MIPMAP_LINEAR:u32 = 0x2702
const GL_LINEAR_MIPMAP_LINEAR:u32 = 0x2703
const GL_TEXTURE_MAG_FILTER:u32 = 0x2800
const GL_TEXTURE_MIN_FILTER:u32 = 0x2801
const GL_TEXTURE_WRAP_S:u32 = 0x2802
const GL_TEXTURE_WRAP_T:u32 = 0x2803
const GL_CLAMP:u32 = 0x2900
const GL_REPEAT:u32 = 0x2901
const GL_POLYGON_OFFSET_UNITS:u32 = 0x2A00
const GL_POLYGON_OFFSET_POINT:u32 = 0x2A01
const GL_POLYGON_OFFSET_LINE:u32 = 0x2A02
const GL_R3_G3_B2:u32 = 0x2A10
const GL_V2F:u32 = 0x2A20
const GL_V3F:u32 = 0x2A21
const GL_C4UB_V2F:u32 = 0x2A22
const GL_C4UB_V3F:u32 = 0x2A23
const GL_C3F_V3F:u32 = 0x2A24
const GL_N3F_V3F:u32 = 0x2A25
const GL_C4F_N3F_V3F:u32 = 0x2A26
const GL_T2F_V3F:u32 = 0x2A27
const GL_T4F_V4F:u32 = 0x2A28
const GL_T2F_C4UB_V3F:u32 = 0x2A29
const GL_T2F_C3F_V3F:u32 = 0x2A2A
const GL_T2F_N3F_V3F:u32 = 0x2A2B
const GL_T2F_C4F_N3F_V3F:u32 = 0x2A2C
const GL_T4F_C4F_N3F_V4F:u32 = 0x2A2D
const GL_CLIP_PLANE0:u32 = 0x3000
const GL_CLIP_DISTANCE0:u32 = 0x3000
const GL_CLIP_PLANE1:u32 = 0x3001
const GL_CLIP_DISTANCE1:u32 = 0x3001
const GL_CLIP_PLANE2:u32 = 0x3002
const GL_CLIP_DISTANCE2:u32 = 0x3002
const GL_CLIP_PLANE3:u32 = 0x3003
const GL_CLIP_DISTANCE3:u32 = 0x3003
const GL_CLIP_PLANE4:u32 = 0x3004
const GL_CLIP_DISTANCE4:u32 = 0x3004
const GL_CLIP_PLANE5:u32 = 0x3005
const GL_CLIP_DISTANCE5:u32 = 0x3005
const GL_CLIP_DISTANCE6:u32 = 0x3006
const GL_CLIP_DISTANCE7:u32 = 0x3007
const GL_LIGHT0:u32 = 0x4000
const GL_LIGHT1:u32 = 0x4001
const GL_LIGHT2:u32 = 0x4002
const GL_LIGHT3:u32 = 0x4003
const GL_LIGHT4:u32 = 0x4004
const GL_LIGHT5:u32 = 0x4005
const GL_LIGHT6:u32 = 0x4006
const GL_LIGHT7:u32 = 0x4007
const GL_CONSTANT_COLOR:u32 = 0x8001
const GL_ONE_MINUS_CONSTANT_COLOR:u32 = 0x8002
const GL_CONSTANT_ALPHA:u32 = 0x8003
const GL_ONE_MINUS_CONSTANT_ALPHA:u32 = 0x8004
const GL_FUNC_ADD:u32 = 0x8006
const GL_MIN:u32 = 0x8007
const GL_MAX:u32 = 0x8008
const GL_BLEND_EQUATION_RGB:u32 = 0x8009
const GL_FUNC_SUBTRACT:u32 = 0x800A
const GL_FUNC_REVERSE_SUBTRACT:u32 = 0x800B
const GL_UNSIGNED_BYTE_3_3_2:u32 = 0x8032
const GL_UNSIGNED_SHORT_4_4_4_4:u32 = 0x8033
const GL_UNSIGNED_SHORT_5_5_5_1:u32 = 0x8034
const GL_UNSIGNED_INT_8_8_8_8:u32 = 0x8035
const GL_UNSIGNED_INT_10_10_10_2:u32 = 0x8036
const GL_POLYGON_OFFSET_FILL:u32 = 0x8037
const GL_POLYGON_OFFSET_FACTOR:u32 = 0x8038
const GL_RESCALE_NORMAL:u32 = 0x803A
const GL_ALPHA4:u32 = 0x803B
const GL_ALPHA8:u32 = 0x803C
const GL_ALPHA12:u32 = 0x803D
const GL_ALPHA16:u32 = 0x803E
const GL_LUMINANCE4:u32 = 0x803F
const GL_LUMINANCE8:u32 = 0x8040
const GL_LUMINANCE12:u32 = 0x8041
const GL_LUMINANCE16:u32 = 0x8042
const GL_LUMINANCE4_ALPHA4:u32 = 0x8043
const GL_LUMINANCE6_ALPHA2:u32 = 0x8044
const GL_LUMINANCE8_ALPHA8:u32 = 0x8045
const GL_LUMINANCE12_ALPHA4:u32 = 0x8046
const GL_LUMINANCE12_ALPHA12:u32 = 0x8047
const GL_LUMINANCE16_ALPHA16:u32 = 0x8048
const GL_INTENSITY:u32 = 0x8049
const GL_INTENSITY4:u32 = 0x804A
const GL_INTENSITY8:u32 = 0x804B
const GL_INTENSITY12:u32 = 0x804C
const GL_INTENSITY16:u32 = 0x804D
const GL_RGB4:u32 = 0x804F
const GL_RGB5:u32 = 0x8050
const GL_RGB8:u32 = 0x8051
const GL_RGB10:u32 = 0x8052
const GL_RGB12:u32 = 0x8053
const GL_RGB16:u32 = 0x8054
const GL_RGBA2:u32 = 0x8055
const GL_RGBA4:u32 = 0x8056
const GL_RGB5_A1:u32 = 0x8057
const GL_RGBA8:u32 = 0x8058
const GL_RGB10_A2:u32 = 0x8059
const GL_RGBA12:u32 = 0x805A
const GL_RGBA16:u32 = 0x805B
const GL_TEXTURE_RED_SIZE:u32 = 0x805C
const GL_TEXTURE_GREEN_SIZE:u32 = 0x805D
const GL_TEXTURE_BLUE_SIZE:u32 = 0x805E
const GL_TEXTURE_ALPHA_SIZE:u32 = 0x805F
const GL_TEXTURE_LUMINANCE_SIZE:u32 = 0x8060
const GL_TEXTURE_INTENSITY_SIZE:u32 = 0x8061
const GL_PROXY_TEXTURE_1D:u32 = 0x8063
const GL_PROXY_TEXTURE_2D:u32 = 0x8064
const GL_TEXTURE_PRIORITY:u32 = 0x8066
const GL_TEXTURE_RESIDENT:u32 = 0x8067
const GL_TEXTURE_BINDING_1D:u32 = 0x8068
const GL_TEXTURE_BINDING_2D:u32 = 0x8069
const GL_TEXTURE_BINDING_3D:u32 = 0x806A
const GL_PACK_SKIP_IMAGES:u32 = 0x806B
const GL_PACK_IMAGE_HEIGHT:u32 = 0x806C
const GL_UNPACK_SKIP_IMAGES:u32 = 0x806D
const GL_UNPACK_IMAGE_HEIGHT:u32 = 0x806E
const GL_TEXTURE_3D:u32 = 0x806F
const GL_PROXY_TEXTURE_3D:u32 = 0x8070
const GL_TEXTURE_DEPTH:u32 = 0x8071
const GL_TEXTURE_WRAP_R:u32 = 0x8072
const GL_MAX_3D_TEXTURE_SIZE:u32 = 0x8073
const GL_VERTEX_ARRAY:u32 = 0x8074
const GL_NORMAL_ARRAY:u32 = 0x8075
const GL_COLOR_ARRAY:u32 = 0x8076
const GL_INDEX_ARRAY:u32 = 0x8077
const GL_TEXTURE_COORD_ARRAY:u32 = 0x8078
const GL_EDGE_FLAG_ARRAY:u32 = 0x8079
const GL_VERTEX_ARRAY_SIZE:u32 = 0x807A
const GL_VERTEX_ARRAY_TYPE:u32 = 0x807B
const GL_VERTEX_ARRAY_STRIDE:u32 = 0x807C
const GL_NORMAL_ARRAY_TYPE:u32 = 0x807E
const GL_NORMAL_ARRAY_STRIDE:u32 = 0x807F
const GL_COLOR_ARRAY_SIZE:u32 = 0x8081
const GL_COLOR_ARRAY_TYPE:u32 = 0x8082
const GL_COLOR_ARRAY_STRIDE:u32 = 0x8083
const GL_INDEX_ARRAY_TYPE:u32 = 0x8085
const GL_INDEX_ARRAY_STRIDE:u32 = 0x8086
const GL_TEXTURE_COORD_ARRAY_SIZE:u32 = 0x8088
const GL_TEXTURE_COORD_ARRAY_TYPE:u32 = 0x8089
const GL_TEXTURE_COORD_ARRAY_STRIDE:u32 = 0x808A
const GL_EDGE_FLAG_ARRAY_STRIDE:u32 = 0x808C
const GL_VERTEX_ARRAY_POINTER:u32 = 0x808E
const GL_NORMAL_ARRAY_POINTER:u32 = 0x808F
const GL_COLOR_ARRAY_POINTER:u32 = 0x8090
const GL_INDEX_ARRAY_POINTER:u32 = 0x8091
const GL_TEXTURE_COORD_ARRAY_POINTER:u32 = 0x8092
const GL_EDGE_FLAG_ARRAY_POINTER:u32 = 0x8093
const GL_MULTISAMPLE:u32 = 0x809D
const GL_SAMPLE_ALPHA_TO_COVERAGE:u32 = 0x809E
const GL_SAMPLE_ALPHA_TO_ONE:u32 = 0x809F
const GL_SAMPLE_COVERAGE:u32 = 0x80A0
const GL_SAMPLE_BUFFERS:u32 = 0x80A8
const GL_SAMPLES:u32 = 0x80A9
const GL_SAMPLE_COVERAGE_VALUE:u32 = 0x80AA
const GL_SAMPLE_COVERAGE_INVERT:u32 = 0x80AB
const GL_BLEND_DST_RGB:u32 = 0x80C8
const GL_BLEND_SRC_RGB:u32 = 0x80C9
const GL_BLEND_DST_ALPHA:u32 = 0x80CA
const GL_BLEND_SRC_ALPHA:u32 = 0x80CB
const GL_BGR:u32 = 0x80E0
const GL_BGRA:u32 = 0x80E1
const GL_MAX_ELEMENTS_VERTICES:u32 = 0x80E8
const GL_MAX_ELEMENTS_INDICES:u32 = 0x80E9
const GL_POINT_SIZE_MIN:u32 = 0x8126
const GL_POINT_SIZE_MAX:u32 = 0x8127
const GL_POINT_FADE_THRESHOLD_SIZE:u32 = 0x8128
const GL_POINT_DISTANCE_ATTENUATION:u32 = 0x8129
const GL_CLAMP_TO_BORDER:u32 = 0x812D
const GL_CLAMP_TO_EDGE:u32 = 0x812F
const GL_TEXTURE_MIN_LOD:u32 = 0x813A
const GL_TEXTURE_MAX_LOD:u32 = 0x813B
const GL_TEXTURE_BASE_LEVEL:u32 = 0x813C
const GL_TEXTURE_MAX_LEVEL:u32 = 0x813D
const GL_GENERATE_MIPMAP:u32 = 0x8191
const GL_GENERATE_MIPMAP_HINT:u32 = 0x8192
const GL_DEPTH_COMPONENT16:u32 = 0x81A5
const GL_DEPTH_COMPONENT24:u32 = 0x81A6
const GL_DEPTH_COMPONENT32:u32 = 0x81A7
const GL_LIGHT_MODEL_COLOR_CONTROL:u32 = 0x81F8
const GL_SINGLE_COLOR:u32 = 0x81F9
const GL_SEPARATE_SPECULAR_COLOR:u32 = 0x81FA
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:u32 = 0x8210
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:u32 = 0x8211
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE:u32 = 0x8212
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:u32 = 0x8213
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:u32 = 0x8214
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:u32 = 0x8215
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:u32 = 0x8216
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:u32 = 0x8217
const GL_FRAMEBUFFER_DEFAULT:u32 = 0x8218
const GL_FRAMEBUFFER_UNDEFINED:u32 = 0x8219
const GL_DEPTH_STENCIL_ATTACHMENT:u32 = 0x821A
const GL_MAJOR_VERSION:u32 = 0x821B
const GL_MINOR_VERSION:u32 = 0x821C
const GL_NUM_EXTENSIONS:u32 = 0x821D
const GL_CONTEXT_FLAGS:u32 = 0x821E
const GL_BUFFER_IMMUTABLE_STORAGE:u32 = 0x821F
const GL_BUFFER_STORAGE_FLAGS:u32 = 0x8220
const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED:u32 = 0x8221
const GL_INDEX:u32 = 0x8222
const GL_COMPRESSED_RED:u32 = 0x8225
const GL_COMPRESSED_RG:u32 = 0x8226
const GL_RG:u32 = 0x8227
const GL_RG_INTEGER:u32 = 0x8228
const GL_R8:u32 = 0x8229
const GL_R16:u32 = 0x822A
const GL_RG8:u32 = 0x822B
const GL_RG16:u32 = 0x822C
const GL_R16F:u32 = 0x822D
const GL_R32F:u32 = 0x822E
const GL_RG16F:u32 = 0x822F
const GL_RG32F:u32 = 0x8230
const GL_R8I:u32 = 0x8231
const GL_R8UI:u32 = 0x8232
const GL_R16I:u32 = 0x8233
const GL_R16UI:u32 = 0x8234
const GL_R32I:u32 = 0x8235
const GL_R32UI:u32 = 0x8236
const GL_RG8I:u32 = 0x8237
const GL_RG8UI:u32 = 0x8238
const GL_RG16I:u32 = 0x8239
const GL_RG16UI:u32 = 0x823A
const GL_RG32I:u32 = 0x823B
const GL_RG32UI:u32 = 0x823C
const GL_DEBUG_OUTPUT_SYNCHRONOUS:u32 = 0x8242
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH:u32 = 0x8243
const GL_DEBUG_CALLBACK_FUNCTION:u32 = 0x8244
const GL_DEBUG_CALLBACK_USER_PARAM:u32 = 0x8245
const GL_DEBUG_SOURCE_API:u32 = 0x8246
const GL_DEBUG_SOURCE_WINDOW_SYSTEM:u32 = 0x8247
const GL_DEBUG_SOURCE_SHADER_COMPILER:u32 = 0x8248
const GL_DEBUG_SOURCE_THIRD_PARTY:u32 = 0x8249
const GL_DEBUG_SOURCE_APPLICATION:u32 = 0x824A
const GL_DEBUG_SOURCE_OTHER:u32 = 0x824B
const GL_DEBUG_TYPE_ERROR:u32 = 0x824C
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:u32 = 0x824D
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:u32 = 0x824E
const GL_DEBUG_TYPE_PORTABILITY:u32 = 0x824F
const GL_DEBUG_TYPE_PERFORMANCE:u32 = 0x8250
const GL_DEBUG_TYPE_OTHER:u32 = 0x8251
const GL_LOSE_CONTEXT_ON_RESET:u32 = 0x8252
const GL_GUILTY_CONTEXT_RESET:u32 = 0x8253
const GL_INNOCENT_CONTEXT_RESET:u32 = 0x8254
const GL_UNKNOWN_CONTEXT_RESET:u32 = 0x8255
const GL_RESET_NOTIFICATION_STRATEGY:u32 = 0x8256
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT:u32 = 0x8257
const GL_PROGRAM_SEPARABLE:u32 = 0x8258
const GL_ACTIVE_PROGRAM:u32 = 0x8259
const GL_PROGRAM_PIPELINE_BINDING:u32 = 0x825A
const GL_MAX_VIEWPORTS:u32 = 0x825B
const GL_VIEWPORT_SUBPIXEL_BITS:u32 = 0x825C
const GL_VIEWPORT_BOUNDS_RANGE:u32 = 0x825D
const GL_LAYER_PROVOKING_VERTEX:u32 = 0x825E
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX:u32 = 0x825F
const GL_UNDEFINED_VERTEX:u32 = 0x8260
const GL_NO_RESET_NOTIFICATION:u32 = 0x8261
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE:u32 = 0x8262
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS:u32 = 0x8263
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS:u32 = 0x8264
const GL_MAX_COMPUTE_ATOMIC_COUNTERS:u32 = 0x8265
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS:u32 = 0x8266
const GL_COMPUTE_WORK_GROUP_SIZE:u32 = 0x8267
const GL_DEBUG_TYPE_MARKER:u32 = 0x8268
const GL_DEBUG_TYPE_PUSH_GROUP:u32 = 0x8269
const GL_DEBUG_TYPE_POP_GROUP:u32 = 0x826A
const GL_DEBUG_SEVERITY_NOTIFICATION:u32 = 0x826B
const GL_MAX_DEBUG_GROUP_STACK_DEPTH:u32 = 0x826C
const GL_DEBUG_GROUP_STACK_DEPTH:u32 = 0x826D
const GL_MAX_UNIFORM_LOCATIONS:u32 = 0x826E
const GL_INTERNALFORMAT_SUPPORTED:u32 = 0x826F
const GL_INTERNALFORMAT_PREFERRED:u32 = 0x8270
const GL_INTERNALFORMAT_RED_SIZE:u32 = 0x8271
const GL_INTERNALFORMAT_GREEN_SIZE:u32 = 0x8272
const GL_INTERNALFORMAT_BLUE_SIZE:u32 = 0x8273
const GL_INTERNALFORMAT_ALPHA_SIZE:u32 = 0x8274
const GL_INTERNALFORMAT_DEPTH_SIZE:u32 = 0x8275
const GL_INTERNALFORMAT_STENCIL_SIZE:u32 = 0x8276
const GL_INTERNALFORMAT_SHARED_SIZE:u32 = 0x8277
const GL_INTERNALFORMAT_RED_TYPE:u32 = 0x8278
const GL_INTERNALFORMAT_GREEN_TYPE:u32 = 0x8279
const GL_INTERNALFORMAT_BLUE_TYPE:u32 = 0x827A
const GL_INTERNALFORMAT_ALPHA_TYPE:u32 = 0x827B
const GL_INTERNALFORMAT_DEPTH_TYPE:u32 = 0x827C
const GL_INTERNALFORMAT_STENCIL_TYPE:u32 = 0x827D
const GL_MAX_WIDTH:u32 = 0x827E
const GL_MAX_HEIGHT:u32 = 0x827F
const GL_MAX_DEPTH:u32 = 0x8280
const GL_MAX_LAYERS:u32 = 0x8281
const GL_MAX_COMBINED_DIMENSIONS:u32 = 0x8282
const GL_COLOR_COMPONENTS:u32 = 0x8283
const GL_DEPTH_COMPONENTS:u32 = 0x8284
const GL_STENCIL_COMPONENTS:u32 = 0x8285
const GL_COLOR_RENDERABLE:u32 = 0x8286
const GL_DEPTH_RENDERABLE:u32 = 0x8287
const GL_STENCIL_RENDERABLE:u32 = 0x8288
const GL_FRAMEBUFFER_RENDERABLE:u32 = 0x8289
const GL_FRAMEBUFFER_RENDERABLE_LAYERED:u32 = 0x828A
const GL_FRAMEBUFFER_BLEND:u32 = 0x828B
const GL_READ_PIXELS:u32 = 0x828C
const GL_READ_PIXELS_FORMAT:u32 = 0x828D
const GL_READ_PIXELS_TYPE:u32 = 0x828E
const GL_TEXTURE_IMAGE_FORMAT:u32 = 0x828F
const GL_TEXTURE_IMAGE_TYPE:u32 = 0x8290
const GL_GET_TEXTURE_IMAGE_FORMAT:u32 = 0x8291
const GL_GET_TEXTURE_IMAGE_TYPE:u32 = 0x8292
const GL_MIPMAP:u32 = 0x8293
const GL_MANUAL_GENERATE_MIPMAP:u32 = 0x8294
# Should be deprecated
const GL_AUTO_GENERATE_MIPMAP:u32 = 0x8295
const GL_COLOR_ENCODING:u32 = 0x8296
const GL_SRGB_READ:u32 = 0x8297
const GL_SRGB_WRITE:u32 = 0x8298
const GL_FILTER:u32 = 0x829A
const GL_VERTEX_TEXTURE:u32 = 0x829B
const GL_TESS_CONTROL_TEXTURE:u32 = 0x829C
const GL_TESS_EVALUATION_TEXTURE:u32 = 0x829D
const GL_GEOMETRY_TEXTURE:u32 = 0x829E
const GL_FRAGMENT_TEXTURE:u32 = 0x829F
const GL_COMPUTE_TEXTURE:u32 = 0x82A0
const GL_TEXTURE_SHADOW:u32 = 0x82A1
const GL_TEXTURE_GATHER:u32 = 0x82A2
const GL_TEXTURE_GATHER_SHADOW:u32 = 0x82A3
const GL_SHADER_IMAGE_LOAD:u32 = 0x82A4
const GL_SHADER_IMAGE_STORE:u32 = 0x82A5
const GL_SHADER_IMAGE_ATOMIC:u32 = 0x82A6
const GL_IMAGE_TEXEL_SIZE:u32 = 0x82A7
const GL_IMAGE_COMPATIBILITY_CLASS:u32 = 0x82A8
const GL_IMAGE_PIXEL_FORMAT:u32 = 0x82A9
const GL_IMAGE_PIXEL_TYPE:u32 = 0x82AA
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST:u32 = 0x82AC
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST:u32 = 0x82AD
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE:u32 = 0x82AE
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE:u32 = 0x82AF
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH:u32 = 0x82B1
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT:u32 = 0x82B2
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE:u32 = 0x82B3
const GL_CLEAR_BUFFER:u32 = 0x82B4
const GL_TEXTURE_VIEW:u32 = 0x82B5
const GL_VIEW_COMPATIBILITY_CLASS:u32 = 0x82B6
const GL_FULL_SUPPORT:u32 = 0x82B7
const GL_CAVEAT_SUPPORT:u32 = 0x82B8
const GL_IMAGE_CLASS_4_X_32:u32 = 0x82B9
const GL_IMAGE_CLASS_2_X_32:u32 = 0x82BA
const GL_IMAGE_CLASS_1_X_32:u32 = 0x82BB
const GL_IMAGE_CLASS_4_X_16:u32 = 0x82BC
const GL_IMAGE_CLASS_2_X_16:u32 = 0x82BD
const GL_IMAGE_CLASS_1_X_16:u32 = 0x82BE
const GL_IMAGE_CLASS_4_X_8:u32 = 0x82BF
const GL_IMAGE_CLASS_2_X_8:u32 = 0x82C0
const GL_IMAGE_CLASS_1_X_8:u32 = 0x82C1
const GL_IMAGE_CLASS_11_11_10:u32 = 0x82C2
const GL_IMAGE_CLASS_10_10_10_2:u32 = 0x82C3
const GL_VIEW_CLASS_128_BITS:u32 = 0x82C4
const GL_VIEW_CLASS_96_BITS:u32 = 0x82C5
const GL_VIEW_CLASS_64_BITS:u32 = 0x82C6
const GL_VIEW_CLASS_48_BITS:u32 = 0x82C7
const GL_VIEW_CLASS_32_BITS:u32 = 0x82C8
const GL_VIEW_CLASS_24_BITS:u32 = 0x82C9
const GL_VIEW_CLASS_16_BITS:u32 = 0x82CA
const GL_VIEW_CLASS_8_BITS:u32 = 0x82CB
const GL_VIEW_CLASS_S3TC_DXT1_RGB:u32 = 0x82CC
const GL_VIEW_CLASS_S3TC_DXT1_RGBA:u32 = 0x82CD
const GL_VIEW_CLASS_S3TC_DXT3_RGBA:u32 = 0x82CE
const GL_VIEW_CLASS_S3TC_DXT5_RGBA:u32 = 0x82CF
const GL_VIEW_CLASS_RGTC1_RED:u32 = 0x82D0
const GL_VIEW_CLASS_RGTC2_RG:u32 = 0x82D1
const GL_VIEW_CLASS_BPTC_UNORM:u32 = 0x82D2
const GL_VIEW_CLASS_BPTC_FLOAT:u32 = 0x82D3
const GL_VERTEX_ATTRIB_BINDING:u32 = 0x82D4
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET:u32 = 0x82D5
const GL_VERTEX_BINDING_DIVISOR:u32 = 0x82D6
const GL_VERTEX_BINDING_OFFSET:u32 = 0x82D7
const GL_VERTEX_BINDING_STRIDE:u32 = 0x82D8
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET:u32 = 0x82D9
const GL_MAX_VERTEX_ATTRIB_BINDINGS:u32 = 0x82DA
const GL_TEXTURE_VIEW_MIN_LEVEL:u32 = 0x82DB
const GL_TEXTURE_VIEW_NUM_LEVELS:u32 = 0x82DC
const GL_TEXTURE_VIEW_MIN_LAYER:u32 = 0x82DD
const GL_TEXTURE_VIEW_NUM_LAYERS:u32 = 0x82DE
const GL_TEXTURE_IMMUTABLE_LEVELS:u32 = 0x82DF
const GL_BUFFER:u32 = 0x82E0
const GL_SHADER:u32 = 0x82E1
const GL_PROGRAM:u32 = 0x82E2
const GL_QUERY:u32 = 0x82E3
const GL_PROGRAM_PIPELINE:u32 = 0x82E4
const GL_MAX_VERTEX_ATTRIB_STRIDE:u32 = 0x82E5
const GL_SAMPLER:u32 = 0x82E6
const GL_DISPLAY_LIST:u32 = 0x82E7
const GL_MAX_LABEL_LENGTH:u32 = 0x82E8
const GL_NUM_SHADING_LANGUAGE_VERSIONS:u32 = 0x82E9
const GL_QUERY_TARGET:u32 = 0x82EA
const GL_MAX_CULL_DISTANCES:u32 = 0x82F9
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES:u32 = 0x82FA
const GL_CONTEXT_RELEASE_BEHAVIOR:u32 = 0x82FB
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH:u32 = 0x82FC
const GL_UNSIGNED_BYTE_2_3_3_REV:u32 = 0x8362
const GL_UNSIGNED_SHORT_5_6_5:u32 = 0x8363
const GL_UNSIGNED_SHORT_5_6_5_REV:u32 = 0x8364
const GL_UNSIGNED_SHORT_4_4_4_4_REV:u32 = 0x8365
const GL_UNSIGNED_SHORT_1_5_5_5_REV:u32 = 0x8366
const GL_UNSIGNED_INT_8_8_8_8_REV:u32 = 0x8367
const GL_UNSIGNED_INT_2_10_10_10_REV:u32 = 0x8368
const GL_MIRRORED_REPEAT:u32 = 0x8370
const GL_FOG_COORDINATE_SOURCE:u32 = 0x8450
const GL_FOG_COORD_SRC:u32 = 0x8450
const GL_FOG_COORDINATE:u32 = 0x8451
const GL_FOG_COORD:u32 = 0x8451
const GL_FRAGMENT_DEPTH:u32 = 0x8452
const GL_CURRENT_FOG_COORDINATE:u32 = 0x8453
const GL_CURRENT_FOG_COORD:u32 = 0x8453
const GL_FOG_COORDINATE_ARRAY_TYPE:u32 = 0x8454
const GL_FOG_COORD_ARRAY_TYPE:u32 = 0x8454
const GL_FOG_COORDINATE_ARRAY_STRIDE:u32 = 0x8455
const GL_FOG_COORD_ARRAY_STRIDE:u32 = 0x8455
const GL_FOG_COORDINATE_ARRAY_POINTER:u32 = 0x8456
const GL_FOG_COORD_ARRAY_POINTER:u32 = 0x8456
const GL_FOG_COORDINATE_ARRAY:u32 = 0x8457
const GL_FOG_COORD_ARRAY:u32 = 0x8457
const GL_COLOR_SUM:u32 = 0x8458
const GL_CURRENT_SECONDARY_COLOR:u32 = 0x8459
const GL_SECONDARY_COLOR_ARRAY_SIZE:u32 = 0x845A
const GL_SECONDARY_COLOR_ARRAY_TYPE:u32 = 0x845B
const GL_SECONDARY_COLOR_ARRAY_STRIDE:u32 = 0x845C
const GL_SECONDARY_COLOR_ARRAY_POINTER:u32 = 0x845D
const GL_SECONDARY_COLOR_ARRAY:u32 = 0x845E
const GL_CURRENT_RASTER_SECONDARY_COLOR:u32 = 0x845F
const GL_ALIASED_POINT_SIZE_RANGE:u32 = 0x846D
const GL_ALIASED_LINE_WIDTH_RANGE:u32 = 0x846E
const GL_TEXTURE0:u32 = 0x84C0
const GL_TEXTURE1:u32 = 0x84C1
const GL_TEXTURE2:u32 = 0x84C2
const GL_TEXTURE3:u32 = 0x84C3
const GL_TEXTURE4:u32 = 0x84C4
const GL_TEXTURE5:u32 = 0x84C5
const GL_TEXTURE6:u32 = 0x84C6
const GL_TEXTURE7:u32 = 0x84C7
const GL_TEXTURE8:u32 = 0x84C8
const GL_TEXTURE9:u32 = 0x84C9
const GL_TEXTURE10:u32 = 0x84CA
const GL_TEXTURE11:u32 = 0x84CB
const GL_TEXTURE12:u32 = 0x84CC
const GL_TEXTURE13:u32 = 0x84CD
const GL_TEXTURE14:u32 = 0x84CE
const GL_TEXTURE15:u32 = 0x84CF
const GL_TEXTURE16:u32 = 0x84D0
const GL_TEXTURE17:u32 = 0x84D1
const GL_TEXTURE18:u32 = 0x84D2
const GL_TEXTURE19:u32 = 0x84D3
const GL_TEXTURE20:u32 = 0x84D4
const GL_TEXTURE21:u32 = 0x84D5
const GL_TEXTURE22:u32 = 0x84D6
const GL_TEXTURE23:u32 = 0x84D7
const GL_TEXTURE24:u32 = 0x84D8
const GL_TEXTURE25:u32 = 0x84D9
const GL_TEXTURE26:u32 = 0x84DA
const GL_TEXTURE27:u32 = 0x84DB
const GL_TEXTURE28:u32 = 0x84DC
const GL_TEXTURE29:u32 = 0x84DD
const GL_TEXTURE30:u32 = 0x84DE
const GL_TEXTURE31:u32 = 0x84DF
const GL_ACTIVE_TEXTURE:u32 = 0x84E0
const GL_CLIENT_ACTIVE_TEXTURE:u32 = 0x84E1
const GL_MAX_TEXTURE_UNITS:u32 = 0x84E2
const GL_TRANSPOSE_MODELVIEW_MATRIX:u32 = 0x84E3
const GL_TRANSPOSE_PROJECTION_MATRIX:u32 = 0x84E4
const GL_TRANSPOSE_TEXTURE_MATRIX:u32 = 0x84E5
const GL_TRANSPOSE_COLOR_MATRIX:u32 = 0x84E6
const GL_SUBTRACT:u32 = 0x84E7
const GL_MAX_RENDERBUFFER_SIZE:u32 = 0x84E8
const GL_COMPRESSED_ALPHA:u32 = 0x84E9
const GL_COMPRESSED_LUMINANCE:u32 = 0x84EA
const GL_COMPRESSED_LUMINANCE_ALPHA:u32 = 0x84EB
const GL_COMPRESSED_INTENSITY:u32 = 0x84EC
const GL_COMPRESSED_RGB:u32 = 0x84ED
const GL_COMPRESSED_RGBA:u32 = 0x84EE
const GL_TEXTURE_COMPRESSION_HINT:u32 = 0x84EF
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER:u32 = 0x84F0
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER:u32 = 0x84F1
const GL_TEXTURE_RECTANGLE:u32 = 0x84F5
const GL_TEXTURE_BINDING_RECTANGLE:u32 = 0x84F6
const GL_PROXY_TEXTURE_RECTANGLE:u32 = 0x84F7
const GL_MAX_RECTANGLE_TEXTURE_SIZE:u32 = 0x84F8
const GL_DEPTH_STENCIL:u32 = 0x84F9
const GL_UNSIGNED_INT_24_8:u32 = 0x84FA
const GL_MAX_TEXTURE_LOD_BIAS:u32 = 0x84FD
const GL_TEXTURE_FILTER_CONTROL:u32 = 0x8500
const GL_TEXTURE_LOD_BIAS:u32 = 0x8501
const GL_INCR_WRAP:u32 = 0x8507
const GL_DECR_WRAP:u32 = 0x8508
const GL_NORMAL_MAP:u32 = 0x8511
const GL_REFLECTION_MAP:u32 = 0x8512
const GL_TEXTURE_CUBE_MAP:u32 = 0x8513
const GL_TEXTURE_BINDING_CUBE_MAP:u32 = 0x8514
const GL_TEXTURE_CUBE_MAP_POSITIVE_X:u32 = 0x8515
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X:u32 = 0x8516
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y:u32 = 0x8517
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y:u32 = 0x8518
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z:u32 = 0x8519
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z:u32 = 0x851A
const GL_PROXY_TEXTURE_CUBE_MAP:u32 = 0x851B
const GL_MAX_CUBE_MAP_TEXTURE_SIZE:u32 = 0x851C
const GL_COMBINE:u32 = 0x8570
const GL_COMBINE_RGB:u32 = 0x8571
const GL_COMBINE_ALPHA:u32 = 0x8572
const GL_RGB_SCALE:u32 = 0x8573
const GL_ADD_SIGNED:u32 = 0x8574
const GL_INTERPOLATE:u32 = 0x8575
const GL_CONSTANT:u32 = 0x8576
const GL_PRIMARY_COLOR:u32 = 0x8577
const GL_PREVIOUS:u32 = 0x8578
const GL_SOURCE0_RGB:u32 = 0x8580
const GL_SRC0_RGB:u32 = 0x8580
const GL_SOURCE1_RGB:u32 = 0x8581
const GL_SRC1_RGB:u32 = 0x8581
const GL_SOURCE2_RGB:u32 = 0x8582
const GL_SRC2_RGB:u32 = 0x8582
const GL_SOURCE0_ALPHA:u32 = 0x8588
const GL_SRC0_ALPHA:u32 = 0x8588
const GL_SOURCE1_ALPHA:u32 = 0x8589
const GL_SRC1_ALPHA:u32 = 0x8589
const GL_SOURCE2_ALPHA:u32 = 0x858A
const GL_SRC2_ALPHA:u32 = 0x858A
const GL_OPERAND0_RGB:u32 = 0x8590
const GL_OPERAND1_RGB:u32 = 0x8591
const GL_OPERAND2_RGB:u32 = 0x8592
const GL_OPERAND0_ALPHA:u32 = 0x8598
const GL_OPERAND1_ALPHA:u32 = 0x8599
const GL_OPERAND2_ALPHA:u32 = 0x859A
const GL_VERTEX_ARRAY_BINDING:u32 = 0x85B5
const GL_VERTEX_ATTRIB_ARRAY_ENABLED:u32 = 0x8622
const GL_VERTEX_ATTRIB_ARRAY_SIZE:u32 = 0x8623
const GL_VERTEX_ATTRIB_ARRAY_STRIDE:u32 = 0x8624
const GL_VERTEX_ATTRIB_ARRAY_TYPE:u32 = 0x8625
const GL_CURRENT_VERTEX_ATTRIB:u32 = 0x8626
const GL_VERTEX_PROGRAM_POINT_SIZE:u32 = 0x8642
const GL_PROGRAM_POINT_SIZE:u32 = 0x8642
const GL_VERTEX_PROGRAM_TWO_SIDE:u32 = 0x8643
const GL_VERTEX_ATTRIB_ARRAY_POINTER:u32 = 0x8645
const GL_DEPTH_CLAMP:u32 = 0x864F
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE:u32 = 0x86A0
const GL_TEXTURE_COMPRESSED:u32 = 0x86A1
const GL_NUM_COMPRESSED_TEXTURE_FORMATS:u32 = 0x86A2
const GL_COMPRESSED_TEXTURE_FORMATS:u32 = 0x86A3
const GL_DOT3_RGB:u32 = 0x86AE
const GL_DOT3_RGBA:u32 = 0x86AF
const GL_PROGRAM_BINARY_LENGTH:u32 = 0x8741
const GL_MIRROR_CLAMP_TO_EDGE:u32 = 0x8743
const GL_VERTEX_ATTRIB_ARRAY_LONG:u32 = 0x874E
const GL_BUFFER_SIZE:u32 = 0x8764
const GL_BUFFER_USAGE:u32 = 0x8765
const GL_NUM_PROGRAM_BINARY_FORMATS:u32 = 0x87FE
const GL_PROGRAM_BINARY_FORMATS:u32 = 0x87FF
const GL_STENCIL_BACK_FUNC:u32 = 0x8800
const GL_STENCIL_BACK_FAIL:u32 = 0x8801
const GL_STENCIL_BACK_PASS_DEPTH_FAIL:u32 = 0x8802
const GL_STENCIL_BACK_PASS_DEPTH_PASS:u32 = 0x8803
const GL_RGBA32F:u32 = 0x8814
const GL_RGB32F:u32 = 0x8815
const GL_RGBA16F:u32 = 0x881A
const GL_RGB16F:u32 = 0x881B
const GL_MAX_DRAW_BUFFERS:u32 = 0x8824
const GL_DRAW_BUFFER0:u32 = 0x8825
const GL_DRAW_BUFFER1:u32 = 0x8826
const GL_DRAW_BUFFER2:u32 = 0x8827
const GL_DRAW_BUFFER3:u32 = 0x8828
const GL_DRAW_BUFFER4:u32 = 0x8829
const GL_DRAW_BUFFER5:u32 = 0x882A
const GL_DRAW_BUFFER6:u32 = 0x882B
const GL_DRAW_BUFFER7:u32 = 0x882C
const GL_DRAW_BUFFER8:u32 = 0x882D
const GL_DRAW_BUFFER9:u32 = 0x882E
const GL_DRAW_BUFFER10:u32 = 0x882F
const GL_DRAW_BUFFER11:u32 = 0x8830
const GL_DRAW_BUFFER12:u32 = 0x8831
const GL_DRAW_BUFFER13:u32 = 0x8832
const GL_DRAW_BUFFER14:u32 = 0x8833
const GL_DRAW_BUFFER15:u32 = 0x8834
const GL_BLEND_EQUATION_ALPHA:u32 = 0x883D
const GL_TEXTURE_DEPTH_SIZE:u32 = 0x884A
const GL_DEPTH_TEXTURE_MODE:u32 = 0x884B
const GL_TEXTURE_COMPARE_MODE:u32 = 0x884C
const GL_TEXTURE_COMPARE_FUNC:u32 = 0x884D
const GL_COMPARE_R_TO_TEXTURE:u32 = 0x884E
const GL_COMPARE_REF_TO_TEXTURE:u32 = 0x884E
const GL_TEXTURE_CUBE_MAP_SEAMLESS:u32 = 0x884F
const GL_POINT_SPRITE:u32 = 0x8861
const GL_COORD_REPLACE:u32 = 0x8862
const GL_QUERY_COUNTER_BITS:u32 = 0x8864
const GL_CURRENT_QUERY:u32 = 0x8865
const GL_QUERY_RESULT:u32 = 0x8866
const GL_QUERY_RESULT_AVAILABLE:u32 = 0x8867
const GL_MAX_VERTEX_ATTRIBS:u32 = 0x8869
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED:u32 = 0x886A
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS:u32 = 0x886C
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS:u32 = 0x886D
const GL_MAX_TEXTURE_COORDS:u32 = 0x8871
const GL_MAX_TEXTURE_IMAGE_UNITS:u32 = 0x8872
const GL_GEOMETRY_SHADER_INVOCATIONS:u32 = 0x887F
const GL_ARRAY_BUFFER:u32 = 0x8892
const GL_ELEMENT_ARRAY_BUFFER:u32 = 0x8893
const GL_ARRAY_BUFFER_BINDING:u32 = 0x8894
const GL_ELEMENT_ARRAY_BUFFER_BINDING:u32 = 0x8895
const GL_VERTEX_ARRAY_BUFFER_BINDING:u32 = 0x8896
const GL_NORMAL_ARRAY_BUFFER_BINDING:u32 = 0x8897
const GL_COLOR_ARRAY_BUFFER_BINDING:u32 = 0x8898
const GL_INDEX_ARRAY_BUFFER_BINDING:u32 = 0x8899
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING:u32 = 0x889A
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING:u32 = 0x889B
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING:u32 = 0x889C
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING:u32 = 0x889D
const GL_FOG_COORD_ARRAY_BUFFER_BINDING:u32 = 0x889D
const GL_WEIGHT_ARRAY_BUFFER_BINDING:u32 = 0x889E
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:u32 = 0x889F
const GL_READ_ONLY:u32 = 0x88B8
const GL_WRITE_ONLY:u32 = 0x88B9
const GL_READ_WRITE:u32 = 0x88BA
const GL_BUFFER_ACCESS:u32 = 0x88BB
const GL_BUFFER_MAPPED:u32 = 0x88BC
const GL_BUFFER_MAP_POINTER:u32 = 0x88BD
const GL_TIME_ELAPSED:u32 = 0x88BF
const GL_STREAM_DRAW:u32 = 0x88E0
const GL_STREAM_READ:u32 = 0x88E1
const GL_STREAM_COPY:u32 = 0x88E2
const GL_STATIC_DRAW:u32 = 0x88E4
const GL_STATIC_READ:u32 = 0x88E5
const GL_STATIC_COPY:u32 = 0x88E6
const GL_DYNAMIC_DRAW:u32 = 0x88E8
const GL_DYNAMIC_READ:u32 = 0x88E9
const GL_DYNAMIC_COPY:u32 = 0x88EA
const GL_PIXEL_PACK_BUFFER:u32 = 0x88EB
const GL_PIXEL_UNPACK_BUFFER:u32 = 0x88EC
const GL_PIXEL_PACK_BUFFER_BINDING:u32 = 0x88ED
const GL_PIXEL_UNPACK_BUFFER_BINDING:u32 = 0x88EF
const GL_DEPTH24_STENCIL8:u32 = 0x88F0
const GL_TEXTURE_STENCIL_SIZE:u32 = 0x88F1
const GL_SRC1_COLOR:u32 = 0x88F9
const GL_ONE_MINUS_SRC1_COLOR:u32 = 0x88FA
const GL_ONE_MINUS_SRC1_ALPHA:u32 = 0x88FB
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS:u32 = 0x88FC
const GL_VERTEX_ATTRIB_ARRAY_INTEGER:u32 = 0x88FD
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR:u32 = 0x88FE
const GL_MAX_ARRAY_TEXTURE_LAYERS:u32 = 0x88FF
const GL_MIN_PROGRAM_TEXEL_OFFSET:u32 = 0x8904
const GL_MAX_PROGRAM_TEXEL_OFFSET:u32 = 0x8905
const GL_SAMPLES_PASSED:u32 = 0x8914
const GL_GEOMETRY_VERTICES_OUT:u32 = 0x8916
const GL_GEOMETRY_INPUT_TYPE:u32 = 0x8917
const GL_GEOMETRY_OUTPUT_TYPE:u32 = 0x8918
const GL_SAMPLER_BINDING:u32 = 0x8919
const GL_CLAMP_VERTEX_COLOR:u32 = 0x891A
const GL_CLAMP_FRAGMENT_COLOR:u32 = 0x891B
const GL_CLAMP_READ_COLOR:u32 = 0x891C
const GL_FIXED_ONLY:u32 = 0x891D
const GL_UNIFORM_BUFFER:u32 = 0x8A11
const GL_UNIFORM_BUFFER_BINDING:u32 = 0x8A28
const GL_UNIFORM_BUFFER_START:u32 = 0x8A29
const GL_UNIFORM_BUFFER_SIZE:u32 = 0x8A2A
const GL_MAX_VERTEX_UNIFORM_BLOCKS:u32 = 0x8A2B
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS:u32 = 0x8A2C
const GL_MAX_FRAGMENT_UNIFORM_BLOCKS:u32 = 0x8A2D
const GL_MAX_COMBINED_UNIFORM_BLOCKS:u32 = 0x8A2E
const GL_MAX_UNIFORM_BUFFER_BINDINGS:u32 = 0x8A2F
const GL_MAX_UNIFORM_BLOCK_SIZE:u32 = 0x8A30
const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:u32 = 0x8A31
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS:u32 = 0x8A32
const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:u32 = 0x8A33
const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT:u32 = 0x8A34
const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH:u32 = 0x8A35
const GL_ACTIVE_UNIFORM_BLOCKS:u32 = 0x8A36
const GL_UNIFORM_TYPE:u32 = 0x8A37
const GL_UNIFORM_SIZE:u32 = 0x8A38
const GL_UNIFORM_NAME_LENGTH:u32 = 0x8A39
const GL_UNIFORM_BLOCK_INDEX:u32 = 0x8A3A
const GL_UNIFORM_OFFSET:u32 = 0x8A3B
const GL_UNIFORM_ARRAY_STRIDE:u32 = 0x8A3C
const GL_UNIFORM_MATRIX_STRIDE:u32 = 0x8A3D
const GL_UNIFORM_IS_ROW_MAJOR:u32 = 0x8A3E
const GL_UNIFORM_BLOCK_BINDING:u32 = 0x8A3F
const GL_UNIFORM_BLOCK_DATA_SIZE:u32 = 0x8A40
const GL_UNIFORM_BLOCK_NAME_LENGTH:u32 = 0x8A41
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS:u32 = 0x8A42
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:u32 = 0x8A43
const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:u32 = 0x8A44
const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER:u32 = 0x8A45
const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:u32 = 0x8A46
const GL_FRAGMENT_SHADER:u32 = 0x8B30
const GL_VERTEX_SHADER:u32 = 0x8B31
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS:u32 = 0x8B49
const GL_MAX_VERTEX_UNIFORM_COMPONENTS:u32 = 0x8B4A
const GL_MAX_VARYING_FLOATS:u32 = 0x8B4B
const GL_MAX_VARYING_COMPONENTS:u32 = 0x8B4B
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS:u32 = 0x8B4C
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS:u32 = 0x8B4D
const GL_SHADER_TYPE:u32 = 0x8B4F
const GL_FLOAT_VEC2:u32 = 0x8B50
const GL_FLOAT_VEC3:u32 = 0x8B51
const GL_FLOAT_VEC4:u32 = 0x8B52
const GL_INT_VEC2:u32 = 0x8B53
const GL_INT_VEC3:u32 = 0x8B54
const GL_INT_VEC4:u32 = 0x8B55
const GL_BOOL:u32 = 0x8B56
const GL_BOOL_VEC2:u32 = 0x8B57
const GL_BOOL_VEC3:u32 = 0x8B58
const GL_BOOL_VEC4:u32 = 0x8B59
const GL_FLOAT_MAT2:u32 = 0x8B5A
const GL_FLOAT_MAT3:u32 = 0x8B5B
const GL_FLOAT_MAT4:u32 = 0x8B5C
const GL_SAMPLER_1D:u32 = 0x8B5D
const GL_SAMPLER_2D:u32 = 0x8B5E
const GL_SAMPLER_3D:u32 = 0x8B5F
const GL_SAMPLER_CUBE:u32 = 0x8B60
const GL_SAMPLER_1D_SHADOW:u32 = 0x8B61
const GL_SAMPLER_2D_SHADOW:u32 = 0x8B62
const GL_SAMPLER_2D_RECT:u32 = 0x8B63
const GL_SAMPLER_2D_RECT_SHADOW:u32 = 0x8B64
const GL_FLOAT_MAT2x3:u32 = 0x8B65
const GL_FLOAT_MAT2x4:u32 = 0x8B66
const GL_FLOAT_MAT3x2:u32 = 0x8B67
const GL_FLOAT_MAT3x4:u32 = 0x8B68
const GL_FLOAT_MAT4x2:u32 = 0x8B69
const GL_FLOAT_MAT4x3:u32 = 0x8B6A
const GL_DELETE_STATUS:u32 = 0x8B80
const GL_COMPILE_STATUS:u32 = 0x8B81
const GL_LINK_STATUS:u32 = 0x8B82
const GL_VALIDATE_STATUS:u32 = 0x8B83
const GL_INFO_LOG_LENGTH:u32 = 0x8B84
const GL_ATTACHED_SHADERS:u32 = 0x8B85
const GL_ACTIVE_UNIFORMS:u32 = 0x8B86
const GL_ACTIVE_UNIFORM_MAX_LENGTH:u32 = 0x8B87
const GL_SHADER_SOURCE_LENGTH:u32 = 0x8B88
const GL_ACTIVE_ATTRIBUTES:u32 = 0x8B89
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH:u32 = 0x8B8A
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT:u32 = 0x8B8B
const GL_SHADING_LANGUAGE_VERSION:u32 = 0x8B8C
const GL_CURRENT_PROGRAM:u32 = 0x8B8D
const GL_IMPLEMENTATION_COLOR_READ_TYPE:u32 = 0x8B9A
const GL_IMPLEMENTATION_COLOR_READ_FORMAT:u32 = 0x8B9B
const GL_TEXTURE_RED_TYPE:u32 = 0x8C10
const GL_TEXTURE_GREEN_TYPE:u32 = 0x8C11
const GL_TEXTURE_BLUE_TYPE:u32 = 0x8C12
const GL_TEXTURE_ALPHA_TYPE:u32 = 0x8C13
const GL_TEXTURE_LUMINANCE_TYPE:u32 = 0x8C14
const GL_TEXTURE_INTENSITY_TYPE:u32 = 0x8C15
const GL_TEXTURE_DEPTH_TYPE:u32 = 0x8C16
const GL_UNSIGNED_NORMALIZED:u32 = 0x8C17
const GL_TEXTURE_1D_ARRAY:u32 = 0x8C18
const GL_PROXY_TEXTURE_1D_ARRAY:u32 = 0x8C19
const GL_TEXTURE_2D_ARRAY:u32 = 0x8C1A
const GL_PROXY_TEXTURE_2D_ARRAY:u32 = 0x8C1B
const GL_TEXTURE_BINDING_1D_ARRAY:u32 = 0x8C1C
const GL_TEXTURE_BINDING_2D_ARRAY:u32 = 0x8C1D
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS:u32 = 0x8C29
const GL_TEXTURE_BUFFER:u32 = 0x8C2A
# Equivalent to GL_TEXTURE_BUFFER_ARB query, but named more consistently
const GL_TEXTURE_BUFFER_BINDING:u32 = 0x8C2A
const GL_MAX_TEXTURE_BUFFER_SIZE:u32 = 0x8C2B
const GL_TEXTURE_BINDING_BUFFER:u32 = 0x8C2C
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING:u32 = 0x8C2D
const GL_ANY_SAMPLES_PASSED:u32 = 0x8C2F
const GL_SAMPLE_SHADING:u32 = 0x8C36
const GL_MIN_SAMPLE_SHADING_VALUE:u32 = 0x8C37
const GL_R11F_G11F_B10F:u32 = 0x8C3A
const GL_UNSIGNED_INT_10F_11F_11F_REV:u32 = 0x8C3B
const GL_RGB9_E5:u32 = 0x8C3D
const GL_UNSIGNED_INT_5_9_9_9_REV:u32 = 0x8C3E
const GL_TEXTURE_SHARED_SIZE:u32 = 0x8C3F
const GL_SRGB:u32 = 0x8C40
const GL_SRGB8:u32 = 0x8C41
const GL_SRGB_ALPHA:u32 = 0x8C42
const GL_SRGB8_ALPHA8:u32 = 0x8C43
const GL_SLUMINANCE_ALPHA:u32 = 0x8C44
const GL_SLUMINANCE8_ALPHA8:u32 = 0x8C45
const GL_SLUMINANCE:u32 = 0x8C46
const GL_SLUMINANCE8:u32 = 0x8C47
const GL_COMPRESSED_SRGB:u32 = 0x8C48
const GL_COMPRESSED_SRGB_ALPHA:u32 = 0x8C49
const GL_COMPRESSED_SLUMINANCE:u32 = 0x8C4A
const GL_COMPRESSED_SLUMINANCE_ALPHA:u32 = 0x8C4B
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH:u32 = 0x8C76
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE:u32 = 0x8C7F
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:u32 = 0x8C80
const GL_TRANSFORM_FEEDBACK_VARYINGS:u32 = 0x8C83
const GL_TRANSFORM_FEEDBACK_BUFFER_START:u32 = 0x8C84
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE:u32 = 0x8C85
const GL_PRIMITIVES_GENERATED:u32 = 0x8C87
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:u32 = 0x8C88
const GL_RASTERIZER_DISCARD:u32 = 0x8C89
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:u32 = 0x8C8A
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:u32 = 0x8C8B
const GL_INTERLEAVED_ATTRIBS:u32 = 0x8C8C
const GL_SEPARATE_ATTRIBS:u32 = 0x8C8D
const GL_TRANSFORM_FEEDBACK_BUFFER:u32 = 0x8C8E
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING:u32 = 0x8C8F
const GL_POINT_SPRITE_COORD_ORIGIN:u32 = 0x8CA0
const GL_LOWER_LEFT:u32 = 0x8CA1
const GL_UPPER_LEFT:u32 = 0x8CA2
const GL_STENCIL_BACK_REF:u32 = 0x8CA3
const GL_STENCIL_BACK_VALUE_MASK:u32 = 0x8CA4
const GL_STENCIL_BACK_WRITEMASK:u32 = 0x8CA5
const GL_DRAW_FRAMEBUFFER_BINDING:u32 = 0x8CA6
const GL_FRAMEBUFFER_BINDING:u32 = 0x8CA6
const GL_RENDERBUFFER_BINDING:u32 = 0x8CA7
const GL_READ_FRAMEBUFFER:u32 = 0x8CA8
const GL_DRAW_FRAMEBUFFER:u32 = 0x8CA9
const GL_READ_FRAMEBUFFER_BINDING:u32 = 0x8CAA
const GL_RENDERBUFFER_SAMPLES:u32 = 0x8CAB
const GL_DEPTH_COMPONENT32F:u32 = 0x8CAC
const GL_DEPTH32F_STENCIL8:u32 = 0x8CAD
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:u32 = 0x8CD0
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:u32 = 0x8CD1
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:u32 = 0x8CD2
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:u32 = 0x8CD3
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:u32 = 0x8CD4
const GL_FRAMEBUFFER_COMPLETE:u32 = 0x8CD5
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:u32 = 0x8CD6
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:u32 = 0x8CD7
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:u32 = 0x8CDB
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:u32 = 0x8CDC
const GL_FRAMEBUFFER_UNSUPPORTED:u32 = 0x8CDD
const GL_MAX_COLOR_ATTACHMENTS:u32 = 0x8CDF
const GL_COLOR_ATTACHMENT0:u32 = 0x8CE0
const GL_COLOR_ATTACHMENT1:u32 = 0x8CE1
const GL_COLOR_ATTACHMENT2:u32 = 0x8CE2
const GL_COLOR_ATTACHMENT3:u32 = 0x8CE3
const GL_COLOR_ATTACHMENT4:u32 = 0x8CE4
const GL_COLOR_ATTACHMENT5:u32 = 0x8CE5
const GL_COLOR_ATTACHMENT6:u32 = 0x8CE6
const GL_COLOR_ATTACHMENT7:u32 = 0x8CE7
const GL_COLOR_ATTACHMENT8:u32 = 0x8CE8
const GL_COLOR_ATTACHMENT9:u32 = 0x8CE9
const GL_COLOR_ATTACHMENT10:u32 = 0x8CEA
const GL_COLOR_ATTACHMENT11:u32 = 0x8CEB
const GL_COLOR_ATTACHMENT12:u32 = 0x8CEC
const GL_COLOR_ATTACHMENT13:u32 = 0x8CED
const GL_COLOR_ATTACHMENT14:u32 = 0x8CEE
const GL_COLOR_ATTACHMENT15:u32 = 0x8CEF
const GL_COLOR_ATTACHMENT16:u32 = 0x8CF0
const GL_COLOR_ATTACHMENT17:u32 = 0x8CF1
const GL_COLOR_ATTACHMENT18:u32 = 0x8CF2
const GL_COLOR_ATTACHMENT19:u32 = 0x8CF3
const GL_COLOR_ATTACHMENT20:u32 = 0x8CF4
const GL_COLOR_ATTACHMENT21:u32 = 0x8CF5
const GL_COLOR_ATTACHMENT22:u32 = 0x8CF6
const GL_COLOR_ATTACHMENT23:u32 = 0x8CF7
const GL_COLOR_ATTACHMENT24:u32 = 0x8CF8
const GL_COLOR_ATTACHMENT25:u32 = 0x8CF9
const GL_COLOR_ATTACHMENT26:u32 = 0x8CFA
const GL_COLOR_ATTACHMENT27:u32 = 0x8CFB
const GL_COLOR_ATTACHMENT28:u32 = 0x8CFC
const GL_COLOR_ATTACHMENT29:u32 = 0x8CFD
const GL_COLOR_ATTACHMENT30:u32 = 0x8CFE
const GL_COLOR_ATTACHMENT31:u32 = 0x8CFF
const GL_DEPTH_ATTACHMENT:u32 = 0x8D00
const GL_STENCIL_ATTACHMENT:u32 = 0x8D20
const GL_FRAMEBUFFER:u32 = 0x8D40
const GL_RENDERBUFFER:u32 = 0x8D41
const GL_RENDERBUFFER_WIDTH:u32 = 0x8D42
const GL_RENDERBUFFER_HEIGHT:u32 = 0x8D43
const GL_RENDERBUFFER_INTERNAL_FORMAT:u32 = 0x8D44
const GL_STENCIL_INDEX1:u32 = 0x8D46
const GL_STENCIL_INDEX4:u32 = 0x8D47
const GL_STENCIL_INDEX8:u32 = 0x8D48
const GL_STENCIL_INDEX16:u32 = 0x8D49
const GL_RENDERBUFFER_RED_SIZE:u32 = 0x8D50
const GL_RENDERBUFFER_GREEN_SIZE:u32 = 0x8D51
const GL_RENDERBUFFER_BLUE_SIZE:u32 = 0x8D52
const GL_RENDERBUFFER_ALPHA_SIZE:u32 = 0x8D53
const GL_RENDERBUFFER_DEPTH_SIZE:u32 = 0x8D54
const GL_RENDERBUFFER_STENCIL_SIZE:u32 = 0x8D55
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:u32 = 0x8D56
const GL_MAX_SAMPLES:u32 = 0x8D57
const GL_RGB565:u32 = 0x8D62
const GL_PRIMITIVE_RESTART_FIXED_INDEX:u32 = 0x8D69
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE:u32 = 0x8D6A
const GL_MAX_ELEMENT_INDEX:u32 = 0x8D6B
const GL_RGBA32UI:u32 = 0x8D70
const GL_RGB32UI:u32 = 0x8D71
const GL_RGBA16UI:u32 = 0x8D76
const GL_RGB16UI:u32 = 0x8D77
const GL_RGBA8UI:u32 = 0x8D7C
const GL_RGB8UI:u32 = 0x8D7D
const GL_RGBA32I:u32 = 0x8D82
const GL_RGB32I:u32 = 0x8D83
const GL_RGBA16I:u32 = 0x8D88
const GL_RGB16I:u32 = 0x8D89
const GL_RGBA8I:u32 = 0x8D8E
const GL_RGB8I:u32 = 0x8D8F
const GL_RED_INTEGER:u32 = 0x8D94
const GL_GREEN_INTEGER:u32 = 0x8D95
const GL_BLUE_INTEGER:u32 = 0x8D96
const GL_ALPHA_INTEGER:u32 = 0x8D97
const GL_RGB_INTEGER:u32 = 0x8D98
const GL_RGBA_INTEGER:u32 = 0x8D99
const GL_BGR_INTEGER:u32 = 0x8D9A
const GL_BGRA_INTEGER:u32 = 0x8D9B
const GL_INT_2_10_10_10_REV:u32 = 0x8D9F
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED:u32 = 0x8DA7
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS:u32 = 0x8DA8
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV:u32 = 0x8DAD
const GL_FRAMEBUFFER_SRGB:u32 = 0x8DB9
const GL_COMPRESSED_RED_RGTC1:u32 = 0x8DBB
const GL_COMPRESSED_SIGNED_RED_RGTC1:u32 = 0x8DBC
const GL_COMPRESSED_RG_RGTC2:u32 = 0x8DBD
const GL_COMPRESSED_SIGNED_RG_RGTC2:u32 = 0x8DBE
const GL_SAMPLER_1D_ARRAY:u32 = 0x8DC0
const GL_SAMPLER_2D_ARRAY:u32 = 0x8DC1
const GL_SAMPLER_BUFFER:u32 = 0x8DC2
const GL_SAMPLER_1D_ARRAY_SHADOW:u32 = 0x8DC3
const GL_SAMPLER_2D_ARRAY_SHADOW:u32 = 0x8DC4
const GL_SAMPLER_CUBE_SHADOW:u32 = 0x8DC5
const GL_UNSIGNED_INT_VEC2:u32 = 0x8DC6
const GL_UNSIGNED_INT_VEC3:u32 = 0x8DC7
const GL_UNSIGNED_INT_VEC4:u32 = 0x8DC8
const GL_INT_SAMPLER_1D:u32 = 0x8DC9
const GL_INT_SAMPLER_2D:u32 = 0x8DCA
const GL_INT_SAMPLER_3D:u32 = 0x8DCB
const GL_INT_SAMPLER_CUBE:u32 = 0x8DCC
const GL_INT_SAMPLER_2D_RECT:u32 = 0x8DCD
const GL_INT_SAMPLER_1D_ARRAY:u32 = 0x8DCE
const GL_INT_SAMPLER_2D_ARRAY:u32 = 0x8DCF
const GL_INT_SAMPLER_BUFFER:u32 = 0x8DD0
const GL_UNSIGNED_INT_SAMPLER_1D:u32 = 0x8DD1
const GL_UNSIGNED_INT_SAMPLER_2D:u32 = 0x8DD2
const GL_UNSIGNED_INT_SAMPLER_3D:u32 = 0x8DD3
const GL_UNSIGNED_INT_SAMPLER_CUBE:u32 = 0x8DD4
const GL_UNSIGNED_INT_SAMPLER_2D_RECT:u32 = 0x8DD5
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY:u32 = 0x8DD6
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY:u32 = 0x8DD7
const GL_UNSIGNED_INT_SAMPLER_BUFFER:u32 = 0x8DD8
const GL_GEOMETRY_SHADER:u32 = 0x8DD9
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS:u32 = 0x8DDF
const GL_MAX_GEOMETRY_OUTPUT_VERTICES:u32 = 0x8DE0
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS:u32 = 0x8DE1
const GL_ACTIVE_SUBROUTINES:u32 = 0x8DE5
const GL_ACTIVE_SUBROUTINE_UNIFORMS:u32 = 0x8DE6
const GL_MAX_SUBROUTINES:u32 = 0x8DE7
const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS:u32 = 0x8DE8
const GL_LOW_FLOAT:u32 = 0x8DF0
const GL_MEDIUM_FLOAT:u32 = 0x8DF1
const GL_HIGH_FLOAT:u32 = 0x8DF2
const GL_LOW_INT:u32 = 0x8DF3
const GL_MEDIUM_INT:u32 = 0x8DF4
const GL_HIGH_INT:u32 = 0x8DF5
const GL_SHADER_BINARY_FORMATS:u32 = 0x8DF8
const GL_NUM_SHADER_BINARY_FORMATS:u32 = 0x8DF9
const GL_SHADER_COMPILER:u32 = 0x8DFA
const GL_MAX_VERTEX_UNIFORM_VECTORS:u32 = 0x8DFB
const GL_MAX_VARYING_VECTORS:u32 = 0x8DFC
const GL_MAX_FRAGMENT_UNIFORM_VECTORS:u32 = 0x8DFD
const GL_QUERY_WAIT:u32 = 0x8E13
const GL_QUERY_NO_WAIT:u32 = 0x8E14
const GL_QUERY_BY_REGION_WAIT:u32 = 0x8E15
const GL_QUERY_BY_REGION_NO_WAIT:u32 = 0x8E16
const GL_QUERY_WAIT_INVERTED:u32 = 0x8E17
const GL_QUERY_NO_WAIT_INVERTED:u32 = 0x8E18
const GL_QUERY_BY_REGION_WAIT_INVERTED:u32 = 0x8E19
const GL_QUERY_BY_REGION_NO_WAIT_INVERTED:u32 = 0x8E1A
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS:u32 = 0x8E1E
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS:u32 = 0x8E1F
const GL_TRANSFORM_FEEDBACK:u32 = 0x8E22
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED:u32 = 0x8E23
const GL_TRANSFORM_FEEDBACK_PAUSED:u32 = 0x8E23
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE:u32 = 0x8E24
const GL_TRANSFORM_FEEDBACK_ACTIVE:u32 = 0x8E24
const GL_TRANSFORM_FEEDBACK_BINDING:u32 = 0x8E25
const GL_TIMESTAMP:u32 = 0x8E28
const GL_TEXTURE_SWIZZLE_R:u32 = 0x8E42
const GL_TEXTURE_SWIZZLE_G:u32 = 0x8E43
const GL_TEXTURE_SWIZZLE_B:u32 = 0x8E44
const GL_TEXTURE_SWIZZLE_A:u32 = 0x8E45
const GL_TEXTURE_SWIZZLE_RGBA:u32 = 0x8E46
const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS:u32 = 0x8E47
const GL_ACTIVE_SUBROUTINE_MAX_LENGTH:u32 = 0x8E48
const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH:u32 = 0x8E49
const GL_NUM_COMPATIBLE_SUBROUTINES:u32 = 0x8E4A
const GL_COMPATIBLE_SUBROUTINES:u32 = 0x8E4B
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION:u32 = 0x8E4C
const GL_FIRST_VERTEX_CONVENTION:u32 = 0x8E4D
const GL_LAST_VERTEX_CONVENTION:u32 = 0x8E4E
const GL_PROVOKING_VERTEX:u32 = 0x8E4F
const GL_SAMPLE_POSITION:u32 = 0x8E50
const GL_SAMPLE_MASK:u32 = 0x8E51
const GL_SAMPLE_MASK_VALUE:u32 = 0x8E52
const GL_MAX_SAMPLE_MASK_WORDS:u32 = 0x8E59
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS:u32 = 0x8E5A
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET:u32 = 0x8E5B
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET:u32 = 0x8E5C
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS:u32 = 0x8E5D
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET:u32 = 0x8E5E
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET:u32 = 0x8E5F
const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS:u32 = 0x8E70
const GL_MAX_VERTEX_STREAMS:u32 = 0x8E71
const GL_PATCH_VERTICES:u32 = 0x8E72
const GL_PATCH_DEFAULT_INNER_LEVEL:u32 = 0x8E73
const GL_PATCH_DEFAULT_OUTER_LEVEL:u32 = 0x8E74
const GL_TESS_CONTROL_OUTPUT_VERTICES:u32 = 0x8E75
const GL_TESS_GEN_MODE:u32 = 0x8E76
const GL_TESS_GEN_SPACING:u32 = 0x8E77
const GL_TESS_GEN_VERTEX_ORDER:u32 = 0x8E78
const GL_TESS_GEN_POINT_MODE:u32 = 0x8E79
const GL_ISOLINES:u32 = 0x8E7A
const GL_FRACTIONAL_ODD:u32 = 0x8E7B
const GL_FRACTIONAL_EVEN:u32 = 0x8E7C
const GL_MAX_PATCH_VERTICES:u32 = 0x8E7D
const GL_MAX_TESS_GEN_LEVEL:u32 = 0x8E7E
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS:u32 = 0x8E7F
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS:u32 = 0x8E80
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS:u32 = 0x8E81
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS:u32 = 0x8E82
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS:u32 = 0x8E83
const GL_MAX_TESS_PATCH_COMPONENTS:u32 = 0x8E84
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS:u32 = 0x8E85
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS:u32 = 0x8E86
const GL_TESS_EVALUATION_SHADER:u32 = 0x8E87
const GL_TESS_CONTROL_SHADER:u32 = 0x8E88
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS:u32 = 0x8E89
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS:u32 = 0x8E8A
const GL_COMPRESSED_RGBA_BPTC_UNORM:u32 = 0x8E8C
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM:u32 = 0x8E8D
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT:u32 = 0x8E8E
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT:u32 = 0x8E8F
const GL_COPY_READ_BUFFER:u32 = 0x8F36
const GL_COPY_READ_BUFFER_BINDING:u32 = 0x8F36
const GL_COPY_WRITE_BUFFER:u32 = 0x8F37
const GL_COPY_WRITE_BUFFER_BINDING:u32 = 0x8F37
const GL_MAX_IMAGE_UNITS:u32 = 0x8F38
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS:u32 = 0x8F39
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES:u32 = 0x8F39
const GL_IMAGE_BINDING_NAME:u32 = 0x8F3A
const GL_IMAGE_BINDING_LEVEL:u32 = 0x8F3B
const GL_IMAGE_BINDING_LAYERED:u32 = 0x8F3C
const GL_IMAGE_BINDING_LAYER:u32 = 0x8F3D
const GL_IMAGE_BINDING_ACCESS:u32 = 0x8F3E
const GL_DRAW_INDIRECT_BUFFER:u32 = 0x8F3F
const GL_DRAW_INDIRECT_BUFFER_BINDING:u32 = 0x8F43
const GL_DOUBLE_MAT2:u32 = 0x8F46
const GL_DOUBLE_MAT3:u32 = 0x8F47
const GL_DOUBLE_MAT4:u32 = 0x8F48
const GL_DOUBLE_MAT2x3:u32 = 0x8F49
const GL_DOUBLE_MAT2x4:u32 = 0x8F4A
const GL_DOUBLE_MAT3x2:u32 = 0x8F4B
const GL_DOUBLE_MAT3x4:u32 = 0x8F4C
const GL_DOUBLE_MAT4x2:u32 = 0x8F4D
const GL_DOUBLE_MAT4x3:u32 = 0x8F4E
const GL_VERTEX_BINDING_BUFFER:u32 = 0x8F4F
const GL_R8_SNORM:u32 = 0x8F94
const GL_RG8_SNORM:u32 = 0x8F95
const GL_RGB8_SNORM:u32 = 0x8F96
const GL_RGBA8_SNORM:u32 = 0x8F97
const GL_R16_SNORM:u32 = 0x8F98
const GL_RG16_SNORM:u32 = 0x8F99
const GL_RGB16_SNORM:u32 = 0x8F9A
const GL_RGBA16_SNORM:u32 = 0x8F9B
const GL_SIGNED_NORMALIZED:u32 = 0x8F9C
const GL_PRIMITIVE_RESTART:u32 = 0x8F9D
const GL_PRIMITIVE_RESTART_INDEX:u32 = 0x8F9E
const GL_DOUBLE_VEC2:u32 = 0x8FFC
const GL_DOUBLE_VEC3:u32 = 0x8FFD
const GL_DOUBLE_VEC4:u32 = 0x8FFE
const GL_TEXTURE_CUBE_MAP_ARRAY:u32 = 0x9009
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY:u32 = 0x900A
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY:u32 = 0x900B
const GL_SAMPLER_CUBE_MAP_ARRAY:u32 = 0x900C
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW:u32 = 0x900D
const GL_INT_SAMPLER_CUBE_MAP_ARRAY:u32 = 0x900E
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY:u32 = 0x900F
const GL_IMAGE_1D:u32 = 0x904C
const GL_IMAGE_2D:u32 = 0x904D
const GL_IMAGE_3D:u32 = 0x904E
const GL_IMAGE_2D_RECT:u32 = 0x904F
const GL_IMAGE_CUBE:u32 = 0x9050
const GL_IMAGE_BUFFER:u32 = 0x9051
const GL_IMAGE_1D_ARRAY:u32 = 0x9052
const GL_IMAGE_2D_ARRAY:u32 = 0x9053
const GL_IMAGE_CUBE_MAP_ARRAY:u32 = 0x9054
const GL_IMAGE_2D_MULTISAMPLE:u32 = 0x9055
const GL_IMAGE_2D_MULTISAMPLE_ARRAY:u32 = 0x9056
const GL_INT_IMAGE_1D:u32 = 0x9057
const GL_INT_IMAGE_2D:u32 = 0x9058
const GL_INT_IMAGE_3D:u32 = 0x9059
const GL_INT_IMAGE_2D_RECT:u32 = 0x905A
const GL_INT_IMAGE_CUBE:u32 = 0x905B
const GL_INT_IMAGE_BUFFER:u32 = 0x905C
const GL_INT_IMAGE_1D_ARRAY:u32 = 0x905D
const GL_INT_IMAGE_2D_ARRAY:u32 = 0x905E
const GL_INT_IMAGE_CUBE_MAP_ARRAY:u32 = 0x905F
const GL_INT_IMAGE_2D_MULTISAMPLE:u32 = 0x9060
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY:u32 = 0x9061
const GL_UNSIGNED_INT_IMAGE_1D:u32 = 0x9062
const GL_UNSIGNED_INT_IMAGE_2D:u32 = 0x9063
const GL_UNSIGNED_INT_IMAGE_3D:u32 = 0x9064
const GL_UNSIGNED_INT_IMAGE_2D_RECT:u32 = 0x9065
const GL_UNSIGNED_INT_IMAGE_CUBE:u32 = 0x9066
const GL_UNSIGNED_INT_IMAGE_BUFFER:u32 = 0x9067
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY:u32 = 0x9068
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY:u32 = 0x9069
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY:u32 = 0x906A
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE:u32 = 0x906B
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY:u32 = 0x906C
const GL_MAX_IMAGE_SAMPLES:u32 = 0x906D
const GL_IMAGE_BINDING_FORMAT:u32 = 0x906E
const GL_RGB10_A2UI:u32 = 0x906F
const GL_MIN_MAP_BUFFER_ALIGNMENT:u32 = 0x90BC
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE:u32 = 0x90C7
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE:u32 = 0x90C8
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS:u32 = 0x90C9
const GL_MAX_VERTEX_IMAGE_UNIFORMS:u32 = 0x90CA
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS:u32 = 0x90CB
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS:u32 = 0x90CC
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS:u32 = 0x90CD
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS:u32 = 0x90CE
const GL_MAX_COMBINED_IMAGE_UNIFORMS:u32 = 0x90CF
const GL_SHADER_STORAGE_BUFFER:u32 = 0x90D2
const GL_SHADER_STORAGE_BUFFER_BINDING:u32 = 0x90D3
const GL_SHADER_STORAGE_BUFFER_START:u32 = 0x90D4
const GL_SHADER_STORAGE_BUFFER_SIZE:u32 = 0x90D5
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS:u32 = 0x90D6
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS:u32 = 0x90D7
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS:u32 = 0x90D8
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS:u32 = 0x90D9
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS:u32 = 0x90DA
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS:u32 = 0x90DB
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS:u32 = 0x90DC
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS:u32 = 0x90DD
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE:u32 = 0x90DE
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT:u32 = 0x90DF
const GL_DEPTH_STENCIL_TEXTURE_MODE:u32 = 0x90EA
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS:u32 = 0x90EB
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER:u32 = 0x90EC
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER:u32 = 0x90ED
const GL_DISPATCH_INDIRECT_BUFFER:u32 = 0x90EE
const GL_DISPATCH_INDIRECT_BUFFER_BINDING:u32 = 0x90EF
const GL_TEXTURE_2D_MULTISAMPLE:u32 = 0x9100
const GL_PROXY_TEXTURE_2D_MULTISAMPLE:u32 = 0x9101
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY:u32 = 0x9102
const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY:u32 = 0x9103
const GL_TEXTURE_BINDING_2D_MULTISAMPLE:u32 = 0x9104
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY:u32 = 0x9105
const GL_TEXTURE_SAMPLES:u32 = 0x9106
const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS:u32 = 0x9107
const GL_SAMPLER_2D_MULTISAMPLE:u32 = 0x9108
const GL_INT_SAMPLER_2D_MULTISAMPLE:u32 = 0x9109
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE:u32 = 0x910A
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY:u32 = 0x910B
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:u32 = 0x910C
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:u32 = 0x910D
const GL_MAX_COLOR_TEXTURE_SAMPLES:u32 = 0x910E
const GL_MAX_DEPTH_TEXTURE_SAMPLES:u32 = 0x910F
const GL_MAX_INTEGER_SAMPLES:u32 = 0x9110
const GL_MAX_SERVER_WAIT_TIMEOUT:u32 = 0x9111
const GL_OBJECT_TYPE:u32 = 0x9112
const GL_SYNC_CONDITION:u32 = 0x9113
const GL_SYNC_STATUS:u32 = 0x9114
const GL_SYNC_FLAGS:u32 = 0x9115
const GL_SYNC_FENCE:u32 = 0x9116
const GL_SYNC_GPU_COMMANDS_COMPLETE:u32 = 0x9117
const GL_UNSIGNALED:u32 = 0x9118
const GL_SIGNALED:u32 = 0x9119
const GL_ALREADY_SIGNALED:u32 = 0x911A
const GL_TIMEOUT_EXPIRED:u32 = 0x911B
const GL_CONDITION_SATISFIED:u32 = 0x911C
const GL_WAIT_FAILED:u32 = 0x911D
const GL_BUFFER_ACCESS_FLAGS:u32 = 0x911F
const GL_BUFFER_MAP_LENGTH:u32 = 0x9120
const GL_BUFFER_MAP_OFFSET:u32 = 0x9121
const GL_MAX_VERTEX_OUTPUT_COMPONENTS:u32 = 0x9122
const GL_MAX_GEOMETRY_INPUT_COMPONENTS:u32 = 0x9123
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS:u32 = 0x9124
const GL_MAX_FRAGMENT_INPUT_COMPONENTS:u32 = 0x9125
const GL_CONTEXT_PROFILE_MASK:u32 = 0x9126
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH:u32 = 0x9127
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT:u32 = 0x9128
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH:u32 = 0x9129
const GL_UNPACK_COMPRESSED_BLOCK_SIZE:u32 = 0x912A
const GL_PACK_COMPRESSED_BLOCK_WIDTH:u32 = 0x912B
const GL_PACK_COMPRESSED_BLOCK_HEIGHT:u32 = 0x912C
const GL_PACK_COMPRESSED_BLOCK_DEPTH:u32 = 0x912D
const GL_PACK_COMPRESSED_BLOCK_SIZE:u32 = 0x912E
const GL_TEXTURE_IMMUTABLE_FORMAT:u32 = 0x912F
const GL_MAX_DEBUG_MESSAGE_LENGTH:u32 = 0x9143
const GL_MAX_DEBUG_LOGGED_MESSAGES:u32 = 0x9144
const GL_DEBUG_LOGGED_MESSAGES:u32 = 0x9145
const GL_DEBUG_SEVERITY_HIGH:u32 = 0x9146
const GL_DEBUG_SEVERITY_MEDIUM:u32 = 0x9147
const GL_DEBUG_SEVERITY_LOW:u32 = 0x9148
const GL_QUERY_BUFFER:u32 = 0x9192
const GL_QUERY_BUFFER_BINDING:u32 = 0x9193
const GL_QUERY_RESULT_NO_WAIT:u32 = 0x9194
const GL_TEXTURE_BUFFER_OFFSET:u32 = 0x919D
const GL_TEXTURE_BUFFER_SIZE:u32 = 0x919E
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT:u32 = 0x919F
const GL_COMPUTE_SHADER:u32 = 0x91B9
const GL_MAX_COMPUTE_UNIFORM_BLOCKS:u32 = 0x91BB
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS:u32 = 0x91BC
const GL_MAX_COMPUTE_IMAGE_UNIFORMS:u32 = 0x91BD
const GL_MAX_COMPUTE_WORK_GROUP_COUNT:u32 = 0x91BE
const GL_MAX_COMPUTE_WORK_GROUP_SIZE:u32 = 0x91BF
const GL_COMPRESSED_R11_EAC:u32 = 0x9270
const GL_COMPRESSED_SIGNED_R11_EAC:u32 = 0x9271
const GL_COMPRESSED_RG11_EAC:u32 = 0x9272
const GL_COMPRESSED_SIGNED_RG11_EAC:u32 = 0x9273
const GL_COMPRESSED_RGB8_ETC2:u32 = 0x9274
const GL_COMPRESSED_SRGB8_ETC2:u32 = 0x9275
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:u32 = 0x9276
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:u32 = 0x9277
const GL_COMPRESSED_RGBA8_ETC2_EAC:u32 = 0x9278
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:u32 = 0x9279
const GL_ATOMIC_COUNTER_BUFFER:u32 = 0x92C0
const GL_ATOMIC_COUNTER_BUFFER_BINDING:u32 = 0x92C1
const GL_ATOMIC_COUNTER_BUFFER_START:u32 = 0x92C2
const GL_ATOMIC_COUNTER_BUFFER_SIZE:u32 = 0x92C3
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE:u32 = 0x92C4
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS:u32 = 0x92C5
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES:u32 = 0x92C6
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER:u32 = 0x92C7
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER:u32 = 0x92C8
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER:u32 = 0x92C9
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER:u32 = 0x92CA
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER:u32 = 0x92CB
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS:u32 = 0x92CC
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS:u32 = 0x92CD
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS:u32 = 0x92CE
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS:u32 = 0x92CF
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS:u32 = 0x92D0
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS:u32 = 0x92D1
const GL_MAX_VERTEX_ATOMIC_COUNTERS:u32 = 0x92D2
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS:u32 = 0x92D3
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS:u32 = 0x92D4
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS:u32 = 0x92D5
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS:u32 = 0x92D6
const GL_MAX_COMBINED_ATOMIC_COUNTERS:u32 = 0x92D7
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE:u32 = 0x92D8
const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS:u32 = 0x92D9
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX:u32 = 0x92DA
const GL_UNSIGNED_INT_ATOMIC_COUNTER:u32 = 0x92DB
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS:u32 = 0x92DC
const GL_DEBUG_OUTPUT:u32 = 0x92E0
const GL_UNIFORM:u32 = 0x92E1
const GL_UNIFORM_BLOCK:u32 = 0x92E2
const GL_PROGRAM_INPUT:u32 = 0x92E3
const GL_PROGRAM_OUTPUT:u32 = 0x92E4
const GL_BUFFER_VARIABLE:u32 = 0x92E5
const GL_SHADER_STORAGE_BLOCK:u32 = 0x92E6
const GL_IS_PER_PATCH:u32 = 0x92E7
const GL_VERTEX_SUBROUTINE:u32 = 0x92E8
const GL_TESS_CONTROL_SUBROUTINE:u32 = 0x92E9
const GL_TESS_EVALUATION_SUBROUTINE:u32 = 0x92EA
const GL_GEOMETRY_SUBROUTINE:u32 = 0x92EB
const GL_FRAGMENT_SUBROUTINE:u32 = 0x92EC
const GL_COMPUTE_SUBROUTINE:u32 = 0x92ED
const GL_VERTEX_SUBROUTINE_UNIFORM:u32 = 0x92EE
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM:u32 = 0x92EF
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM:u32 = 0x92F0
const GL_GEOMETRY_SUBROUTINE_UNIFORM:u32 = 0x92F1
const GL_FRAGMENT_SUBROUTINE_UNIFORM:u32 = 0x92F2
const GL_COMPUTE_SUBROUTINE_UNIFORM:u32 = 0x92F3
const GL_TRANSFORM_FEEDBACK_VARYING:u32 = 0x92F4
const GL_ACTIVE_RESOURCES:u32 = 0x92F5
const GL_MAX_NAME_LENGTH:u32 = 0x92F6
const GL_MAX_NUM_ACTIVE_VARIABLES:u32 = 0x92F7
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES:u32 = 0x92F8
const GL_NAME_LENGTH:u32 = 0x92F9
const GL_TYPE:u32 = 0x92FA
const GL_ARRAY_SIZE:u32 = 0x92FB
const GL_OFFSET:u32 = 0x92FC
const GL_BLOCK_INDEX:u32 = 0x92FD
const GL_ARRAY_STRIDE:u32 = 0x92FE
const GL_MATRIX_STRIDE:u32 = 0x92FF
const GL_IS_ROW_MAJOR:u32 = 0x9300
const GL_ATOMIC_COUNTER_BUFFER_INDEX:u32 = 0x9301
const GL_BUFFER_BINDING:u32 = 0x9302
const GL_BUFFER_DATA_SIZE:u32 = 0x9303
const GL_NUM_ACTIVE_VARIABLES:u32 = 0x9304
const GL_ACTIVE_VARIABLES:u32 = 0x9305
const GL_REFERENCED_BY_VERTEX_SHADER:u32 = 0x9306
const GL_REFERENCED_BY_TESS_CONTROL_SHADER:u32 = 0x9307
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER:u32 = 0x9308
const GL_REFERENCED_BY_GEOMETRY_SHADER:u32 = 0x9309
const GL_REFERENCED_BY_FRAGMENT_SHADER:u32 = 0x930A
const GL_REFERENCED_BY_COMPUTE_SHADER:u32 = 0x930B
const GL_TOP_LEVEL_ARRAY_SIZE:u32 = 0x930C
const GL_TOP_LEVEL_ARRAY_STRIDE:u32 = 0x930D
const GL_LOCATION:u32 = 0x930E
const GL_LOCATION_INDEX:u32 = 0x930F
const GL_FRAMEBUFFER_DEFAULT_WIDTH:u32 = 0x9310
const GL_FRAMEBUFFER_DEFAULT_HEIGHT:u32 = 0x9311
const GL_FRAMEBUFFER_DEFAULT_LAYERS:u32 = 0x9312
const GL_FRAMEBUFFER_DEFAULT_SAMPLES:u32 = 0x9313
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS:u32 = 0x9314
const GL_MAX_FRAMEBUFFER_WIDTH:u32 = 0x9315
const GL_MAX_FRAMEBUFFER_HEIGHT:u32 = 0x9316
const GL_MAX_FRAMEBUFFER_LAYERS:u32 = 0x9317
const GL_MAX_FRAMEBUFFER_SAMPLES:u32 = 0x9318
const GL_LOCATION_COMPONENT:u32 = 0x934A
const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX:u32 = 0x934B
const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE:u32 = 0x934C
const GL_CLIP_ORIGIN:u32 = 0x935C
const GL_CLIP_DEPTH_MODE:u32 = 0x935D
const GL_NEGATIVE_ONE_TO_ONE:u32 = 0x935E
const GL_ZERO_TO_ONE:u32 = 0x935F
const GL_CLEAR_TEXTURE:u32 = 0x9365
const GL_NUM_SAMPLE_COUNTS:u32 = 0x9380
proc "importc" glAccum(op: u32, value: f32): void
proc "importc" glActiveShaderProgram(pipeline: u32, program: u32): void
proc "importc" glActiveTexture(texture: u32): void
proc "importc" glAlphaFunc(func: u32, ref: f32): void
proc "importc" glAreTexturesResident(n: i32, textures: ptr(u32), residences: ptr(bool)): bool
proc "importc" glArrayElement(i: i32): void
proc "importc" glAttachShader(program: u32, shader: u32): void
proc "importc" glBegin(mode: u32): void
proc "importc" glBeginConditionalRender(id: u32, mode: u32): void
proc "importc" glBeginQuery(target: u32, id: u32): void
proc "importc" glBeginQueryIndexed(target: u32, index: u32, id: u32): void
proc "importc" glBeginTransformFeedback(primitiveMode: u32): void
proc "importc" glBindAttribLocation(program: u32, index: u32, name: i8): void
proc "importc" glBindBuffer(target: u32, buffer: u32): void
proc "importc" glBindBufferBase(target: u32, index: u32, buffer: u32): void
proc "importc" glBindBufferRange(target: u32, index: u32, buffer: u32, offset: int, size: int): void
proc "importc" glBindBuffersBase(target: u32, first: u32, count: i32, buffers: ptr(u32)): void
proc "importc" glBindBuffersRange(target: u32, first: u32, count: i32, buffers: ptr(u32), offsets: ptr(int), sizes: ptr(int)): void
proc "importc" glBindFragDataLocation(program: u32, color: u32, name: ptr(i8)): void
proc "importc" glBindFragDataLocationIndexed(program: u32, colorNumber: u32, index: u32, name: i8): void
proc "importc" glBindFramebuffer(target: u32, framebuffer: u32): void
proc "importc" glBindImageTexture(unit: u32, texture: u32, level: i32, layered: bool, layer: i32, access: u32, format: u32): void
proc "importc" glBindImageTextures(first: u32, count: i32, textures: ptr(u32)): void
proc "importc" glBindProgramPipeline(pipeline: u32): void
proc "importc" glBindRenderbuffer(target: u32, renderbuffer: u32): void
proc "importc" glBindSampler(unit: u32, sampler: u32): void
proc "importc" glBindSamplers(first: u32, count: i32, samplers: ptr(u32)): void
proc "importc" glBindTexture(target: u32, texture: u32): void
proc "importc" glBindTextureUnit(unit: u32, texture: u32): void
proc "importc" glBindTextures(first: u32, count: i32, textures: ptr(u32)): void
proc "importc" glBindTransformFeedback(target: u32, id: u32): void
proc "importc" glBindVertexArray(array: u32): void
proc "importc" glBindVertexBuffer(bindingindex: u32, buffer: u32, offset: int, stride: i32): void
proc "importc" glBindVertexBuffers(first: u32, count: i32, buffers: ptr(u32), offsets: ptr(int), strides: ptr(i32)): void
proc "importc" glBitmap(width: i32, height: i32, xorig: f32, yorig: f32, xmove: f32, ymove: f32, bitmap: ptr(u8)): void
proc "importc" glBlendColor(red: f32, green: f32, blue: f32, alpha: f32): void
proc "importc" glBlendEquation(mode: u32): void
proc "importc" glBlendEquationSeparate(modeRGB: u32, modeAlpha: u32): void
proc "importc" glBlendEquationSeparatei(buf: u32, modeRGB: u32, modeAlpha: u32): void
proc "importc" glBlendEquationi(buf: u32, mode: u32): void
proc "importc" glBlendFunc(sfactor: u32, dfactor: u32): void
proc "importc" glBlendFuncSeparate(sfactorRGB: u32, dfactorRGB: u32, sfactorAlpha: u32, dfactorAlpha: u32): void
proc "importc" glBlendFuncSeparatei(buf: u32, srcRGB: u32, dstRGB: u32, srcAlpha: u32, dstAlpha: u32): void
proc "importc" glBlendFunci(buf: u32, src: u32, dst: u32): void
proc "importc" glBlitFramebuffer(srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32): void
proc "importc" glBlitNamedFramebuffer(readFramebuffer: u32, drawFramebuffer: u32, srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32): void
proc "importc" glBufferData(target: u32, size: int, data: pointer, usage: u32): void
proc "importc" glBufferStorage(target: u32, size: int, data: pointer, flags: u32): void
proc "importc" glBufferSubData(target: u32, offset: int, size: int, data: pointer): void
proc "importc" glCallList(list: u32): void
proc "importc" glCallLists(n: i32, typ: u32, lists: pointer): void
proc "importc" glCheckFramebufferStatus(target: u32): u32
proc "importc" glCheckNamedFramebufferStatus(framebuffer: u32, target: u32): u32
proc "importc" glClampColor(target: u32, clamp: u32): void
proc "importc" glClear(mask: u32): void
proc "importc" glClearAccum(red: f32, green: f32, blue: f32, alpha: f32): void
proc "importc" glClearBufferData(target: u32, internalformat: u32, format: u32, typ: u32, data: pointer): void
proc "importc" glClearBufferSubData(target: u32, internalformat: u32, offset: int, size: int, format: u32, typ: u32, data: pointer): void
proc "importc" glClearBufferfi(buffer: u32, drawbuffer: i32, depth: f32, stencil: i32): void
proc "importc" glClearBufferfv(buffer: u32, drawbuffer: i32, value: ptr(f32)): void
proc "importc" glClearBufferiv(buffer: u32, drawbuffer: i32, value: ptr(i32)): void
proc "importc" glClearBufferuiv(buffer: u32, drawbuffer: i32, value: ptr(u32)): void
proc "importc" glClearColor(red: f32, green: f32, blue: f32, alpha: f32): void
proc "importc" glClearDepth(depth: f64): void
proc "importc" glClearDepthf(d: f32): void
proc "importc" glClearIndex(c: f32): void
proc "importc" glClearNamedBufferData(buffer: u32, internalformat: u32, format: u32, typ: u32, data: pointer): void
proc "importc" glClearNamedBufferSubData(buffer: u32, internalformat: u32, offset: int, size: int, format: u32, typ: u32, data: pointer): void
proc "importc" glClearNamedFramebufferfi(framebuffer: u32, buffer: u32, drawbuffer: i32, depth: f32, stencil: i32): void
proc "importc" glClearNamedFramebufferfv(framebuffer: u32, buffer: u32, drawbuffer: i32, value: f32): void
proc "importc" glClearNamedFramebufferiv(framebuffer: u32, buffer: u32, drawbuffer: i32, value: i32): void
proc "importc" glClearNamedFramebufferuiv(framebuffer: u32, buffer: u32, drawbuffer: i32, value: u32): void
proc "importc" glClearStencil(s: i32): void
proc "importc" glClearTexImage(texture: u32, level: i32, format: u32, typ: u32, data: pointer): void
proc "importc" glClearTexSubImage(texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, typ: u32, data: pointer): void
proc "importc" glClientActiveTexture(texture: u32): void
proc "importc" glClipControl(origin: u32, depth: u32): void
proc "importc" glClipPlane(plane: u32, equation: ptr(f64)): void
proc "importc" glColor3b(red: i8, green: i8, blue: i8): void
proc "importc" glColor3bv(v: ptr(i8)): void
proc "importc" glColor3d(red: f64, green: f64, blue: f64): void
proc "importc" glColor3dv(v: ptr(f64)): void
proc "importc" glColor3f(red: f32, green: f32, blue: f32): void
proc "importc" glColor3fv(v: ptr(f32)): void
proc "importc" glColor3i(red: i32, green: i32, blue: i32): void
proc "importc" glColor3iv(v: ptr(i32)): void
proc "importc" glColor3s(red: i16, green: i16, blue: i16): void
proc "importc" glColor3sv(v: ptr(i16)): void
proc "importc" glColor3ub(red: u8, green: u8, blue: u8): void
proc "importc" glColor3ubv(v: ptr(u8)): void
proc "importc" glColor3ui(red: u32, green: u32, blue: u32): void
proc "importc" glColor3uiv(v: ptr(u32)): void
proc "importc" glColor3us(red: u16, green: u16, blue: u16): void
proc "importc" glColor3usv(v: ptr(u16)): void
proc "importc" glColor4b(red: i8, green: i8, blue: i8, alpha: i8): void
proc "importc" glColor4bv(v: ptr(i8)): void
proc "importc" glColor4d(red: f64, green: f64, blue: f64, alpha: f64): void
proc "importc" glColor4dv(v: ptr(f64)): void
proc "importc" glColor4f(red: f32, green: f32, blue: f32, alpha: f32): void
proc "importc" glColor4fv(v: ptr(f32)): void
proc "importc" glColor4i(red: i32, green: i32, blue: i32, alpha: i32): void
proc "importc" glColor4iv(v: ptr(i32)): void
proc "importc" glColor4s(red: i16, green: i16, blue: i16, alpha: i16): void
proc "importc" glColor4sv(v: ptr(i16)): void
proc "importc" glColor4ub(red: u8, green: u8, blue: u8, alpha: u8): void
proc "importc" glColor4ubv(v: ptr(u8)): void
proc "importc" glColor4ui(red: u32, green: u32, blue: u32, alpha: u32): void
proc "importc" glColor4uiv(v: ptr(u32)): void
proc "importc" glColor4us(red: u16, green: u16, blue: u16, alpha: u16): void
proc "importc" glColor4usv(v: ptr(u16)): void
proc "importc" glColorMask(red: bool, green: bool, blue: bool, alpha: bool): void
proc "importc" glColorMaski(index: u32, r: bool, g: bool, b: bool, a: bool): void
proc "importc" glColorMaterial(face: u32, mode: u32): void
proc "importc" glColorP3ui(typ: u32, color: u32): void
proc "importc" glColorP3uiv(typ: u32, color: ptr(u32)): void
proc "importc" glColorP4ui(typ: u32, color: u32): void
proc "importc" glColorP4uiv(typ: u32, color: ptr(u32)): void
proc "importc" glColorPointer(size: i32, typ: u32, stride: i32, pointer: pointer): void
proc "importc" glCompileShader(shader: u32): void
proc "importc" glCompressedTexImage1D(target: u32, level: i32, internalformat: u32, width: i32, border: i32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTexImage2D(target: u32, level: i32, internalformat: u32, width: i32, height: i32, border: i32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTexImage3D(target: u32, level: i32, internalformat: u32, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTexSubImage1D(target: u32, level: i32, xoffset: i32, width: i32, format: u32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTexSubImage2D(target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTexSubImage3D(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTextureSubImage1D(texture: u32, level: i32, xoffset: i32, width: i32, format: u32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTextureSubImage2D(texture: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, imageSize: i32, data: pointer): void
proc "importc" glCompressedTextureSubImage3D(texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: pointer): void
proc "importc" glCopyBufferSubData(readTarget: u32, writeTarget: u32, readOffset: int, writeOffset: int, size: int): void
proc "importc" glCopyImageSubData(srcName: u32, srcTarget: u32, srcLevel: i32, srcX: i32, srcY: i32, srcZ: i32, dstName: u32, dstTarget: u32, dstLevel: i32, dstX: i32, dstY: i32, dstZ: i32, srcWidth: i32, srcHeight: i32, srcDepth: i32): void
proc "importc" glCopyNamedBufferSubData(readBuffer: u32, writeBuffer: u32, readOffset: int, writeOffset: int, size: int): void
proc "importc" glCopyPixels(x: i32, y: i32, width: i32, height: i32, typ: u32): void
proc "importc" glCopyTexImage1D(target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, border: i32): void
proc "importc" glCopyTexImage2D(target: u32, level: i32, internalformat: u32, x: i32, y: i32, width: i32, height: i32, border: i32): void
proc "importc" glCopyTexSubImage1D(target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32): void
proc "importc" glCopyTexSubImage2D(target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32): void
proc "importc" glCopyTexSubImage3D(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32): void
proc "importc" glCopyTextureSubImage1D(texture: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32): void
proc "importc" glCopyTextureSubImage2D(texture: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32): void
proc "importc" glCopyTextureSubImage3D(texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32): void
proc "importc" glCreateBuffers(n: i32, buffers: u32): void
proc "importc" glCreateFramebuffers(n: i32, framebuffers: u32): void
proc "importc" glCreateProgram(): u32
proc "importc" glCreateProgramPipelines(n: i32, pipelines: u32): void
proc "importc" glCreateQueries(target: u32, n: i32, ids: u32): void
proc "importc" glCreateRenderbuffers(n: i32, renderbuffers: u32): void
proc "importc" glCreateSamplers(n: i32, samplers: u32): void
proc "importc" glCreateShader(typ: u32): u32
proc "importc" glCreateShaderProgramv(typ: u32, count: i32, strings: ptr(i8)): u32
proc "importc" glCreateTextures(target: u32, n: i32, textures: u32): void
proc "importc" glCreateTransformFeedbacks(n: i32, ids: u32): void
proc "importc" glCreateVertexArrays(n: i32, arrays: u32): void
proc "importc" glCullFace(mode: u32): void
proc "importc" glDebugMessageControl(source: u32, typ: u32, severity: u32, count: i32, ids: ptr(u32), enabled: bool): void
proc "importc" glDebugMessageInsert(source: u32, typ: u32, id: u32, severity: u32, length: i32, buf: ptr(i8)): void
proc "importc" glDeleteBuffers(n: i32, buffers: ptr(u32)): void
proc "importc" glDeleteFramebuffers(n: i32, framebuffers: ptr(u32)): void
proc "importc" glDeleteLists(list: u32, range: i32): void
proc "importc" glDeleteProgram(program: u32): void
proc "importc" glDeleteProgramPipelines(n: i32, pipelines: ptr(u32)): void
proc "importc" glDeleteQueries(n: i32, ids: ptr(u32)): void
proc "importc" glDeleteRenderbuffers(n: i32, renderbuffers: ptr(u32)): void
proc "importc" glDeleteSamplers(count: i32, samplers: ptr(u32)): void
proc "importc" glDeleteShader(shader: u32): void
proc "importc" glDeleteTextures(n: i32, textures: ptr(u32)): void
proc "importc" glDeleteTransformFeedbacks(n: i32, ids: ptr(u32)): void
proc "importc" glDeleteVertexArrays(n: i32, arrays: ptr(u32)): void
proc "importc" glDepthFunc(func: u32): void
proc "importc" glDepthMask(flag: bool): void
proc "importc" glDepthRange(near: f64, far: f64): void
proc "importc" glDepthRangeArrayv(first: u32, count: i32, v: ptr(f64)): void
proc "importc" glDepthRangeIndexed(index: u32, n: f64, f: f64): void
proc "importc" glDepthRangef(n: f32, f: f32): void
proc "importc" glDetachShader(program: u32, shader: u32): void
proc "importc" glDisable(cap: u32): void
proc "importc" glDisableClientState(array: u32): void
proc "importc" glDisableVertexArrayAttrib(vaobj: u32, index: u32): void
proc "importc" glDisableVertexAttribArray(index: u32): void
proc "importc" glDisablei(target: u32, index: u32): void
proc "importc" glDispatchCompute(num_groups_x: u32, num_groups_y: u32, num_groups_z: u32): void
proc "importc" glDispatchComputeIndirect(indirect: int): void
proc "importc" glDrawArrays(mode: u32, first: i32, count: i32): void
proc "importc" glDrawArraysIndirect(mode: u32, indirect: pointer): void
proc "importc" glDrawArraysInstanced(mode: u32, first: i32, count: i32, instancecount: i32): void
proc "importc" glDrawArraysInstancedBaseInstance(mode: u32, first: i32, count: i32, instancecount: i32, baseinstance: u32): void
proc "importc" glDrawBuffer(buf: u32): void
proc "importc" glDrawBuffers(n: i32, bufs: ptr(u32)): void
proc "importc" glDrawElements(mode: u32, count: i32, typ: u32, indices: pointer): void
proc "importc" glDrawElementsBaseVertex(mode: u32, count: i32, typ: u32, indices: pointer, basevertex: i32): void
proc "importc" glDrawElementsIndirect(mode: u32, typ: u32, indirect: pointer): void
proc "importc" glDrawElementsInstanced(mode: u32, count: i32, typ: u32, indices: pointer, instancecount: i32): void
proc "importc" glDrawElementsInstancedBaseInstance(mode: u32, count: i32, typ: u32, indices: pointer, instancecount: i32, baseinstance: u32): void
proc "importc" glDrawElementsInstancedBaseVertex(mode: u32, count: i32, typ: u32, indices: pointer, instancecount: i32, basevertex: i32): void
proc "importc" glDrawElementsInstancedBaseVertexBaseInstance(mode: u32, count: i32, typ: u32, indices: pointer, instancecount: i32, basevertex: i32, baseinstance: u32): void
proc "importc" glDrawPixels(width: i32, height: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glDrawRangeElements(mode: u32, start: u32, end: u32, count: i32, typ: u32, indices: pointer): void
proc "importc" glDrawRangeElementsBaseVertex(mode: u32, start: u32, end: u32, count: i32, typ: u32, indices: pointer, basevertex: i32): void
proc "importc" glDrawTransformFeedback(mode: u32, id: u32): void
proc "importc" glDrawTransformFeedbackInstanced(mode: u32, id: u32, instancecount: i32): void
proc "importc" glDrawTransformFeedbackStream(mode: u32, id: u32, stream: u32): void
proc "importc" glDrawTransformFeedbackStreamInstanced(mode: u32, id: u32, stream: u32, instancecount: i32): void
proc "importc" glEdgeFlag(flag: bool): void
proc "importc" glEdgeFlagPointer(stride: i32, pointer: pointer): void
proc "importc" glEdgeFlagv(flag: ptr(bool)): void
proc "importc" glEnable(cap: u32): void
proc "importc" glEnableClientState(array: u32): void
proc "importc" glEnableVertexArrayAttrib(vaobj: u32, index: u32): void
proc "importc" glEnableVertexAttribArray(index: u32): void
proc "importc" glEnablei(target: u32, index: u32): void
proc "importc" glEnd(): void
proc "importc" glEndConditionalRender(): void
proc "importc" glEndList(): void
proc "importc" glEndQuery(target: u32): void
proc "importc" glEndQueryIndexed(target: u32, index: u32): void
proc "importc" glEndTransformFeedback(): void
proc "importc" glEvalCoord1d(u: f64): void
proc "importc" glEvalCoord1dv(u: ptr(f64)): void
proc "importc" glEvalCoord1f(u: f32): void
proc "importc" glEvalCoord1fv(u: ptr(f32)): void
proc "importc" glEvalCoord2d(u: f64, v: f64): void
proc "importc" glEvalCoord2dv(u: ptr(f64)): void
proc "importc" glEvalCoord2f(u: f32, v: f32): void
proc "importc" glEvalCoord2fv(u: ptr(f32)): void
proc "importc" glEvalMesh1(mode: u32, i1: i32, i2: i32): void
proc "importc" glEvalMesh2(mode: u32, i1: i32, i2: i32, j1: i32, j2: i32): void
proc "importc" glEvalPoint1(i: i32): void
proc "importc" glEvalPoint2(i: i32, j: i32): void
proc "importc" glFeedbackBuffer(size: i32, typ: u32, buffer: ptr(f32)): void
proc "importc" glFinish(): void
proc "importc" glFlush(): void
proc "importc" glFlushMappedBufferRange(target: u32, offset: int, length: int): void
proc "importc" glFlushMappedNamedBufferRange(buffer: u32, offset: int, length: int): void
proc "importc" glFogCoordPointer(typ: u32, stride: i32, pointer: pointer): void
proc "importc" glFogCoordd(coord: f64): void
proc "importc" glFogCoorddv(coord: ptr(f64)): void
proc "importc" glFogCoordf(coord: f32): void
proc "importc" glFogCoordfv(coord: ptr(f32)): void
proc "importc" glFogf(pname: u32, param: f32): void
proc "importc" glFogfv(pname: u32, params: ptr(f32)): void
proc "importc" glFogi(pname: u32, param: i32): void
proc "importc" glFogiv(pname: u32, params: ptr(i32)): void
proc "importc" glFramebufferParameteri(target: u32, pname: u32, param: i32): void
proc "importc" glFramebufferRenderbuffer(target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32): void
proc "importc" glFramebufferTexture(target: u32, attachment: u32, texture: u32, level: i32): void
proc "importc" glFramebufferTexture1D(target: u32, attachment: u32, textarget: u32, texture: u32, level: i32): void
proc "importc" glFramebufferTexture2D(target: u32, attachment: u32, textarget: u32, texture: u32, level: i32): void
proc "importc" glFramebufferTexture3D(target: u32, attachment: u32, textarget: u32, texture: u32, level: i32, zoffset: i32): void
proc "importc" glFramebufferTextureLayer(target: u32, attachment: u32, texture: u32, level: i32, layer: i32): void
proc "importc" glFrontFace(mode: u32): void
proc "importc" glFrustum(left: f64, right: f64, bottom: f64, top: f64, zNear: f64, zFar: f64): void
proc "importc" glGenBuffers(n: i32, buffers: ptr(u32)): void
proc "importc" glGenFramebuffers(n: i32, framebuffers: ptr(u32)): void
proc "importc" glGenLists(range: i32): u32
proc "importc" glGenProgramPipelines(n: i32, pipelines: ptr(u32)): void
proc "importc" glGenQueries(n: i32, ids: ptr(u32)): void
proc "importc" glGenRenderbuffers(n: i32, renderbuffers: ptr(u32)): void
proc "importc" glGenSamplers(count: i32, samplers: ptr(u32)): void
proc "importc" glGenTextures(n: i32, textures: ptr(u32)): void
proc "importc" glGenTransformFeedbacks(n: i32, ids: ptr(u32)): void
proc "importc" glGenVertexArrays(n: i32, arrays: ptr(u32)): void
proc "importc" glGenerateMipmap(target: u32): void
proc "importc" glGenerateTextureMipmap(texture: u32): void
proc "importc" glGetActiveAtomicCounterBufferiv(program: u32, bufferIndex: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetActiveAttrib(program: u32, index: u32, bufSize: i32, length: ptr(i32), size: ptr(i32), typ: ptr(u32), name: ptr(i8)): void
proc "importc" glGetActiveSubroutineName(program: u32, shadertype: u32, index: u32, bufsize: i32, length: ptr(i32), name: ptr(i8)): void
proc "importc" glGetActiveSubroutineUniformName(program: u32, shadertype: u32, index: u32, bufsize: i32, length: ptr(i32), name: ptr(i8)): void
proc "importc" glGetActiveSubroutineUniformiv(program: u32, shadertype: u32, index: u32, pname: u32, values: ptr(i32)): void
proc "importc" glGetActiveUniform(program: u32, index: u32, bufSize: i32, length: ptr(i32), size: ptr(i32), typ: ptr(u32), name: ptr(i8)): void
proc "importc" glGetActiveUniformBlockName(program: u32, uniformBlockIndex: u32, bufSize: i32, length: ptr(i32), uniformBlockName: ptr(i8)): void
proc "importc" glGetActiveUniformBlockiv(program: u32, uniformBlockIndex: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetActiveUniformName(program: u32, uniformIndex: u32, bufSize: i32, length: ptr(i32), uniformName: ptr(i8)): void
proc "importc" glGetActiveUniformsiv(program: u32, uniformCount: i32, uniformIndices: ptr(u32), pname: u32, params: ptr(i32)): void
proc "importc" glGetAttachedShaders(program: u32, maxCount: i32, count: ptr(i32), shaders: ptr(u32)): void
proc "importc" glGetAttribLocation(program: u32, name: i8): i32
proc "importc" glGetBooleani_v(target: u32, index: u32, data: ptr(bool)): void
proc "importc" glGetBooleanv(pname: u32, data: ptr(bool)): void
proc "importc" glGetBufferParameteri64v(target: u32, pname: u32, params: ptr(i64)): void
proc "importc" glGetBufferParameteriv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetBufferPointerv(target: u32, pname: u32, params: pointer): void
proc "importc" glGetBufferSubData(target: u32, offset: int, size: int, data: pointer): void
proc "importc" glGetClipPlane(plane: u32, equation: ptr(f64)): void
proc "importc" glGetCompressedTexImage(target: u32, level: i32, img: pointer): void
proc "importc" glGetCompressedTextureImage(texture: u32, level: i32, bufSize: i32, pixels: pointer): void
proc "importc" glGetCompressedTextureSubImage(texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, bufSize: i32, pixels: pointer): void
proc "importc" glGetDebugMessageLog(count: u32, bufSize: i32, sources: ptr(u32), types: ptr(u32), ids: ptr(u32), severities: ptr(u32), lengths: ptr(i32), messageLog: ptr(i8)): u32
proc "importc" glGetDoublei_v(target: u32, index: u32, data: ptr(f64)): void
proc "importc" glGetDoublev(pname: u32, data: ptr(f64)): void
proc "importc" glGetError(): u32
proc "importc" glGetFloati_v(target: u32, index: u32, data: ptr(f32)): void
proc "importc" glGetFloatv(pname: u32, data: ptr(f32)): void
proc "importc" glGetFragDataIndex(program: u32, name: i8): i32
proc "importc" glGetFragDataLocation(program: u32, name: ptr(i8)): i32
proc "importc" glGetFramebufferAttachmentParameteriv(target: u32, attachment: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetFramebufferParameteriv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetGraphicsResetStatus(): u32
proc "importc" glGetInteger64i_v(target: u32, index: u32, data: ptr(i64)): void
proc "importc" glGetInteger64v(pname: u32, data: ptr(i64)): void
proc "importc" glGetIntegeri_v(target: u32, index: u32, data: ptr(i32)): void
proc "importc" glGetIntegerv(pname: u32, data: ptr(i32)): void
proc "importc" glGetInternalformati64v(target: u32, internalformat: u32, pname: u32, bufSize: i32, params: ptr(i64)): void
proc "importc" glGetInternalformativ(target: u32, internalformat: u32, pname: u32, bufSize: i32, params: ptr(i32)): void
proc "importc" glGetLightfv(light: u32, pname: u32, params: ptr(f32)): void
proc "importc" glGetLightiv(light: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetMapdv(target: u32, query: u32, v: ptr(f64)): void
proc "importc" glGetMapfv(target: u32, query: u32, v: ptr(f32)): void
proc "importc" glGetMapiv(target: u32, query: u32, v: ptr(i32)): void
proc "importc" glGetMaterialfv(face: u32, pname: u32, params: ptr(f32)): void
proc "importc" glGetMaterialiv(face: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetMultisamplefv(pname: u32, index: u32, val: ptr(f32)): void
proc "importc" glGetNamedBufferParameteri64v(buffer: u32, pname: u32, params: i64): void
proc "importc" glGetNamedBufferParameteriv(buffer: u32, pname: u32, params: i32): void
proc "importc" glGetNamedBufferPointerv(buffer: u32, pname: u32, params: pointer): void
proc "importc" glGetNamedBufferSubData(buffer: u32, offset: int, size: int, data: pointer): void
proc "importc" glGetNamedFramebufferAttachmentParameteriv(framebuffer: u32, attachment: u32, pname: u32, params: i32): void
proc "importc" glGetNamedFramebufferParameteriv(framebuffer: u32, pname: u32, param: i32): void
proc "importc" glGetNamedRenderbufferParameteriv(renderbuffer: u32, pname: u32, params: i32): void
proc "importc" glGetObjectLabel(identifier: u32, name: u32, bufSize: i32, length: ptr(i32), label: ptr(i8)): void
proc "importc" glGetObjectPtrLabel(ptr: pointer, bufSize: i32, length: ptr(i32), label: ptr(i8)): void
proc "importc" glGetPixelMapfv(map: u32, values: ptr(f32)): void
proc "importc" glGetPixelMapuiv(map: u32, values: ptr(u32)): void
proc "importc" glGetPixelMapusv(map: u32, values: ptr(u16)): void
proc "importc" glGetPointerv(pname: u32, params: pointer): void
proc "importc" glGetPolygonStipple(mask: ptr(u8)): void
proc "importc" glGetProgramBinary(program: u32, bufSize: i32, length: ptr(i32), binaryFormat: ptr(u32), binary: pointer): void
proc "importc" glGetProgramInfoLog(program: u32, bufSize: i32, length: ptr(i32), infoLog: ptr(i8)): void
proc "importc" glGetProgramInterfaceiv(program: u32, programInterface: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetProgramPipelineInfoLog(pipeline: u32, bufSize: i32, length: ptr(i32), infoLog: ptr(i8)): void
proc "importc" glGetProgramPipelineiv(pipeline: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetProgramResourceIndex(program: u32, programInterface: u32, name: ptr(i8)): u32
proc "importc" glGetProgramResourceLocation(program: u32, programInterface: u32, name: ptr(i8)): i32
proc "importc" glGetProgramResourceLocationIndex(program: u32, programInterface: u32, name: ptr(i8)): i32
proc "importc" glGetProgramResourceName(program: u32, programInterface: u32, index: u32, bufSize: i32, length: ptr(i32), name: ptr(i8)): void
proc "importc" glGetProgramResourceiv(program: u32, programInterface: u32, index: u32, propCount: i32, props: ptr(u32), bufSize: i32, length: ptr(i32), params: ptr(i32)): void
proc "importc" glGetProgramStageiv(program: u32, shadertype: u32, pname: u32, values: ptr(i32)): void
proc "importc" glGetProgramiv(program: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetQueryBufferObjecti64v(id: u32, buffer: u32, pname: u32, offset: int): void
proc "importc" glGetQueryBufferObjectiv(id: u32, buffer: u32, pname: u32, offset: int): void
proc "importc" glGetQueryBufferObjectui64v(id: u32, buffer: u32, pname: u32, offset: int): void
proc "importc" glGetQueryBufferObjectuiv(id: u32, buffer: u32, pname: u32, offset: int): void
proc "importc" glGetQueryIndexediv(target: u32, index: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetQueryObjecti64v(id: u32, pname: u32, params: ptr(i64)): void
proc "importc" glGetQueryObjectiv(id: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetQueryObjectui64v(id: u32, pname: u32, params: ptr(u64)): void
proc "importc" glGetQueryObjectuiv(id: u32, pname: u32, params: ptr(u32)): void
proc "importc" glGetQueryiv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetRenderbufferParameteriv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetSamplerParameterIiv(sampler: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetSamplerParameterIuiv(sampler: u32, pname: u32, params: ptr(u32)): void
proc "importc" glGetSamplerParameterfv(sampler: u32, pname: u32, params: ptr(f32)): void
proc "importc" glGetSamplerParameteriv(sampler: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetShaderInfoLog(shader: u32, bufSize: i32, length: ptr(i32), infoLog: ptr(i8)): void
proc "importc" glGetShaderPrecisionFormat(shadertype: u32, precisiontype: u32, range: ptr(i32), precision: ptr(i32)): void
proc "importc" glGetShaderSource(shader: u32, bufSize: i32, length: ptr(i32), source: ptr(i8)): void
proc "importc" glGetShaderiv(shader: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetString(name: u32): u8
proc "importc" glGetStringi(name: u32, index: u32): u8
proc "importc" glGetSubroutineIndex(program: u32, shadertype: u32, name: i8): u32
proc "importc" glGetSubroutineUniformLocation(program: u32, shadertype: u32, name: i8): i32
proc "importc" glGetTexEnvfv(target: u32, pname: u32, params: ptr(f32)): void
proc "importc" glGetTexEnviv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetTexGendv(coord: u32, pname: u32, params: ptr(f64)): void
proc "importc" glGetTexGenfv(coord: u32, pname: u32, params: ptr(f32)): void
proc "importc" glGetTexGeniv(coord: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetTexImage(target: u32, level: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glGetTexLevelParameterfv(target: u32, level: i32, pname: u32, params: ptr(f32)): void
proc "importc" glGetTexLevelParameteriv(target: u32, level: i32, pname: u32, params: ptr(i32)): void
proc "importc" glGetTexParameterIiv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetTexParameterIuiv(target: u32, pname: u32, params: ptr(u32)): void
proc "importc" glGetTexParameterfv(target: u32, pname: u32, params: ptr(f32)): void
proc "importc" glGetTexParameteriv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetTextureImage(texture: u32, level: i32, format: u32, typ: u32, bufSize: i32, pixels: pointer): void
proc "importc" glGetTextureLevelParameterfv(texture: u32, level: i32, pname: u32, params: f32): void
proc "importc" glGetTextureLevelParameteriv(texture: u32, level: i32, pname: u32, params: i32): void
proc "importc" glGetTextureParameterIiv(texture: u32, pname: u32, params: i32): void
proc "importc" glGetTextureParameterIuiv(texture: u32, pname: u32, params: u32): void
proc "importc" glGetTextureParameterfv(texture: u32, pname: u32, params: f32): void
proc "importc" glGetTextureParameteriv(texture: u32, pname: u32, params: i32): void
proc "importc" glGetTextureSubImage(texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, typ: u32, bufSize: i32, pixels: pointer): void
proc "importc" glGetTransformFeedbackVarying(program: u32, index: u32, bufSize: i32, length: ptr(i32), size: ptr(i32), typ: ptr(u32), name: ptr(i8)): void
proc "importc" glGetTransformFeedbacki64_v(xfb: u32, pname: u32, index: u32, param: i64): void
proc "importc" glGetTransformFeedbacki_v(xfb: u32, pname: u32, index: u32, param: i32): void
proc "importc" glGetTransformFeedbackiv(xfb: u32, pname: u32, param: i32): void
proc "importc" glGetUniformBlockIndex(program: u32, uniformBlockName: ptr(i8)): u32
proc "importc" glGetUniformIndices(program: u32, uniformCount: i32, uniformNames: ptr(i8), uniformIndices: ptr(u32)): void
proc "importc" glGetUniformLocation(program: u32, name: i8): i32
proc "importc" glGetUniformSubroutineuiv(shadertype: u32, location: i32, params: ptr(u32)): void
proc "importc" glGetUniformdv(program: u32, location: i32, params: ptr(f64)): void
proc "importc" glGetUniformfv(program: u32, location: i32, params: ptr(f32)): void
proc "importc" glGetUniformiv(program: u32, location: i32, params: ptr(i32)): void
proc "importc" glGetUniformuiv(program: u32, location: i32, params: ptr(u32)): void
proc "importc" glGetVertexArrayIndexed64iv(vaobj: u32, index: u32, pname: u32, param: i64): void
proc "importc" glGetVertexArrayIndexediv(vaobj: u32, index: u32, pname: u32, param: i32): void
proc "importc" glGetVertexArrayiv(vaobj: u32, pname: u32, param: i32): void
proc "importc" glGetVertexAttribIiv(index: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetVertexAttribIuiv(index: u32, pname: u32, params: ptr(u32)): void
proc "importc" glGetVertexAttribLdv(index: u32, pname: u32, params: ptr(f64)): void
proc "importc" glGetVertexAttribPointerv(index: u32, pname: u32, pointer: pointer): void
proc "importc" glGetVertexAttribdv(index: u32, pname: u32, params: ptr(f64)): void
proc "importc" glGetVertexAttribfv(index: u32, pname: u32, params: ptr(f32)): void
proc "importc" glGetVertexAttribiv(index: u32, pname: u32, params: ptr(i32)): void
proc "importc" glGetnColorTable(target: u32, format: u32, typ: u32, bufSize: i32, table: pointer): void
proc "importc" glGetnCompressedTexImage(target: u32, lod: i32, bufSize: i32, pixels: pointer): void
proc "importc" glGetnConvolutionFilter(target: u32, format: u32, typ: u32, bufSize: i32, image: pointer): void
proc "importc" glGetnHistogram(target: u32, reset: bool, format: u32, typ: u32, bufSize: i32, values: pointer): void
proc "importc" glGetnMapdv(target: u32, query: u32, bufSize: i32, v: f64): void
proc "importc" glGetnMapfv(target: u32, query: u32, bufSize: i32, v: f32): void
proc "importc" glGetnMapiv(target: u32, query: u32, bufSize: i32, v: i32): void
proc "importc" glGetnMinmax(target: u32, reset: bool, format: u32, typ: u32, bufSize: i32, values: pointer): void
proc "importc" glGetnPixelMapfv(map: u32, bufSize: i32, values: f32): void
proc "importc" glGetnPixelMapuiv(map: u32, bufSize: i32, values: u32): void
proc "importc" glGetnPixelMapusv(map: u32, bufSize: i32, values: u16): void
proc "importc" glGetnPolygonStipple(bufSize: i32, pattern: u8): void
proc "importc" glGetnSeparableFilter(target: u32, format: u32, typ: u32, rowBufSize: i32, row: pointer, columnBufSize: i32, column: pointer, span: pointer): void
proc "importc" glGetnTexImage(target: u32, level: i32, format: u32, typ: u32, bufSize: i32, pixels: pointer): void
proc "importc" glGetnUniformdv(program: u32, location: i32, bufSize: i32, params: f64): void
proc "importc" glGetnUniformfv(program: u32, location: i32, bufSize: i32, params: f32): void
proc "importc" glGetnUniformiv(program: u32, location: i32, bufSize: i32, params: i32): void
proc "importc" glGetnUniformuiv(program: u32, location: i32, bufSize: i32, params: u32): void
proc "importc" glHint(target: u32, mode: u32): void
proc "importc" glIndexMask(mask: u32): void
proc "importc" glIndexPointer(typ: u32, stride: i32, pointer: pointer): void
proc "importc" glIndexd(c: f64): void
proc "importc" glIndexdv(c: ptr(f64)): void
proc "importc" glIndexf(c: f32): void
proc "importc" glIndexfv(c: ptr(f32)): void
proc "importc" glIndexi(c: i32): void
proc "importc" glIndexiv(c: ptr(i32)): void
proc "importc" glIndexs(c: i16): void
proc "importc" glIndexsv(c: ptr(i16)): void
proc "importc" glIndexub(c: u8): void
proc "importc" glIndexubv(c: ptr(u8)): void
proc "importc" glInitNames(): void
proc "importc" glInterleavedArrays(format: u32, stride: i32, pointer: pointer): void
proc "importc" glInvalidateBufferData(buffer: u32): void
proc "importc" glInvalidateBufferSubData(buffer: u32, offset: int, length: int): void
proc "importc" glInvalidateFramebuffer(target: u32, numAttachments: i32, attachments: ptr(u32)): void
proc "importc" glInvalidateNamedFramebufferData(framebuffer: u32, numAttachments: i32, attachments: u32): void
proc "importc" glInvalidateNamedFramebufferSubData(framebuffer: u32, numAttachments: i32, attachments: u32, x: i32, y: i32, width: i32, height: i32): void
proc "importc" glInvalidateSubFramebuffer(target: u32, numAttachments: i32, attachments: ptr(u32), x: i32, y: i32, width: i32, height: i32): void
proc "importc" glInvalidateTexImage(texture: u32, level: i32): void
proc "importc" glInvalidateTexSubImage(texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32): void
proc "importc" glIsBuffer(buffer: u32): bool
proc "importc" glIsEnabled(cap: u32): bool
proc "importc" glIsEnabledi(target: u32, index: u32): bool
proc "importc" glIsFramebuffer(framebuffer: u32): bool
proc "importc" glIsList(list: u32): bool
proc "importc" glIsProgram(program: u32): bool
proc "importc" glIsProgramPipeline(pipeline: u32): bool
proc "importc" glIsQuery(id: u32): bool
proc "importc" glIsRenderbuffer(renderbuffer: u32): bool
proc "importc" glIsSampler(sampler: u32): bool
proc "importc" glIsShader(shader: u32): bool
proc "importc" glIsTexture(texture: u32): bool
proc "importc" glIsTransformFeedback(id: u32): bool
proc "importc" glIsVertexArray(array: u32): bool
proc "importc" glLightModelf(pname: u32, param: f32): void
proc "importc" glLightModelfv(pname: u32, params: ptr(f32)): void
proc "importc" glLightModeli(pname: u32, param: i32): void
proc "importc" glLightModeliv(pname: u32, params: ptr(i32)): void
proc "importc" glLightf(light: u32, pname: u32, param: f32): void
proc "importc" glLightfv(light: u32, pname: u32, params: ptr(f32)): void
proc "importc" glLighti(light: u32, pname: u32, param: i32): void
proc "importc" glLightiv(light: u32, pname: u32, params: ptr(i32)): void
proc "importc" glLineStipple(factor: i32, pattern: u16): void
proc "importc" glLineWidth(width: f32): void
proc "importc" glLinkProgram(program: u32): void
proc "importc" glListBase(base: u32): void
proc "importc" glLoadIdentity(): void
proc "importc" glLoadMatrixd(m: ptr(f64)): void
proc "importc" glLoadMatrixf(m: ptr(f32)): void
proc "importc" glLoadName(name: u32): void
proc "importc" glLoadTransposeMatrixd(m: ptr(f64)): void
proc "importc" glLoadTransposeMatrixf(m: ptr(f32)): void
proc "importc" glLogicOp(opcode: u32): void
proc "importc" glMap1d(target: u32, u1: f64, u2: f64, stride: i32, order: i32, points: ptr(f64)): pointer
proc "importc" glMap1f(target: u32, u1: f32, u2: f32, stride: i32, order: i32, points: ptr(f32)): pointer
proc "importc" glMap2d(target: u32, u1: f64, u2: f64, ustride: i32, uorder: i32, v1: f64, v2: f64, vstride: i32, vorder: i32, points: ptr(f64)): pointer
proc "importc" glMap2f(target: u32, u1: f32, u2: f32, ustride: i32, uorder: i32, v1: f32, v2: f32, vstride: i32, vorder: i32, points: ptr(f32)): pointer
proc "importc" glMapBuffer(target: u32, access: u32): pointer
proc "importc" glMapBufferRange(target: u32, offset: int, length: int, access: u32): pointer
proc "importc" glMapGrid1d(un: i32, u1: f64, u2: f64): pointer
proc "importc" glMapGrid1f(un: i32, u1: f32, u2: f32): pointer
proc "importc" glMapGrid2d(un: i32, u1: f64, u2: f64, vn: i32, v1: f64, v2: f64): pointer
proc "importc" glMapGrid2f(un: i32, u1: f32, u2: f32, vn: i32, v1: f32, v2: f32): pointer
proc "importc" glMapNamedBuffer(buffer: u32, access: u32): pointer
proc "importc" glMapNamedBufferRange(buffer: u32, offset: int, length: int, access: u32): pointer
proc "importc" glMaterialf(face: u32, pname: u32, param: f32): void
proc "importc" glMaterialfv(face: u32, pname: u32, params: ptr(f32)): void
proc "importc" glMateriali(face: u32, pname: u32, param: i32): void
proc "importc" glMaterialiv(face: u32, pname: u32, params: ptr(i32)): void
proc "importc" glMatrixMode(mode: u32): void
proc "importc" glMemoryBarrier(barriers: u32): void
proc "importc" glMemoryBarrierByRegion(barriers: u32): void
proc "importc" glMinSampleShading(value: f32): void
proc "importc" glMultMatrixd(m: ptr(f64)): void
proc "importc" glMultMatrixf(m: ptr(f32)): void
proc "importc" glMultTransposeMatrixd(m: ptr(f64)): void
proc "importc" glMultTransposeMatrixf(m: ptr(f32)): void
proc "importc" glMultiDrawArrays(mode: u32, first: ptr(i32), count: ptr(i32), drawcount: i32): void
proc "importc" glMultiDrawArraysIndirect(mode: u32, indirect: pointer, drawcount: i32, stride: i32): void
proc "importc" glMultiDrawElements(mode: u32, count: ptr(i32), typ: u32, indices: pointer, drawcount: i32): void
proc "importc" glMultiDrawElementsBaseVertex(mode: u32, count: ptr(i32), typ: u32, indices: pointer, drawcount: i32, basevertex: ptr(i32)): void
proc "importc" glMultiDrawElementsIndirect(mode: u32, typ: u32, indirect: pointer, drawcount: i32, stride: i32): void
proc "importc" glMultiTexCoord1d(target: u32, s: f64): void
proc "importc" glMultiTexCoord1dv(target: u32, v: ptr(f64)): void
proc "importc" glMultiTexCoord1f(target: u32, s: f32): void
proc "importc" glMultiTexCoord1fv(target: u32, v: ptr(f32)): void
proc "importc" glMultiTexCoord1i(target: u32, s: i32): void
proc "importc" glMultiTexCoord1iv(target: u32, v: ptr(i32)): void
proc "importc" glMultiTexCoord1s(target: u32, s: i16): void
proc "importc" glMultiTexCoord1sv(target: u32, v: ptr(i16)): void
proc "importc" glMultiTexCoord2d(target: u32, s: f64, t: f64): void
proc "importc" glMultiTexCoord2dv(target: u32, v: ptr(f64)): void
proc "importc" glMultiTexCoord2f(target: u32, s: f32, t: f32): void
proc "importc" glMultiTexCoord2fv(target: u32, v: ptr(f32)): void
proc "importc" glMultiTexCoord2i(target: u32, s: i32, t: i32): void
proc "importc" glMultiTexCoord2iv(target: u32, v: ptr(i32)): void
proc "importc" glMultiTexCoord2s(target: u32, s: i16, t: i16): void
proc "importc" glMultiTexCoord2sv(target: u32, v: ptr(i16)): void
proc "importc" glMultiTexCoord3d(target: u32, s: f64, t: f64, r: f64): void
proc "importc" glMultiTexCoord3dv(target: u32, v: ptr(f64)): void
proc "importc" glMultiTexCoord3f(target: u32, s: f32, t: f32, r: f32): void
proc "importc" glMultiTexCoord3fv(target: u32, v: ptr(f32)): void
proc "importc" glMultiTexCoord3i(target: u32, s: i32, t: i32, r: i32): void
proc "importc" glMultiTexCoord3iv(target: u32, v: ptr(i32)): void
proc "importc" glMultiTexCoord3s(target: u32, s: i16, t: i16, r: i16): void
proc "importc" glMultiTexCoord3sv(target: u32, v: ptr(i16)): void
proc "importc" glMultiTexCoord4d(target: u32, s: f64, t: f64, r: f64, q: f64): void
proc "importc" glMultiTexCoord4dv(target: u32, v: ptr(f64)): void
proc "importc" glMultiTexCoord4f(target: u32, s: f32, t: f32, r: f32, q: f32): void
proc "importc" glMultiTexCoord4fv(target: u32, v: ptr(f32)): void
proc "importc" glMultiTexCoord4i(target: u32, s: i32, t: i32, r: i32, q: i32): void
proc "importc" glMultiTexCoord4iv(target: u32, v: ptr(i32)): void
proc "importc" glMultiTexCoord4s(target: u32, s: i16, t: i16, r: i16, q: i16): void
proc "importc" glMultiTexCoord4sv(target: u32, v: ptr(i16)): void
proc "importc" glMultiTexCoordP1ui(texture: u32, typ: u32, coords: u32): void
proc "importc" glMultiTexCoordP1uiv(texture: u32, typ: u32, coords: ptr(u32)): void
proc "importc" glMultiTexCoordP2ui(texture: u32, typ: u32, coords: u32): void
proc "importc" glMultiTexCoordP2uiv(texture: u32, typ: u32, coords: ptr(u32)): void
proc "importc" glMultiTexCoordP3ui(texture: u32, typ: u32, coords: u32): void
proc "importc" glMultiTexCoordP3uiv(texture: u32, typ: u32, coords: ptr(u32)): void
proc "importc" glMultiTexCoordP4ui(texture: u32, typ: u32, coords: u32): void
proc "importc" glMultiTexCoordP4uiv(texture: u32, typ: u32, coords: ptr(u32)): void
proc "importc" glNamedBufferData(buffer: u32, size: int, data: pointer, usage: u32): void
proc "importc" glNamedBufferStorage(buffer: u32, size: int, data: pointer, flags: u32): void
proc "importc" glNamedBufferSubData(buffer: u32, offset: int, size: int, data: pointer): void
proc "importc" glNamedFramebufferDrawBuffer(framebuffer: u32, buf: u32): void
proc "importc" glNamedFramebufferDrawBuffers(framebuffer: u32, n: i32, bufs: u32): void
proc "importc" glNamedFramebufferParameteri(framebuffer: u32, pname: u32, param: i32): void
proc "importc" glNamedFramebufferReadBuffer(framebuffer: u32, src: u32): void
proc "importc" glNamedFramebufferRenderbuffer(framebuffer: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32): void
proc "importc" glNamedFramebufferTexture(framebuffer: u32, attachment: u32, texture: u32, level: i32): void
proc "importc" glNamedFramebufferTextureLayer(framebuffer: u32, attachment: u32, texture: u32, level: i32, layer: i32): void
proc "importc" glNamedRenderbufferStorage(renderbuffer: u32, internalformat: u32, width: i32, height: i32): void
proc "importc" glNamedRenderbufferStorageMultisample(renderbuffer: u32, samples: i32, internalformat: u32, width: i32, height: i32): void
proc "importc" glNewList(list: u32, mode: u32): void
proc "importc" glNormal3b(nx: i8, ny: i8, nz: i8): void
proc "importc" glNormal3bv(v: ptr(i8)): void
proc "importc" glNormal3d(nx: f64, ny: f64, nz: f64): void
proc "importc" glNormal3dv(v: ptr(f64)): void
proc "importc" glNormal3f(nx: f32, ny: f32, nz: f32): void
proc "importc" glNormal3fv(v: ptr(f32)): void
proc "importc" glNormal3i(nx: i32, ny: i32, nz: i32): void
proc "importc" glNormal3iv(v: ptr(i32)): void
proc "importc" glNormal3s(nx: i16, ny: i16, nz: i16): void
proc "importc" glNormal3sv(v: ptr(i16)): void
proc "importc" glNormalP3ui(typ: u32, coords: u32): void
proc "importc" glNormalP3uiv(typ: u32, coords: ptr(u32)): void
proc "importc" glNormalPointer(typ: u32, stride: i32, pointer: pointer): void
proc "importc" glObjectLabel(identifier: u32, name: u32, length: i32, label: ptr(i8)): void
proc "importc" glObjectPtrLabel(ptr: pointer, length: i32, label: ptr(i8)): void
proc "importc" glOrtho(left: f64, right: f64, bottom: f64, top: f64, zNear: f64, zFar: f64): void
proc "importc" glPassThrough(token: f32): void
proc "importc" glPatchParameterfv(pname: u32, values: ptr(f32)): void
proc "importc" glPatchParameteri(pname: u32, value: i32): void
proc "importc" glPauseTransformFeedback(): void
proc "importc" glPixelMapfv(map: u32, mapsize: i32, values: ptr(f32)): void
proc "importc" glPixelMapuiv(map: u32, mapsize: i32, values: ptr(u32)): void
proc "importc" glPixelMapusv(map: u32, mapsize: i32, values: ptr(u16)): void
proc "importc" glPixelStoref(pname: u32, param: f32): void
proc "importc" glPixelStorei(pname: u32, param: i32): void
proc "importc" glPixelTransferf(pname: u32, param: f32): void
proc "importc" glPixelTransferi(pname: u32, param: i32): void
proc "importc" glPixelZoom(xfactor: f32, yfactor: f32): void
proc "importc" glPointParameterf(pname: u32, param: f32): void
proc "importc" glPointParameterfv(pname: u32, params: ptr(f32)): void
proc "importc" glPointParameteri(pname: u32, param: i32): void
proc "importc" glPointParameteriv(pname: u32, params: ptr(i32)): void
proc "importc" glPointSize(size: f32): void
proc "importc" glPolygonMode(face: u32, mode: u32): void
proc "importc" glPolygonOffset(factor: f32, units: f32): void
proc "importc" glPolygonStipple(mask: ptr(u8)): void
proc "importc" glPopAttrib(): void
proc "importc" glPopClientAttrib(): void
proc "importc" glPopDebugGroup(): void
proc "importc" glPopMatrix(): void
proc "importc" glPopName(): void
proc "importc" glPrimitiveRestartIndex(index: u32): void
proc "importc" glPrioritizeTextures(n: i32, textures: ptr(u32), priorities: ptr(f32)): void
proc "importc" glProgramBinary(program: u32, binaryFormat: u32, binary: pointer, length: i32): void
proc "importc" glProgramParameteri(program: u32, pname: u32, value: i32): void
proc "importc" glProgramUniform1d(program: u32, location: i32, v0: f64): void
proc "importc" glProgramUniform1dv(program: u32, location: i32, count: i32, value: ptr(f64)): void
proc "importc" glProgramUniform1f(program: u32, location: i32, v0: f32): void
proc "importc" glProgramUniform1fv(program: u32, location: i32, count: i32, value: ptr(f32)): void
proc "importc" glProgramUniform1i(program: u32, location: i32, v0: i32): void
proc "importc" glProgramUniform1iv(program: u32, location: i32, count: i32, value: ptr(i32)): void
proc "importc" glProgramUniform1ui(program: u32, location: i32, v0: u32): void
proc "importc" glProgramUniform1uiv(program: u32, location: i32, count: i32, value: ptr(u32)): void
proc "importc" glProgramUniform2d(program: u32, location: i32, v0: f64, v1: f64): void
proc "importc" glProgramUniform2dv(program: u32, location: i32, count: i32, value: ptr(f64)): void
proc "importc" glProgramUniform2f(program: u32, location: i32, v0: f32, v1: f32): void
proc "importc" glProgramUniform2fv(program: u32, location: i32, count: i32, value: ptr(f32)): void
proc "importc" glProgramUniform2i(program: u32, location: i32, v0: i32, v1: i32): void
proc "importc" glProgramUniform2iv(program: u32, location: i32, count: i32, value: ptr(i32)): void
proc "importc" glProgramUniform2ui(program: u32, location: i32, v0: u32, v1: u32): void
proc "importc" glProgramUniform2uiv(program: u32, location: i32, count: i32, value: ptr(u32)): void
proc "importc" glProgramUniform3d(program: u32, location: i32, v0: f64, v1: f64, v2: f64): void
proc "importc" glProgramUniform3dv(program: u32, location: i32, count: i32, value: ptr(f64)): void
proc "importc" glProgramUniform3f(program: u32, location: i32, v0: f32, v1: f32, v2: f32): void
proc "importc" glProgramUniform3fv(program: u32, location: i32, count: i32, value: ptr(f32)): void
proc "importc" glProgramUniform3i(program: u32, location: i32, v0: i32, v1: i32, v2: i32): void
proc "importc" glProgramUniform3iv(program: u32, location: i32, count: i32, value: ptr(i32)): void
proc "importc" glProgramUniform3ui(program: u32, location: i32, v0: u32, v1: u32, v2: u32): void
proc "importc" glProgramUniform3uiv(program: u32, location: i32, count: i32, value: ptr(u32)): void
proc "importc" glProgramUniform4d(program: u32, location: i32, v0: f64, v1: f64, v2: f64, v3: f64): void
proc "importc" glProgramUniform4dv(program: u32, location: i32, count: i32, value: ptr(f64)): void
proc "importc" glProgramUniform4f(program: u32, location: i32, v0: f32, v1: f32, v2: f32, v3: f32): void
proc "importc" glProgramUniform4fv(program: u32, location: i32, count: i32, value: ptr(f32)): void
proc "importc" glProgramUniform4i(program: u32, location: i32, v0: i32, v1: i32, v2: i32, v3: i32): void
proc "importc" glProgramUniform4iv(program: u32, location: i32, count: i32, value: ptr(i32)): void
proc "importc" glProgramUniform4ui(program: u32, location: i32, v0: u32, v1: u32, v2: u32, v3: u32): void
proc "importc" glProgramUniform4uiv(program: u32, location: i32, count: i32, value: ptr(u32)): void
proc "importc" glProgramUniformMatrix2dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix2fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix2x3dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix2x3fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix2x4dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix2x4fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix3dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix3fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix3x2dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix3x2fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix3x4dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix3x4fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix4dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix4fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix4x2dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix4x2fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProgramUniformMatrix4x3dv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glProgramUniformMatrix4x3fv(program: u32, location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glProvokingVertex(mode: u32): void
proc "importc" glPushAttrib(mask: u32): void
proc "importc" glPushClientAttrib(mask: u32): void
proc "importc" glPushDebugGroup(source: u32, id: u32, length: i32, message: ptr(i8)): void
proc "importc" glPushMatrix(): void
proc "importc" glPushName(name: u32): void
proc "importc" glQueryCounter(id: u32, target: u32): void
proc "importc" glRasterPos2d(x: f64, y: f64): void
proc "importc" glRasterPos2dv(v: ptr(f64)): void
proc "importc" glRasterPos2f(x: f32, y: f32): void
proc "importc" glRasterPos2fv(v: ptr(f32)): void
proc "importc" glRasterPos2i(x: i32, y: i32): void
proc "importc" glRasterPos2iv(v: ptr(i32)): void
proc "importc" glRasterPos2s(x: i16, y: i16): void
proc "importc" glRasterPos2sv(v: ptr(i16)): void
proc "importc" glRasterPos3d(x: f64, y: f64, z: f64): void
proc "importc" glRasterPos3dv(v: ptr(f64)): void
proc "importc" glRasterPos3f(x: f32, y: f32, z: f32): void
proc "importc" glRasterPos3fv(v: ptr(f32)): void
proc "importc" glRasterPos3i(x: i32, y: i32, z: i32): void
proc "importc" glRasterPos3iv(v: ptr(i32)): void
proc "importc" glRasterPos3s(x: i16, y: i16, z: i16): void
proc "importc" glRasterPos3sv(v: ptr(i16)): void
proc "importc" glRasterPos4d(x: f64, y: f64, z: f64, w: f64): void
proc "importc" glRasterPos4dv(v: ptr(f64)): void
proc "importc" glRasterPos4f(x: f32, y: f32, z: f32, w: f32): void
proc "importc" glRasterPos4fv(v: ptr(f32)): void
proc "importc" glRasterPos4i(x: i32, y: i32, z: i32, w: i32): void
proc "importc" glRasterPos4iv(v: ptr(i32)): void
proc "importc" glRasterPos4s(x: i16, y: i16, z: i16, w: i16): void
proc "importc" glRasterPos4sv(v: ptr(i16)): void
proc "importc" glReadBuffer(src: u32): void
proc "importc" glReadPixels(x: i32, y: i32, width: i32, height: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glReadnPixels(x: i32, y: i32, width: i32, height: i32, format: u32, typ: u32, bufSize: i32, data: pointer): void
proc "importc" glRectd(x1: f64, y1: f64, x2: f64, y2: f64): void
proc "importc" glRectdv(v1: ptr(f64), v2: ptr(f64)): void
proc "importc" glRectf(x1: f32, y1: f32, x2: f32, y2: f32): void
proc "importc" glRectfv(v1: ptr(f32), v2: ptr(f32)): void
proc "importc" glRecti(x1: i32, y1: i32, x2: i32, y2: i32): void
proc "importc" glRectiv(v1: ptr(i32), v2: ptr(i32)): void
proc "importc" glRects(x1: i16, y1: i16, x2: i16, y2: i16): void
proc "importc" glRectsv(v1: ptr(i16), v2: ptr(i16)): void
proc "importc" glReleaseShaderCompiler(): void
proc "importc" glRenderMode(mode: u32): i32
proc "importc" glRenderbufferStorage(target: u32, internalformat: u32, width: i32, height: i32): void
proc "importc" glRenderbufferStorageMultisample(target: u32, samples: i32, internalformat: u32, width: i32, height: i32): void
proc "importc" glResumeTransformFeedback(): void
proc "importc" glRotated(angle: f64, x: f64, y: f64, z: f64): void
proc "importc" glRotatef(angle: f32, x: f32, y: f32, z: f32): void
proc "importc" glSampleCoverage(value: f32, invert: bool): void
proc "importc" glSampleMaski(maskNumber: u32, mask: u32): void
proc "importc" glSamplerParameterIiv(sampler: u32, pname: u32, param: ptr(i32)): void
proc "importc" glSamplerParameterIuiv(sampler: u32, pname: u32, param: ptr(u32)): void
proc "importc" glSamplerParameterf(sampler: u32, pname: u32, param: f32): void
proc "importc" glSamplerParameterfv(sampler: u32, pname: u32, param: ptr(f32)): void
proc "importc" glSamplerParameteri(sampler: u32, pname: u32, param: i32): void
proc "importc" glSamplerParameteriv(sampler: u32, pname: u32, param: ptr(i32)): void
proc "importc" glScaled(x: f64, y: f64, z: f64): void
proc "importc" glScalef(x: f32, y: f32, z: f32): void
proc "importc" glScissor(x: i32, y: i32, width: i32, height: i32): void
proc "importc" glScissorArrayv(first: u32, count: i32, v: ptr(i32)): void
proc "importc" glScissorIndexed(index: u32, left: i32, bottom: i32, width: i32, height: i32): void
proc "importc" glScissorIndexedv(index: u32, v: ptr(i32)): void
proc "importc" glSecondaryColor3b(red: i8, green: i8, blue: i8): void
proc "importc" glSecondaryColor3bv(v: ptr(i8)): void
proc "importc" glSecondaryColor3d(red: f64, green: f64, blue: f64): void
proc "importc" glSecondaryColor3dv(v: ptr(f64)): void
proc "importc" glSecondaryColor3f(red: f32, green: f32, blue: f32): void
proc "importc" glSecondaryColor3fv(v: ptr(f32)): void
proc "importc" glSecondaryColor3i(red: i32, green: i32, blue: i32): void
proc "importc" glSecondaryColor3iv(v: ptr(i32)): void
proc "importc" glSecondaryColor3s(red: i16, green: i16, blue: i16): void
proc "importc" glSecondaryColor3sv(v: ptr(i16)): void
proc "importc" glSecondaryColor3ub(red: u8, green: u8, blue: u8): void
proc "importc" glSecondaryColor3ubv(v: ptr(u8)): void
proc "importc" glSecondaryColor3ui(red: u32, green: u32, blue: u32): void
proc "importc" glSecondaryColor3uiv(v: ptr(u32)): void
proc "importc" glSecondaryColor3us(red: u16, green: u16, blue: u16): void
proc "importc" glSecondaryColor3usv(v: ptr(u16)): void
proc "importc" glSecondaryColorP3ui(typ: u32, color: u32): void
proc "importc" glSecondaryColorP3uiv(typ: u32, color: ptr(u32)): void
proc "importc" glSecondaryColorPointer(size: i32, typ: u32, stride: i32, pointer: pointer): void
proc "importc" glSelectBuffer(size: i32, buffer: ptr(u32)): void
proc "importc" glShadeModel(mode: u32): void
proc "importc" glShaderBinary(count: i32, shaders: ptr(u32), binaryformat: u32, binary: pointer, length: i32): void
proc "importc" glShaderSource(shader: u32, count: i32, string: ptr(i8), length: ptr(i32)): void
proc "importc" glShaderStorageBlockBinding(program: u32, storageBlockIndex: u32, storageBlockBinding: u32): void
proc "importc" glStencilFunc(func: u32, ref: i32, mask: u32): void
proc "importc" glStencilFuncSeparate(face: u32, func: u32, ref: i32, mask: u32): void
proc "importc" glStencilMask(mask: u32): void
proc "importc" glStencilMaskSeparate(face: u32, mask: u32): void
proc "importc" glStencilOp(fail: u32, zfail: u32, zpass: u32): void
proc "importc" glStencilOpSeparate(face: u32, sfail: u32, dpfail: u32, dppass: u32): void
proc "importc" glTexBuffer(target: u32, internalformat: u32, buffer: u32): void
proc "importc" glTexBufferRange(target: u32, internalformat: u32, buffer: u32, offset: int, size: int): void
proc "importc" glTexCoord1d(s: f64): void
proc "importc" glTexCoord1dv(v: ptr(f64)): void
proc "importc" glTexCoord1f(s: f32): void
proc "importc" glTexCoord1fv(v: ptr(f32)): void
proc "importc" glTexCoord1i(s: i32): void
proc "importc" glTexCoord1iv(v: ptr(i32)): void
proc "importc" glTexCoord1s(s: i16): void
proc "importc" glTexCoord1sv(v: ptr(i16)): void
proc "importc" glTexCoord2d(s: f64, t: f64): void
proc "importc" glTexCoord2dv(v: ptr(f64)): void
proc "importc" glTexCoord2f(s: f32, t: f32): void
proc "importc" glTexCoord2fv(v: ptr(f32)): void
proc "importc" glTexCoord2i(s: i32, t: i32): void
proc "importc" glTexCoord2iv(v: ptr(i32)): void
proc "importc" glTexCoord2s(s: i16, t: i16): void
proc "importc" glTexCoord2sv(v: ptr(i16)): void
proc "importc" glTexCoord3d(s: f64, t: f64, r: f64): void
proc "importc" glTexCoord3dv(v: ptr(f64)): void
proc "importc" glTexCoord3f(s: f32, t: f32, r: f32): void
proc "importc" glTexCoord3fv(v: ptr(f32)): void
proc "importc" glTexCoord3i(s: i32, t: i32, r: i32): void
proc "importc" glTexCoord3iv(v: ptr(i32)): void
proc "importc" glTexCoord3s(s: i16, t: i16, r: i16): void
proc "importc" glTexCoord3sv(v: ptr(i16)): void
proc "importc" glTexCoord4d(s: f64, t: f64, r: f64, q: f64): void
proc "importc" glTexCoord4dv(v: ptr(f64)): void
proc "importc" glTexCoord4f(s: f32, t: f32, r: f32, q: f32): void
proc "importc" glTexCoord4fv(v: ptr(f32)): void
proc "importc" glTexCoord4i(s: i32, t: i32, r: i32, q: i32): void
proc "importc" glTexCoord4iv(v: ptr(i32)): void
proc "importc" glTexCoord4s(s: i16, t: i16, r: i16, q: i16): void
proc "importc" glTexCoord4sv(v: ptr(i16)): void
proc "importc" glTexCoordP1ui(typ: u32, coords: u32): void
proc "importc" glTexCoordP1uiv(typ: u32, coords: ptr(u32)): void
proc "importc" glTexCoordP2ui(typ: u32, coords: u32): void
proc "importc" glTexCoordP2uiv(typ: u32, coords: ptr(u32)): void
proc "importc" glTexCoordP3ui(typ: u32, coords: u32): void
proc "importc" glTexCoordP3uiv(typ: u32, coords: ptr(u32)): void
proc "importc" glTexCoordP4ui(typ: u32, coords: u32): void
proc "importc" glTexCoordP4uiv(typ: u32, coords: ptr(u32)): void
proc "importc" glTexCoordPointer(size: i32, typ: u32, stride: i32, pointer: pointer): void
proc "importc" glTexEnvf(target: u32, pname: u32, param: f32): void
proc "importc" glTexEnvfv(target: u32, pname: u32, params: ptr(f32)): void
proc "importc" glTexEnvi(target: u32, pname: u32, param: i32): void
proc "importc" glTexEnviv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glTexGend(coord: u32, pname: u32, param: f64): void
proc "importc" glTexGendv(coord: u32, pname: u32, params: ptr(f64)): void
proc "importc" glTexGenf(coord: u32, pname: u32, param: f32): void
proc "importc" glTexGenfv(coord: u32, pname: u32, params: ptr(f32)): void
proc "importc" glTexGeni(coord: u32, pname: u32, param: i32): void
proc "importc" glTexGeniv(coord: u32, pname: u32, params: ptr(i32)): void
proc "importc" glTexImage1D(target: u32, level: i32, internalformat: i32, width: i32, border: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTexImage2D(target: u32, level: i32, internalformat: i32, width: i32, height: i32, border: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTexImage2DMultisample(target: u32, samples: i32, internalformat: u32, width: i32, height: i32, fixedsamplelocations: bool): void
proc "importc" glTexImage3D(target: u32, level: i32, internalformat: i32, width: i32, height: i32, depth: i32, border: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTexImage3DMultisample(target: u32, samples: i32, internalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: bool): void
proc "importc" glTexParameterIiv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glTexParameterIuiv(target: u32, pname: u32, params: ptr(u32)): void
proc "importc" glTexParameterf(target: u32, pname: u32, param: f32): void
proc "importc" glTexParameterfv(target: u32, pname: u32, params: ptr(f32)): void
proc "importc" glTexParameteri(target: u32, pname: u32, param: i32): void
proc "importc" glTexParameteriv(target: u32, pname: u32, params: ptr(i32)): void
proc "importc" glTexStorage1D(target: u32, levels: i32, internalformat: u32, width: i32): void
proc "importc" glTexStorage2D(target: u32, levels: i32, internalformat: u32, width: i32, height: i32): void
proc "importc" glTexStorage2DMultisample(target: u32, samples: i32, internalformat: u32, width: i32, height: i32, fixedsamplelocations: bool): void
proc "importc" glTexStorage3D(target: u32, levels: i32, internalformat: u32, width: i32, height: i32, depth: i32): void
proc "importc" glTexStorage3DMultisample(target: u32, samples: i32, internalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: bool): void
proc "importc" glTexSubImage1D(target: u32, level: i32, xoffset: i32, width: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTexSubImage2D(target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTexSubImage3D(target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTextureBarrier(): void
proc "importc" glTextureBuffer(texture: u32, internalformat: u32, buffer: u32): void
proc "importc" glTextureBufferRange(texture: u32, internalformat: u32, buffer: u32, offset: int, size: int): void
proc "importc" glTextureParameterIiv(texture: u32, pname: u32, params: i32): void
proc "importc" glTextureParameterIuiv(texture: u32, pname: u32, params: u32): void
proc "importc" glTextureParameterf(texture: u32, pname: u32, param: f32): void
proc "importc" glTextureParameterfv(texture: u32, pname: u32, param: f32): void
proc "importc" glTextureParameteri(texture: u32, pname: u32, param: i32): void
proc "importc" glTextureParameteriv(texture: u32, pname: u32, param: i32): void
proc "importc" glTextureStorage1D(texture: u32, levels: i32, internalformat: u32, width: i32): void
proc "importc" glTextureStorage2D(texture: u32, levels: i32, internalformat: u32, width: i32, height: i32): void
proc "importc" glTextureStorage2DMultisample(texture: u32, samples: i32, internalformat: u32, width: i32, height: i32, fixedsamplelocations: bool): void
proc "importc" glTextureStorage3D(texture: u32, levels: i32, internalformat: u32, width: i32, height: i32, depth: i32): void
proc "importc" glTextureStorage3DMultisample(texture: u32, samples: i32, internalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: bool): void
proc "importc" glTextureSubImage1D(texture: u32, level: i32, xoffset: i32, width: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTextureSubImage2D(texture: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTextureSubImage3D(texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, typ: u32, pixels: pointer): void
proc "importc" glTextureView(texture: u32, target: u32, origtexture: u32, internalformat: u32, minlevel: u32, numlevels: u32, minlayer: u32, numlayers: u32): void
proc "importc" glTransformFeedbackBufferBase(xfb: u32, index: u32, buffer: u32): void
proc "importc" glTransformFeedbackBufferRange(xfb: u32, index: u32, buffer: u32, offset: int, size: int): void
proc "importc" glTransformFeedbackVaryings(program: u32, count: i32, varyings: ptr(i8), bufferMode: u32): void
proc "importc" glTranslated(x: f64, y: f64, z: f64): void
proc "importc" glTranslatef(x: f32, y: f32, z: f32): void
proc "importc" glUniform1d(location: i32, x: f64): void
proc "importc" glUniform1dv(location: i32, count: i32, value: ptr(f64)): void
proc "importc" glUniform1f(location: i32, v0: f32): void
proc "importc" glUniform1fv(location: i32, count: i32, value: ptr(f32)): void
proc "importc" glUniform1i(location: i32, v0: i32): void
proc "importc" glUniform1iv(location: i32, count: i32, value: ptr(i32)): void
proc "importc" glUniform1ui(location: i32, v0: u32): void
proc "importc" glUniform1uiv(location: i32, count: i32, value: ptr(u32)): void
proc "importc" glUniform2d(location: i32, x: f64, y: f64): void
proc "importc" glUniform2dv(location: i32, count: i32, value: ptr(f64)): void
proc "importc" glUniform2f(location: i32, v0: f32, v1: f32): void
proc "importc" glUniform2fv(location: i32, count: i32, value: ptr(f32)): void
proc "importc" glUniform2i(location: i32, v0: i32, v1: i32): void
proc "importc" glUniform2iv(location: i32, count: i32, value: ptr(i32)): void
proc "importc" glUniform2ui(location: i32, v0: u32, v1: u32): void
proc "importc" glUniform2uiv(location: i32, count: i32, value: ptr(u32)): void
proc "importc" glUniform3d(location: i32, x: f64, y: f64, z: f64): void
proc "importc" glUniform3dv(location: i32, count: i32, value: ptr(f64)): void
proc "importc" glUniform3f(location: i32, v0: f32, v1: f32, v2: f32): void
proc "importc" glUniform3fv(location: i32, count: i32, value: ptr(f32)): void
proc "importc" glUniform3i(location: i32, v0: i32, v1: i32, v2: i32): void
proc "importc" glUniform3iv(location: i32, count: i32, value: ptr(i32)): void
proc "importc" glUniform3ui(location: i32, v0: u32, v1: u32, v2: u32): void
proc "importc" glUniform3uiv(location: i32, count: i32, value: ptr(u32)): void
proc "importc" glUniform4d(location: i32, x: f64, y: f64, z: f64, w: f64): void
proc "importc" glUniform4dv(location: i32, count: i32, value: ptr(f64)): void
proc "importc" glUniform4f(location: i32, v0: f32, v1: f32, v2: f32, v3: f32): void
proc "importc" glUniform4fv(location: i32, count: i32, value: ptr(f32)): void
proc "importc" glUniform4i(location: i32, v0: i32, v1: i32, v2: i32, v3: i32): void
proc "importc" glUniform4iv(location: i32, count: i32, value: ptr(i32)): void
proc "importc" glUniform4ui(location: i32, v0: u32, v1: u32, v2: u32, v3: u32): void
proc "importc" glUniform4uiv(location: i32, count: i32, value: ptr(u32)): void
proc "importc" glUniformBlockBinding(program: u32, uniformBlockIndex: u32, uniformBlockBinding: u32): void
proc "importc" glUniformMatrix2dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix2fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix2x3dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix2x3fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix2x4dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix2x4fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix3dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix3fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix3x2dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix3x2fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix3x4dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix3x4fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix4dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix4fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix4x2dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix4x2fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformMatrix4x3dv(location: i32, count: i32, transpose: bool, value: ptr(f64)): void
proc "importc" glUniformMatrix4x3fv(location: i32, count: i32, transpose: bool, value: ptr(f32)): void
proc "importc" glUniformSubroutinesuiv(shadertype: u32, count: i32, indices: ptr(u32)): void
proc "importc" glUnmapBuffer(target: u32): bool
proc "importc" glUnmapNamedBuffer(buffer: u32): bool
proc "importc" glUseProgram(program: u32): void
proc "importc" glUseProgramStages(pipeline: u32, stages: u32, program: u32): void
proc "importc" glValidateProgram(program: u32): void
proc "importc" glValidateProgramPipeline(pipeline: u32): void
proc "importc" glVertex2d(x: f64, y: f64): void
proc "importc" glVertex2dv(v: ptr(f64)): void
proc "importc" glVertex2f(x: f32, y: f32): void
proc "importc" glVertex2fv(v: ptr(f32)): void
proc "importc" glVertex2i(x: i32, y: i32): void
proc "importc" glVertex2iv(v: ptr(i32)): void
proc "importc" glVertex2s(x: i16, y: i16): void
proc "importc" glVertex2sv(v: ptr(i16)): void
proc "importc" glVertex3d(x: f64, y: f64, z: f64): void
proc "importc" glVertex3dv(v: ptr(f64)): void
proc "importc" glVertex3f(x: f32, y: f32, z: f32): void
proc "importc" glVertex3fv(v: ptr(f32)): void
proc "importc" glVertex3i(x: i32, y: i32, z: i32): void
proc "importc" glVertex3iv(v: ptr(i32)): void
proc "importc" glVertex3s(x: i16, y: i16, z: i16): void
proc "importc" glVertex3sv(v: ptr(i16)): void
proc "importc" glVertex4d(x: f64, y: f64, z: f64, w: f64): void
proc "importc" glVertex4dv(v: ptr(f64)): void
proc "importc" glVertex4f(x: f32, y: f32, z: f32, w: f32): void
proc "importc" glVertex4fv(v: ptr(f32)): void
proc "importc" glVertex4i(x: i32, y: i32, z: i32, w: i32): void
proc "importc" glVertex4iv(v: ptr(i32)): void
proc "importc" glVertex4s(x: i16, y: i16, z: i16, w: i16): void
proc "importc" glVertex4sv(v: ptr(i16)): void
proc "importc" glVertexArrayAttribBinding(vaobj: u32, attribindex: u32, bindingindex: u32): void
proc "importc" glVertexArrayAttribFormat(vaobj: u32, attribindex: u32, size: i32, typ: u32, normalized: bool, relativeoffset: u32): void
proc "importc" glVertexArrayAttribIFormat(vaobj: u32, attribindex: u32, size: i32, typ: u32, relativeoffset: u32): void
proc "importc" glVertexArrayAttribLFormat(vaobj: u32, attribindex: u32, size: i32, typ: u32, relativeoffset: u32): void
proc "importc" glVertexArrayBindingDivisor(vaobj: u32, bindingindex: u32, divisor: u32): void
proc "importc" glVertexArrayElementBuffer(vaobj: u32, buffer: u32): void
proc "importc" glVertexArrayVertexBuffer(vaobj: u32, bindingindex: u32, buffer: u32, offset: int, stride: i32): void
proc "importc" glVertexArrayVertexBuffers(vaobj: u32, first: u32, count: i32, buffers: u32, offsets: int, strides: i32): void
proc "importc" glVertexAttrib1d(index: u32, x: f64): void
proc "importc" glVertexAttrib1dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttrib1f(index: u32, x: f32): void
proc "importc" glVertexAttrib1fv(index: u32, v: ptr(f32)): void
proc "importc" glVertexAttrib1s(index: u32, x: i16): void
proc "importc" glVertexAttrib1sv(index: u32, v: ptr(i16)): void
proc "importc" glVertexAttrib2d(index: u32, x: f64, y: f64): void
proc "importc" glVertexAttrib2dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttrib2f(index: u32, x: f32, y: f32): void
proc "importc" glVertexAttrib2fv(index: u32, v: ptr(f32)): void
proc "importc" glVertexAttrib2s(index: u32, x: i16, y: i16): void
proc "importc" glVertexAttrib2sv(index: u32, v: ptr(i16)): void
proc "importc" glVertexAttrib3d(index: u32, x: f64, y: f64, z: f64): void
proc "importc" glVertexAttrib3dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttrib3f(index: u32, x: f32, y: f32, z: f32): void
proc "importc" glVertexAttrib3fv(index: u32, v: ptr(f32)): void
proc "importc" glVertexAttrib3s(index: u32, x: i16, y: i16, z: i16): void
proc "importc" glVertexAttrib3sv(index: u32, v: ptr(i16)): void
proc "importc" glVertexAttrib4Nbv(index: u32, v: ptr(i8)): void
proc "importc" glVertexAttrib4Niv(index: u32, v: ptr(i32)): void
proc "importc" glVertexAttrib4Nsv(index: u32, v: ptr(i16)): void
proc "importc" glVertexAttrib4Nub(index: u32, x: u8, y: u8, z: u8, w: u8): void
proc "importc" glVertexAttrib4Nubv(index: u32, v: ptr(u8)): void
proc "importc" glVertexAttrib4Nuiv(index: u32, v: ptr(u32)): void
proc "importc" glVertexAttrib4Nusv(index: u32, v: ptr(u16)): void
proc "importc" glVertexAttrib4bv(index: u32, v: ptr(i8)): void
proc "importc" glVertexAttrib4d(index: u32, x: f64, y: f64, z: f64, w: f64): void
proc "importc" glVertexAttrib4dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttrib4f(index: u32, x: f32, y: f32, z: f32, w: f32): void
proc "importc" glVertexAttrib4fv(index: u32, v: ptr(f32)): void
proc "importc" glVertexAttrib4iv(index: u32, v: ptr(i32)): void
proc "importc" glVertexAttrib4s(index: u32, x: i16, y: i16, z: i16, w: i16): void
proc "importc" glVertexAttrib4sv(index: u32, v: ptr(i16)): void
proc "importc" glVertexAttrib4ubv(index: u32, v: ptr(u8)): void
proc "importc" glVertexAttrib4uiv(index: u32, v: ptr(u32)): void
proc "importc" glVertexAttrib4usv(index: u32, v: ptr(u16)): void
proc "importc" glVertexAttribBinding(attribindex: u32, bindingindex: u32): void
proc "importc" glVertexAttribDivisor(index: u32, divisor: u32): void
proc "importc" glVertexAttribFormat(attribindex: u32, size: i32, typ: u32, normalized: bool, relativeoffset: u32): void
proc "importc" glVertexAttribI1i(index: u32, x: i32): void
proc "importc" glVertexAttribI1iv(index: u32, v: ptr(i32)): void
proc "importc" glVertexAttribI1ui(index: u32, x: u32): void
proc "importc" glVertexAttribI1uiv(index: u32, v: ptr(u32)): void
proc "importc" glVertexAttribI2i(index: u32, x: i32, y: i32): void
proc "importc" glVertexAttribI2iv(index: u32, v: ptr(i32)): void
proc "importc" glVertexAttribI2ui(index: u32, x: u32, y: u32): void
proc "importc" glVertexAttribI2uiv(index: u32, v: ptr(u32)): void
proc "importc" glVertexAttribI3i(index: u32, x: i32, y: i32, z: i32): void
proc "importc" glVertexAttribI3iv(index: u32, v: ptr(i32)): void
proc "importc" glVertexAttribI3ui(index: u32, x: u32, y: u32, z: u32): void
proc "importc" glVertexAttribI3uiv(index: u32, v: ptr(u32)): void
proc "importc" glVertexAttribI4bv(index: u32, v: ptr(i8)): void
proc "importc" glVertexAttribI4i(index: u32, x: i32, y: i32, z: i32, w: i32): void
proc "importc" glVertexAttribI4iv(index: u32, v: ptr(i32)): void
proc "importc" glVertexAttribI4sv(index: u32, v: ptr(i16)): void
proc "importc" glVertexAttribI4ubv(index: u32, v: ptr(u8)): void
proc "importc" glVertexAttribI4ui(index: u32, x: u32, y: u32, z: u32, w: u32): void
proc "importc" glVertexAttribI4uiv(index: u32, v: ptr(u32)): void
proc "importc" glVertexAttribI4usv(index: u32, v: ptr(u16)): void
proc "importc" glVertexAttribIFormat(attribindex: u32, size: i32, typ: u32, relativeoffset: u32): void
proc "importc" glVertexAttribIPointer(index: u32, size: i32, typ: u32, stride: i32, pointer: pointer): void
proc "importc" glVertexAttribL1d(index: u32, x: f64): void
proc "importc" glVertexAttribL1dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttribL2d(index: u32, x: f64, y: f64): void
proc "importc" glVertexAttribL2dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttribL3d(index: u32, x: f64, y: f64, z: f64): void
proc "importc" glVertexAttribL3dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttribL4d(index: u32, x: f64, y: f64, z: f64, w: f64): void
proc "importc" glVertexAttribL4dv(index: u32, v: ptr(f64)): void
proc "importc" glVertexAttribLFormat(attribindex: u32, size: i32, typ: u32, relativeoffset: u32): void
proc "importc" glVertexAttribLPointer(index: u32, size: i32, typ: u32, stride: i32, pointer: pointer): void
proc "importc" glVertexAttribP1ui(index: u32, typ: u32, normalized: bool, value: u32): void
proc "importc" glVertexAttribP1uiv(index: u32, typ: u32, normalized: bool, value: ptr(u32)): void
proc "importc" glVertexAttribP2ui(index: u32, typ: u32, normalized: bool, value: u32): void
proc "importc" glVertexAttribP2uiv(index: u32, typ: u32, normalized: bool, value: ptr(u32)): void
proc "importc" glVertexAttribP3ui(index: u32, typ: u32, normalized: bool, value: u32): void
proc "importc" glVertexAttribP3uiv(index: u32, typ: u32, normalized: bool, value: ptr(u32)): void
proc "importc" glVertexAttribP4ui(index: u32, typ: u32, normalized: bool, value: u32): void
proc "importc" glVertexAttribP4uiv(index: u32, typ: u32, normalized: bool, value: ptr(u32)): void
proc "importc" glVertexAttribPointer(index: u32, size: i32, typ: u32, normalized: bool, stride: i32, pointer: pointer): void
proc "importc" glVertexBindingDivisor(bindingindex: u32, divisor: u32): void
proc "importc" glVertexP2ui(typ: u32, value: u32): void
proc "importc" glVertexP2uiv(typ: u32, value: ptr(u32)): void
proc "importc" glVertexP3ui(typ: u32, value: u32): void
proc "importc" glVertexP3uiv(typ: u32, value: ptr(u32)): void
proc "importc" glVertexP4ui(typ: u32, value: u32): void
proc "importc" glVertexP4uiv(typ: u32, value: ptr(u32)): void
proc "importc" glVertexPointer(size: i32, typ: u32, stride: i32, pointer: pointer): void
proc "importc" glViewport(x: i32, y: i32, width: i32, height: i32): void
proc "importc" glViewportArrayv(first: u32, count: i32, v: ptr(f32)): void
proc "importc" glViewportIndexedf(index: u32, x: f32, y: f32, w: f32, h: f32): void
proc "importc" glViewportIndexedfv(index: u32, v: ptr(f32)): void
proc "importc" glWindowPos2d(x: f64, y: f64): void
proc "importc" glWindowPos2dv(v: ptr(f64)): void
proc "importc" glWindowPos2f(x: f32, y: f32): void
proc "importc" glWindowPos2fv(v: ptr(f32)): void
proc "importc" glWindowPos2i(x: i32, y: i32): void
proc "importc" glWindowPos2iv(v: ptr(i32)): void
proc "importc" glWindowPos2s(x: i16, y: i16): void
proc "importc" glWindowPos2sv(v: ptr(i16)): void
proc "importc" glWindowPos3d(x: f64, y: f64, z: f64): void
proc "importc" glWindowPos3dv(v: ptr(f64)): void
proc "importc" glWindowPos3f(x: f32, y: f32, z: f32): void
proc "importc" glWindowPos3fv(v: ptr(f32)): void
proc "importc" glWindowPos3i(x: i32, y: i32, z: i32): void
proc "importc" glWindowPos3iv(v: ptr(i32)): void
proc "importc" glWindowPos3s(x: i16, y: i16, z: i16): void
proc "importc" glWindowPos3sv(v: ptr(i16)): void
