
# Copyright (c) 2013-2016 The Khronos Group Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and/or associated documentation files (the
# "Materials"), to deal in the Materials without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Materials, and to
# permit persons to whom the Materials are furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Materials.
# 
# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
# 
# ------------------------------------------------------------------------
# 
# This file, gl.xml, is the OpenGL and OpenGL API Registry. The older
# ".spec" file format has been retired and will no longer be updated with
# new extensions and API versions. The canonical version of the registry,
# together with documentation, schema, and Python generator scripts used
# to generate C header files for OpenGL and OpenGL ES, can always be found
# in the Khronos Registry at
#         http://www.opengl.org/registry/
#     

addLinkerFlags("-lGL")
emit(
\\ #include <GL/gl.h>
)

type GLenum =     type(u32)
type GLboolean =  type(bool)
type GLbitfield = type(u32)
type GLvoid =     type(void)
type GLubyte =    type(u8)
type GLchar =     type(i8)
type GLbyte =     type(i8)
type GLushort =   type(u16)
type GLshort =    type(i16)
type GLuint =     type(u32)
type GLuint64 =   type(u64)
type GLint64 =    type(i64)
type GLfloat =    type(f32)
type GLdouble =   type(f64)
type GLintptr =   type(int)
type GLsizeiptr = type(int)
type GLsizei =    type(i32)
type GLint =      type(i32)
# type GLsync =     <not implemented GLsync>
# type DEBUGPROC = <not implemented GLDEBUGPROC>

const GL_CURRENT_BIT:GLenum = 0x00000001
const GL_POINT_BIT:GLenum = 0x00000002
const GL_LINE_BIT:GLenum = 0x00000004
const GL_POLYGON_BIT:GLenum = 0x00000008
const GL_POLYGON_STIPPLE_BIT:GLenum = 0x00000010
const GL_PIXEL_MODE_BIT:GLenum = 0x00000020
const GL_LIGHTING_BIT:GLenum = 0x00000040
const GL_FOG_BIT:GLenum = 0x00000080
const GL_DEPTH_BUFFER_BIT:GLenum = 0x00000100
const GL_ACCUM_BUFFER_BIT:GLenum = 0x00000200
const GL_STENCIL_BUFFER_BIT:GLenum = 0x00000400
const GL_VIEWPORT_BIT:GLenum = 0x00000800
const GL_TRANSFORM_BIT:GLenum = 0x00001000
const GL_ENABLE_BIT:GLenum = 0x00002000
const GL_COLOR_BUFFER_BIT:GLenum = 0x00004000
const GL_HINT_BIT:GLenum = 0x00008000
const GL_EVAL_BIT:GLenum = 0x00010000
const GL_LIST_BIT:GLenum = 0x00020000
const GL_TEXTURE_BIT:GLenum = 0x00040000
const GL_SCISSOR_BIT:GLenum = 0x00080000
const GL_MULTISAMPLE_BIT:GLenum = 0x20000000
# Guaranteed to mark all attribute groups at once
const GL_ALL_ATTRIB_BITS:GLenum = 0xFFFFFFFF
const GL_CLIENT_PIXEL_STORE_BIT:GLenum = 0x00000001
const GL_CLIENT_VERTEX_ARRAY_BIT:GLenum = 0x00000002
const GL_CLIENT_ALL_ATTRIB_BITS:GLenum = 0xFFFFFFFF
const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT:GLenum = 0x00000001
const GL_CONTEXT_FLAG_DEBUG_BIT:GLenum = 0x00000002
const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT:GLenum = 0x00000004
const GL_CONTEXT_CORE_PROFILE_BIT:GLenum = 0x00000001
const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT:GLenum = 0x00000002
const GL_MAP_READ_BIT:GLenum = 0x0001
const GL_MAP_WRITE_BIT:GLenum = 0x0002
const GL_MAP_INVALIDATE_RANGE_BIT:GLenum = 0x0004
const GL_MAP_INVALIDATE_BUFFER_BIT:GLenum = 0x0008
const GL_MAP_FLUSH_EXPLICIT_BIT:GLenum = 0x0010
const GL_MAP_UNSYNCHRONIZED_BIT:GLenum = 0x0020
const GL_MAP_PERSISTENT_BIT:GLenum = 0x0040
const GL_MAP_COHERENT_BIT:GLenum = 0x0080
const GL_DYNAMIC_STORAGE_BIT:GLenum = 0x0100
const GL_CLIENT_STORAGE_BIT:GLenum = 0x0200
const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT:GLenum = 0x00000001
const GL_ELEMENT_ARRAY_BARRIER_BIT:GLenum = 0x00000002
const GL_UNIFORM_BARRIER_BIT:GLenum = 0x00000004
const GL_TEXTURE_FETCH_BARRIER_BIT:GLenum = 0x00000008
const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT:GLenum = 0x00000020
const GL_COMMAND_BARRIER_BIT:GLenum = 0x00000040
const GL_PIXEL_BUFFER_BARRIER_BIT:GLenum = 0x00000080
const GL_TEXTURE_UPDATE_BARRIER_BIT:GLenum = 0x00000100
const GL_BUFFER_UPDATE_BARRIER_BIT:GLenum = 0x00000200
const GL_FRAMEBUFFER_BARRIER_BIT:GLenum = 0x00000400
const GL_TRANSFORM_FEEDBACK_BARRIER_BIT:GLenum = 0x00000800
const GL_ATOMIC_COUNTER_BARRIER_BIT:GLenum = 0x00001000
const GL_SHADER_STORAGE_BARRIER_BIT:GLenum = 0x00002000
const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT:GLenum = 0x00004000
const GL_QUERY_BUFFER_BARRIER_BIT:GLenum = 0x00008000
const GL_ALL_BARRIER_BITS:GLenum = 0xFFFFFFFF
const GL_SYNC_FLUSH_COMMANDS_BIT:GLenum = 0x00000001
const GL_VERTEX_SHADER_BIT:GLenum = 0x00000001
const GL_FRAGMENT_SHADER_BIT:GLenum = 0x00000002
const GL_GEOMETRY_SHADER_BIT:GLenum = 0x00000004
const GL_TESS_CONTROL_SHADER_BIT:GLenum = 0x00000008
const GL_TESS_EVALUATION_SHADER_BIT:GLenum = 0x00000010
const GL_COMPUTE_SHADER_BIT:GLenum = 0x00000020
const GL_ALL_SHADER_BITS:GLenum = 0xFFFFFFFF
const GL_FALSE:GLenum = 0
const GL_NO_ERROR:GLenum = 0
const GL_ZERO:GLenum = 0
const GL_NONE:GLenum = 0
const GL_TRUE:GLenum = 1
const GL_ONE:GLenum = 1
# Tagged as uint
const GL_INVALID_INDEX:u32 = 0xFFFFFFFF
# Tagged as uint64
const GL_TIMEOUT_IGNORED:u64 = 0xFFFFFFFFFFFFFFFF
const GL_POINTS:GLenum = 0x0000
const GL_LINES:GLenum = 0x0001
const GL_LINE_LOOP:GLenum = 0x0002
const GL_LINE_STRIP:GLenum = 0x0003
const GL_TRIANGLES:GLenum = 0x0004
const GL_TRIANGLE_STRIP:GLenum = 0x0005
const GL_TRIANGLE_FAN:GLenum = 0x0006
const GL_QUADS:GLenum = 0x0007
const GL_QUAD_STRIP:GLenum = 0x0008
const GL_POLYGON:GLenum = 0x0009
const GL_LINES_ADJACENCY:GLenum = 0x000A
const GL_LINE_STRIP_ADJACENCY:GLenum = 0x000B
const GL_TRIANGLES_ADJACENCY:GLenum = 0x000C
const GL_TRIANGLE_STRIP_ADJACENCY:GLenum = 0x000D
const GL_PATCHES:GLenum = 0x000E
const GL_ACCUM:GLenum = 0x0100
const GL_LOAD:GLenum = 0x0101
const GL_RETURN:GLenum = 0x0102
const GL_MULT:GLenum = 0x0103
const GL_ADD:GLenum = 0x0104
const GL_NEVER:GLenum = 0x0200
const GL_LESS:GLenum = 0x0201
const GL_EQUAL:GLenum = 0x0202
const GL_LEQUAL:GLenum = 0x0203
const GL_GREATER:GLenum = 0x0204
const GL_NOTEQUAL:GLenum = 0x0205
const GL_GEQUAL:GLenum = 0x0206
const GL_ALWAYS:GLenum = 0x0207
const GL_SRC_COLOR:GLenum = 0x0300
const GL_ONE_MINUS_SRC_COLOR:GLenum = 0x0301
const GL_SRC_ALPHA:GLenum = 0x0302
const GL_ONE_MINUS_SRC_ALPHA:GLenum = 0x0303
const GL_DST_ALPHA:GLenum = 0x0304
const GL_ONE_MINUS_DST_ALPHA:GLenum = 0x0305
const GL_DST_COLOR:GLenum = 0x0306
const GL_ONE_MINUS_DST_COLOR:GLenum = 0x0307
const GL_SRC_ALPHA_SATURATE:GLenum = 0x0308
const GL_FRONT_LEFT:GLenum = 0x0400
const GL_FRONT_RIGHT:GLenum = 0x0401
const GL_BACK_LEFT:GLenum = 0x0402
const GL_BACK_RIGHT:GLenum = 0x0403
const GL_FRONT:GLenum = 0x0404
const GL_BACK:GLenum = 0x0405
const GL_LEFT:GLenum = 0x0406
const GL_RIGHT:GLenum = 0x0407
const GL_FRONT_AND_BACK:GLenum = 0x0408
const GL_AUX0:GLenum = 0x0409
const GL_AUX1:GLenum = 0x040A
const GL_AUX2:GLenum = 0x040B
const GL_AUX3:GLenum = 0x040C
const GL_INVALID_ENUM:GLenum = 0x0500
const GL_INVALID_VALUE:GLenum = 0x0501
const GL_INVALID_OPERATION:GLenum = 0x0502
const GL_STACK_OVERFLOW:GLenum = 0x0503
const GL_STACK_UNDERFLOW:GLenum = 0x0504
const GL_OUT_OF_MEMORY:GLenum = 0x0505
const GL_INVALID_FRAMEBUFFER_OPERATION:GLenum = 0x0506
const GL_CONTEXT_LOST:GLenum = 0x0507
const GL_2D:GLenum = 0x0600
const GL_3D:GLenum = 0x0601
const GL_3D_COLOR:GLenum = 0x0602
const GL_3D_COLOR_TEXTURE:GLenum = 0x0603
const GL_4D_COLOR_TEXTURE:GLenum = 0x0604
const GL_PASS_THROUGH_TOKEN:GLenum = 0x0700
const GL_POINT_TOKEN:GLenum = 0x0701
const GL_LINE_TOKEN:GLenum = 0x0702
const GL_POLYGON_TOKEN:GLenum = 0x0703
const GL_BITMAP_TOKEN:GLenum = 0x0704
const GL_DRAW_PIXEL_TOKEN:GLenum = 0x0705
const GL_COPY_PIXEL_TOKEN:GLenum = 0x0706
const GL_LINE_RESET_TOKEN:GLenum = 0x0707
const GL_EXP:GLenum = 0x0800
const GL_EXP2:GLenum = 0x0801
const GL_CW:GLenum = 0x0900
const GL_CCW:GLenum = 0x0901
const GL_COEFF:GLenum = 0x0A00
const GL_ORDER:GLenum = 0x0A01
const GL_DOMAIN:GLenum = 0x0A02
const GL_CURRENT_COLOR:GLenum = 0x0B00
const GL_CURRENT_INDEX:GLenum = 0x0B01
const GL_CURRENT_NORMAL:GLenum = 0x0B02
const GL_CURRENT_TEXTURE_COORDS:GLenum = 0x0B03
const GL_CURRENT_RASTER_COLOR:GLenum = 0x0B04
const GL_CURRENT_RASTER_INDEX:GLenum = 0x0B05
const GL_CURRENT_RASTER_TEXTURE_COORDS:GLenum = 0x0B06
const GL_CURRENT_RASTER_POSITION:GLenum = 0x0B07
const GL_CURRENT_RASTER_POSITION_VALID:GLenum = 0x0B08
const GL_CURRENT_RASTER_DISTANCE:GLenum = 0x0B09
const GL_POINT_SMOOTH:GLenum = 0x0B10
const GL_POINT_SIZE:GLenum = 0x0B11
const GL_POINT_SIZE_RANGE:GLenum = 0x0B12
const GL_SMOOTH_POINT_SIZE_RANGE:GLenum = 0x0B12
const GL_POINT_SIZE_GRANULARITY:GLenum = 0x0B13
const GL_SMOOTH_POINT_SIZE_GRANULARITY:GLenum = 0x0B13
const GL_LINE_SMOOTH:GLenum = 0x0B20
const GL_LINE_WIDTH:GLenum = 0x0B21
const GL_LINE_WIDTH_RANGE:GLenum = 0x0B22
const GL_SMOOTH_LINE_WIDTH_RANGE:GLenum = 0x0B22
const GL_LINE_WIDTH_GRANULARITY:GLenum = 0x0B23
const GL_SMOOTH_LINE_WIDTH_GRANULARITY:GLenum = 0x0B23
const GL_LINE_STIPPLE:GLenum = 0x0B24
const GL_LINE_STIPPLE_PATTERN:GLenum = 0x0B25
const GL_LINE_STIPPLE_REPEAT:GLenum = 0x0B26
const GL_LIST_MODE:GLenum = 0x0B30
const GL_MAX_LIST_NESTING:GLenum = 0x0B31
const GL_LIST_BASE:GLenum = 0x0B32
const GL_LIST_INDEX:GLenum = 0x0B33
const GL_POLYGON_MODE:GLenum = 0x0B40
const GL_POLYGON_SMOOTH:GLenum = 0x0B41
const GL_POLYGON_STIPPLE:GLenum = 0x0B42
const GL_EDGE_FLAG:GLenum = 0x0B43
const GL_CULL_FACE:GLenum = 0x0B44
const GL_CULL_FACE_MODE:GLenum = 0x0B45
const GL_FRONT_FACE:GLenum = 0x0B46
const GL_LIGHTING:GLenum = 0x0B50
const GL_LIGHT_MODEL_LOCAL_VIEWER:GLenum = 0x0B51
const GL_LIGHT_MODEL_TWO_SIDE:GLenum = 0x0B52
const GL_LIGHT_MODEL_AMBIENT:GLenum = 0x0B53
const GL_SHADE_MODEL:GLenum = 0x0B54
const GL_COLOR_MATERIAL_FACE:GLenum = 0x0B55
const GL_COLOR_MATERIAL_PARAMETER:GLenum = 0x0B56
const GL_COLOR_MATERIAL:GLenum = 0x0B57
const GL_FOG:GLenum = 0x0B60
const GL_FOG_INDEX:GLenum = 0x0B61
const GL_FOG_DENSITY:GLenum = 0x0B62
const GL_FOG_START:GLenum = 0x0B63
const GL_FOG_END:GLenum = 0x0B64
const GL_FOG_MODE:GLenum = 0x0B65
const GL_FOG_COLOR:GLenum = 0x0B66
const GL_DEPTH_RANGE:GLenum = 0x0B70
const GL_DEPTH_TEST:GLenum = 0x0B71
const GL_DEPTH_WRITEMASK:GLenum = 0x0B72
const GL_DEPTH_CLEAR_VALUE:GLenum = 0x0B73
const GL_DEPTH_FUNC:GLenum = 0x0B74
const GL_ACCUM_CLEAR_VALUE:GLenum = 0x0B80
const GL_STENCIL_TEST:GLenum = 0x0B90
const GL_STENCIL_CLEAR_VALUE:GLenum = 0x0B91
const GL_STENCIL_FUNC:GLenum = 0x0B92
const GL_STENCIL_VALUE_MASK:GLenum = 0x0B93
const GL_STENCIL_FAIL:GLenum = 0x0B94
const GL_STENCIL_PASS_DEPTH_FAIL:GLenum = 0x0B95
const GL_STENCIL_PASS_DEPTH_PASS:GLenum = 0x0B96
const GL_STENCIL_REF:GLenum = 0x0B97
const GL_STENCIL_WRITEMASK:GLenum = 0x0B98
const GL_MATRIX_MODE:GLenum = 0x0BA0
const GL_NORMALIZE:GLenum = 0x0BA1
const GL_VIEWPORT:GLenum = 0x0BA2
const GL_MODELVIEW_STACK_DEPTH:GLenum = 0x0BA3
const GL_PROJECTION_STACK_DEPTH:GLenum = 0x0BA4
const GL_TEXTURE_STACK_DEPTH:GLenum = 0x0BA5
const GL_MODELVIEW_MATRIX:GLenum = 0x0BA6
const GL_PROJECTION_MATRIX:GLenum = 0x0BA7
const GL_TEXTURE_MATRIX:GLenum = 0x0BA8
const GL_ATTRIB_STACK_DEPTH:GLenum = 0x0BB0
const GL_CLIENT_ATTRIB_STACK_DEPTH:GLenum = 0x0BB1
const GL_ALPHA_TEST:GLenum = 0x0BC0
const GL_ALPHA_TEST_FUNC:GLenum = 0x0BC1
const GL_ALPHA_TEST_REF:GLenum = 0x0BC2
const GL_DITHER:GLenum = 0x0BD0
const GL_BLEND_DST:GLenum = 0x0BE0
const GL_BLEND_SRC:GLenum = 0x0BE1
const GL_BLEND:GLenum = 0x0BE2
const GL_LOGIC_OP_MODE:GLenum = 0x0BF0
const GL_INDEX_LOGIC_OP:GLenum = 0x0BF1
const GL_LOGIC_OP:GLenum = 0x0BF1
const GL_COLOR_LOGIC_OP:GLenum = 0x0BF2
const GL_AUX_BUFFERS:GLenum = 0x0C00
const GL_DRAW_BUFFER:GLenum = 0x0C01
const GL_READ_BUFFER:GLenum = 0x0C02
const GL_SCISSOR_BOX:GLenum = 0x0C10
const GL_SCISSOR_TEST:GLenum = 0x0C11
const GL_INDEX_CLEAR_VALUE:GLenum = 0x0C20
const GL_INDEX_WRITEMASK:GLenum = 0x0C21
const GL_COLOR_CLEAR_VALUE:GLenum = 0x0C22
const GL_COLOR_WRITEMASK:GLenum = 0x0C23
const GL_INDEX_MODE:GLenum = 0x0C30
const GL_RGBA_MODE:GLenum = 0x0C31
const GL_DOUBLEBUFFER:GLenum = 0x0C32
const GL_STEREO:GLenum = 0x0C33
const GL_RENDER_MODE:GLenum = 0x0C40
const GL_PERSPECTIVE_CORRECTION_HINT:GLenum = 0x0C50
const GL_POINT_SMOOTH_HINT:GLenum = 0x0C51
const GL_LINE_SMOOTH_HINT:GLenum = 0x0C52
const GL_POLYGON_SMOOTH_HINT:GLenum = 0x0C53
const GL_FOG_HINT:GLenum = 0x0C54
const GL_TEXTURE_GEN_S:GLenum = 0x0C60
const GL_TEXTURE_GEN_T:GLenum = 0x0C61
const GL_TEXTURE_GEN_R:GLenum = 0x0C62
const GL_TEXTURE_GEN_Q:GLenum = 0x0C63
const GL_PIXEL_MAP_I_TO_I:GLenum = 0x0C70
const GL_PIXEL_MAP_S_TO_S:GLenum = 0x0C71
const GL_PIXEL_MAP_I_TO_R:GLenum = 0x0C72
const GL_PIXEL_MAP_I_TO_G:GLenum = 0x0C73
const GL_PIXEL_MAP_I_TO_B:GLenum = 0x0C74
const GL_PIXEL_MAP_I_TO_A:GLenum = 0x0C75
const GL_PIXEL_MAP_R_TO_R:GLenum = 0x0C76
const GL_PIXEL_MAP_G_TO_G:GLenum = 0x0C77
const GL_PIXEL_MAP_B_TO_B:GLenum = 0x0C78
const GL_PIXEL_MAP_A_TO_A:GLenum = 0x0C79
const GL_PIXEL_MAP_I_TO_I_SIZE:GLenum = 0x0CB0
const GL_PIXEL_MAP_S_TO_S_SIZE:GLenum = 0x0CB1
const GL_PIXEL_MAP_I_TO_R_SIZE:GLenum = 0x0CB2
const GL_PIXEL_MAP_I_TO_G_SIZE:GLenum = 0x0CB3
const GL_PIXEL_MAP_I_TO_B_SIZE:GLenum = 0x0CB4
const GL_PIXEL_MAP_I_TO_A_SIZE:GLenum = 0x0CB5
const GL_PIXEL_MAP_R_TO_R_SIZE:GLenum = 0x0CB6
const GL_PIXEL_MAP_G_TO_G_SIZE:GLenum = 0x0CB7
const GL_PIXEL_MAP_B_TO_B_SIZE:GLenum = 0x0CB8
const GL_PIXEL_MAP_A_TO_A_SIZE:GLenum = 0x0CB9
const GL_UNPACK_SWAP_BYTES:GLenum = 0x0CF0
const GL_UNPACK_LSB_FIRST:GLenum = 0x0CF1
const GL_UNPACK_ROW_LENGTH:GLenum = 0x0CF2
const GL_UNPACK_SKIP_ROWS:GLenum = 0x0CF3
const GL_UNPACK_SKIP_PIXELS:GLenum = 0x0CF4
const GL_UNPACK_ALIGNMENT:GLenum = 0x0CF5
const GL_PACK_SWAP_BYTES:GLenum = 0x0D00
const GL_PACK_LSB_FIRST:GLenum = 0x0D01
const GL_PACK_ROW_LENGTH:GLenum = 0x0D02
const GL_PACK_SKIP_ROWS:GLenum = 0x0D03
const GL_PACK_SKIP_PIXELS:GLenum = 0x0D04
const GL_PACK_ALIGNMENT:GLenum = 0x0D05
const GL_MAP_COLOR:GLenum = 0x0D10
const GL_MAP_STENCIL:GLenum = 0x0D11
const GL_INDEX_SHIFT:GLenum = 0x0D12
const GL_INDEX_OFFSET:GLenum = 0x0D13
const GL_RED_SCALE:GLenum = 0x0D14
const GL_RED_BIAS:GLenum = 0x0D15
const GL_ZOOM_X:GLenum = 0x0D16
const GL_ZOOM_Y:GLenum = 0x0D17
const GL_GREEN_SCALE:GLenum = 0x0D18
const GL_GREEN_BIAS:GLenum = 0x0D19
const GL_BLUE_SCALE:GLenum = 0x0D1A
const GL_BLUE_BIAS:GLenum = 0x0D1B
const GL_ALPHA_SCALE:GLenum = 0x0D1C
const GL_ALPHA_BIAS:GLenum = 0x0D1D
const GL_DEPTH_SCALE:GLenum = 0x0D1E
const GL_DEPTH_BIAS:GLenum = 0x0D1F
const GL_MAX_EVAL_ORDER:GLenum = 0x0D30
const GL_MAX_LIGHTS:GLenum = 0x0D31
const GL_MAX_CLIP_PLANES:GLenum = 0x0D32
const GL_MAX_CLIP_DISTANCES:GLenum = 0x0D32
const GL_MAX_TEXTURE_SIZE:GLenum = 0x0D33
const GL_MAX_PIXEL_MAP_TABLE:GLenum = 0x0D34
const GL_MAX_ATTRIB_STACK_DEPTH:GLenum = 0x0D35
const GL_MAX_MODELVIEW_STACK_DEPTH:GLenum = 0x0D36
const GL_MAX_NAME_STACK_DEPTH:GLenum = 0x0D37
const GL_MAX_PROJECTION_STACK_DEPTH:GLenum = 0x0D38
const GL_MAX_TEXTURE_STACK_DEPTH:GLenum = 0x0D39
const GL_MAX_VIEWPORT_DIMS:GLenum = 0x0D3A
const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH:GLenum = 0x0D3B
const GL_SUBPIXEL_BITS:GLenum = 0x0D50
const GL_INDEX_BITS:GLenum = 0x0D51
const GL_RED_BITS:GLenum = 0x0D52
const GL_GREEN_BITS:GLenum = 0x0D53
const GL_BLUE_BITS:GLenum = 0x0D54
const GL_ALPHA_BITS:GLenum = 0x0D55
const GL_DEPTH_BITS:GLenum = 0x0D56
const GL_STENCIL_BITS:GLenum = 0x0D57
const GL_ACCUM_RED_BITS:GLenum = 0x0D58
const GL_ACCUM_GREEN_BITS:GLenum = 0x0D59
const GL_ACCUM_BLUE_BITS:GLenum = 0x0D5A
const GL_ACCUM_ALPHA_BITS:GLenum = 0x0D5B
const GL_NAME_STACK_DEPTH:GLenum = 0x0D70
const GL_AUTO_NORMAL:GLenum = 0x0D80
const GL_MAP1_COLOR_4:GLenum = 0x0D90
const GL_MAP1_INDEX:GLenum = 0x0D91
const GL_MAP1_NORMAL:GLenum = 0x0D92
const GL_MAP1_TEXTURE_COORD_1:GLenum = 0x0D93
const GL_MAP1_TEXTURE_COORD_2:GLenum = 0x0D94
const GL_MAP1_TEXTURE_COORD_3:GLenum = 0x0D95
const GL_MAP1_TEXTURE_COORD_4:GLenum = 0x0D96
const GL_MAP1_VERTEX_3:GLenum = 0x0D97
const GL_MAP1_VERTEX_4:GLenum = 0x0D98
const GL_MAP2_COLOR_4:GLenum = 0x0DB0
const GL_MAP2_INDEX:GLenum = 0x0DB1
const GL_MAP2_NORMAL:GLenum = 0x0DB2
const GL_MAP2_TEXTURE_COORD_1:GLenum = 0x0DB3
const GL_MAP2_TEXTURE_COORD_2:GLenum = 0x0DB4
const GL_MAP2_TEXTURE_COORD_3:GLenum = 0x0DB5
const GL_MAP2_TEXTURE_COORD_4:GLenum = 0x0DB6
const GL_MAP2_VERTEX_3:GLenum = 0x0DB7
const GL_MAP2_VERTEX_4:GLenum = 0x0DB8
const GL_MAP1_GRID_DOMAIN:GLenum = 0x0DD0
const GL_MAP1_GRID_SEGMENTS:GLenum = 0x0DD1
const GL_MAP2_GRID_DOMAIN:GLenum = 0x0DD2
const GL_MAP2_GRID_SEGMENTS:GLenum = 0x0DD3
const GL_TEXTURE_1D:GLenum = 0x0DE0
const GL_TEXTURE_2D:GLenum = 0x0DE1
const GL_FEEDBACK_BUFFER_POINTER:GLenum = 0x0DF0
const GL_FEEDBACK_BUFFER_SIZE:GLenum = 0x0DF1
const GL_FEEDBACK_BUFFER_TYPE:GLenum = 0x0DF2
const GL_SELECTION_BUFFER_POINTER:GLenum = 0x0DF3
const GL_SELECTION_BUFFER_SIZE:GLenum = 0x0DF4
const GL_TEXTURE_WIDTH:GLenum = 0x1000
const GL_TEXTURE_HEIGHT:GLenum = 0x1001
const GL_TEXTURE_INTERNAL_FORMAT:GLenum = 0x1003
const GL_TEXTURE_COMPONENTS:GLenum = 0x1003
const GL_TEXTURE_BORDER_COLOR:GLenum = 0x1004
const GL_TEXTURE_BORDER:GLenum = 0x1005
const GL_TEXTURE_TARGET:GLenum = 0x1006
const GL_DONT_CARE:GLenum = 0x1100
const GL_FASTEST:GLenum = 0x1101
const GL_NICEST:GLenum = 0x1102
const GL_AMBIENT:GLenum = 0x1200
const GL_DIFFUSE:GLenum = 0x1201
const GL_SPECULAR:GLenum = 0x1202
const GL_POSITION:GLenum = 0x1203
const GL_SPOT_DIRECTION:GLenum = 0x1204
const GL_SPOT_EXPONENT:GLenum = 0x1205
const GL_SPOT_CUTOFF:GLenum = 0x1206
const GL_CONSTANT_ATTENUATION:GLenum = 0x1207
const GL_LINEAR_ATTENUATION:GLenum = 0x1208
const GL_QUADRATIC_ATTENUATION:GLenum = 0x1209
const GL_COMPILE:GLenum = 0x1300
const GL_COMPILE_AND_EXECUTE:GLenum = 0x1301
const GL_BYTE:GLenum = 0x1400
const GL_UNSIGNED_BYTE:GLenum = 0x1401
const GL_SHORT:GLenum = 0x1402
const GL_UNSIGNED_SHORT:GLenum = 0x1403
const GL_INT:GLenum = 0x1404
const GL_UNSIGNED_INT:GLenum = 0x1405
const GL_FLOAT:GLenum = 0x1406
const GL_2_BYTES:GLenum = 0x1407
const GL_3_BYTES:GLenum = 0x1408
const GL_4_BYTES:GLenum = 0x1409
const GL_DOUBLE:GLenum = 0x140A
const GL_HALF_FLOAT:GLenum = 0x140B
const GL_FIXED:GLenum = 0x140C
const GL_CLEAR:GLenum = 0x1500
const GL_AND:GLenum = 0x1501
const GL_AND_REVERSE:GLenum = 0x1502
const GL_COPY:GLenum = 0x1503
const GL_AND_INVERTED:GLenum = 0x1504
const GL_NOOP:GLenum = 0x1505
const GL_XOR:GLenum = 0x1506
const GL_OR:GLenum = 0x1507
const GL_NOR:GLenum = 0x1508
const GL_EQUIV:GLenum = 0x1509
const GL_INVERT:GLenum = 0x150A
const GL_OR_REVERSE:GLenum = 0x150B
const GL_COPY_INVERTED:GLenum = 0x150C
const GL_OR_INVERTED:GLenum = 0x150D
const GL_NAND:GLenum = 0x150E
const GL_SET:GLenum = 0x150F
const GL_EMISSION:GLenum = 0x1600
const GL_SHININESS:GLenum = 0x1601
const GL_AMBIENT_AND_DIFFUSE:GLenum = 0x1602
const GL_COLOR_INDEXES:GLenum = 0x1603
const GL_MODELVIEW:GLenum = 0x1700
const GL_PROJECTION:GLenum = 0x1701
const GL_TEXTURE:GLenum = 0x1702
const GL_COLOR:GLenum = 0x1800
const GL_DEPTH:GLenum = 0x1801
const GL_STENCIL:GLenum = 0x1802
const GL_COLOR_INDEX:GLenum = 0x1900
const GL_STENCIL_INDEX:GLenum = 0x1901
const GL_DEPTH_COMPONENT:GLenum = 0x1902
const GL_RED:GLenum = 0x1903
const GL_GREEN:GLenum = 0x1904
const GL_BLUE:GLenum = 0x1905
const GL_ALPHA:GLenum = 0x1906
const GL_RGB:GLenum = 0x1907
const GL_RGBA:GLenum = 0x1908
const GL_LUMINANCE:GLenum = 0x1909
const GL_LUMINANCE_ALPHA:GLenum = 0x190A
const GL_BITMAP:GLenum = 0x1A00
const GL_POINT:GLenum = 0x1B00
const GL_LINE:GLenum = 0x1B01
const GL_FILL:GLenum = 0x1B02
const GL_RENDER:GLenum = 0x1C00
const GL_FEEDBACK:GLenum = 0x1C01
const GL_SELECT:GLenum = 0x1C02
const GL_FLAT:GLenum = 0x1D00
const GL_SMOOTH:GLenum = 0x1D01
const GL_KEEP:GLenum = 0x1E00
const GL_REPLACE:GLenum = 0x1E01
const GL_INCR:GLenum = 0x1E02
const GL_DECR:GLenum = 0x1E03
const GL_VENDOR:GLenum = 0x1F00
const GL_RENDERER:GLenum = 0x1F01
const GL_VERSION:GLenum = 0x1F02
const GL_EXTENSIONS:GLenum = 0x1F03
const GL_S:GLenum = 0x2000
const GL_T:GLenum = 0x2001
const GL_R:GLenum = 0x2002
const GL_Q:GLenum = 0x2003
const GL_MODULATE:GLenum = 0x2100
const GL_DECAL:GLenum = 0x2101
const GL_TEXTURE_ENV_MODE:GLenum = 0x2200
const GL_TEXTURE_ENV_COLOR:GLenum = 0x2201
const GL_TEXTURE_ENV:GLenum = 0x2300
const GL_EYE_LINEAR:GLenum = 0x2400
const GL_OBJECT_LINEAR:GLenum = 0x2401
const GL_SPHERE_MAP:GLenum = 0x2402
const GL_TEXTURE_GEN_MODE:GLenum = 0x2500
const GL_OBJECT_PLANE:GLenum = 0x2501
const GL_EYE_PLANE:GLenum = 0x2502
const GL_NEAREST:GLenum = 0x2600
const GL_LINEAR:GLenum = 0x2601
const GL_NEAREST_MIPMAP_NEAREST:GLenum = 0x2700
const GL_LINEAR_MIPMAP_NEAREST:GLenum = 0x2701
const GL_NEAREST_MIPMAP_LINEAR:GLenum = 0x2702
const GL_LINEAR_MIPMAP_LINEAR:GLenum = 0x2703
const GL_TEXTURE_MAG_FILTER:GLenum = 0x2800
const GL_TEXTURE_MIN_FILTER:GLenum = 0x2801
const GL_TEXTURE_WRAP_S:GLenum = 0x2802
const GL_TEXTURE_WRAP_T:GLenum = 0x2803
const GL_CLAMP:GLenum = 0x2900
const GL_REPEAT:GLenum = 0x2901
const GL_POLYGON_OFFSET_UNITS:GLenum = 0x2A00
const GL_POLYGON_OFFSET_POINT:GLenum = 0x2A01
const GL_POLYGON_OFFSET_LINE:GLenum = 0x2A02
const GL_R3_G3_B2:GLenum = 0x2A10
const GL_V2F:GLenum = 0x2A20
const GL_V3F:GLenum = 0x2A21
const GL_C4UB_V2F:GLenum = 0x2A22
const GL_C4UB_V3F:GLenum = 0x2A23
const GL_C3F_V3F:GLenum = 0x2A24
const GL_N3F_V3F:GLenum = 0x2A25
const GL_C4F_N3F_V3F:GLenum = 0x2A26
const GL_T2F_V3F:GLenum = 0x2A27
const GL_T4F_V4F:GLenum = 0x2A28
const GL_T2F_C4UB_V3F:GLenum = 0x2A29
const GL_T2F_C3F_V3F:GLenum = 0x2A2A
const GL_T2F_N3F_V3F:GLenum = 0x2A2B
const GL_T2F_C4F_N3F_V3F:GLenum = 0x2A2C
const GL_T4F_C4F_N3F_V4F:GLenum = 0x2A2D
const GL_CLIP_PLANE0:GLenum = 0x3000
const GL_CLIP_DISTANCE0:GLenum = 0x3000
const GL_CLIP_PLANE1:GLenum = 0x3001
const GL_CLIP_DISTANCE1:GLenum = 0x3001
const GL_CLIP_PLANE2:GLenum = 0x3002
const GL_CLIP_DISTANCE2:GLenum = 0x3002
const GL_CLIP_PLANE3:GLenum = 0x3003
const GL_CLIP_DISTANCE3:GLenum = 0x3003
const GL_CLIP_PLANE4:GLenum = 0x3004
const GL_CLIP_DISTANCE4:GLenum = 0x3004
const GL_CLIP_PLANE5:GLenum = 0x3005
const GL_CLIP_DISTANCE5:GLenum = 0x3005
const GL_CLIP_DISTANCE6:GLenum = 0x3006
const GL_CLIP_DISTANCE7:GLenum = 0x3007
const GL_LIGHT0:GLenum = 0x4000
const GL_LIGHT1:GLenum = 0x4001
const GL_LIGHT2:GLenum = 0x4002
const GL_LIGHT3:GLenum = 0x4003
const GL_LIGHT4:GLenum = 0x4004
const GL_LIGHT5:GLenum = 0x4005
const GL_LIGHT6:GLenum = 0x4006
const GL_LIGHT7:GLenum = 0x4007
const GL_CONSTANT_COLOR:GLenum = 0x8001
const GL_ONE_MINUS_CONSTANT_COLOR:GLenum = 0x8002
const GL_CONSTANT_ALPHA:GLenum = 0x8003
const GL_ONE_MINUS_CONSTANT_ALPHA:GLenum = 0x8004
const GL_FUNC_ADD:GLenum = 0x8006
const GL_MIN:GLenum = 0x8007
const GL_MAX:GLenum = 0x8008
const GL_BLEND_EQUATION_RGB:GLenum = 0x8009
const GL_FUNC_SUBTRACT:GLenum = 0x800A
const GL_FUNC_REVERSE_SUBTRACT:GLenum = 0x800B
const GL_UNSIGNED_BYTE_3_3_2:GLenum = 0x8032
const GL_UNSIGNED_SHORT_4_4_4_4:GLenum = 0x8033
const GL_UNSIGNED_SHORT_5_5_5_1:GLenum = 0x8034
const GL_UNSIGNED_INT_8_8_8_8:GLenum = 0x8035
const GL_UNSIGNED_INT_10_10_10_2:GLenum = 0x8036
const GL_POLYGON_OFFSET_FILL:GLenum = 0x8037
const GL_POLYGON_OFFSET_FACTOR:GLenum = 0x8038
const GL_RESCALE_NORMAL:GLenum = 0x803A
const GL_ALPHA4:GLenum = 0x803B
const GL_ALPHA8:GLenum = 0x803C
const GL_ALPHA12:GLenum = 0x803D
const GL_ALPHA16:GLenum = 0x803E
const GL_LUMINANCE4:GLenum = 0x803F
const GL_LUMINANCE8:GLenum = 0x8040
const GL_LUMINANCE12:GLenum = 0x8041
const GL_LUMINANCE16:GLenum = 0x8042
const GL_LUMINANCE4_ALPHA4:GLenum = 0x8043
const GL_LUMINANCE6_ALPHA2:GLenum = 0x8044
const GL_LUMINANCE8_ALPHA8:GLenum = 0x8045
const GL_LUMINANCE12_ALPHA4:GLenum = 0x8046
const GL_LUMINANCE12_ALPHA12:GLenum = 0x8047
const GL_LUMINANCE16_ALPHA16:GLenum = 0x8048
const GL_INTENSITY:GLenum = 0x8049
const GL_INTENSITY4:GLenum = 0x804A
const GL_INTENSITY8:GLenum = 0x804B
const GL_INTENSITY12:GLenum = 0x804C
const GL_INTENSITY16:GLenum = 0x804D
const GL_RGB4:GLenum = 0x804F
const GL_RGB5:GLenum = 0x8050
const GL_RGB8:GLenum = 0x8051
const GL_RGB10:GLenum = 0x8052
const GL_RGB12:GLenum = 0x8053
const GL_RGB16:GLenum = 0x8054
const GL_RGBA2:GLenum = 0x8055
const GL_RGBA4:GLenum = 0x8056
const GL_RGB5_A1:GLenum = 0x8057
const GL_RGBA8:GLenum = 0x8058
const GL_RGB10_A2:GLenum = 0x8059
const GL_RGBA12:GLenum = 0x805A
const GL_RGBA16:GLenum = 0x805B
const GL_TEXTURE_RED_SIZE:GLenum = 0x805C
const GL_TEXTURE_GREEN_SIZE:GLenum = 0x805D
const GL_TEXTURE_BLUE_SIZE:GLenum = 0x805E
const GL_TEXTURE_ALPHA_SIZE:GLenum = 0x805F
const GL_TEXTURE_LUMINANCE_SIZE:GLenum = 0x8060
const GL_TEXTURE_INTENSITY_SIZE:GLenum = 0x8061
const GL_PROXY_TEXTURE_1D:GLenum = 0x8063
const GL_PROXY_TEXTURE_2D:GLenum = 0x8064
const GL_TEXTURE_PRIORITY:GLenum = 0x8066
const GL_TEXTURE_RESIDENT:GLenum = 0x8067
const GL_TEXTURE_BINDING_1D:GLenum = 0x8068
const GL_TEXTURE_BINDING_2D:GLenum = 0x8069
const GL_TEXTURE_BINDING_3D:GLenum = 0x806A
const GL_PACK_SKIP_IMAGES:GLenum = 0x806B
const GL_PACK_IMAGE_HEIGHT:GLenum = 0x806C
const GL_UNPACK_SKIP_IMAGES:GLenum = 0x806D
const GL_UNPACK_IMAGE_HEIGHT:GLenum = 0x806E
const GL_TEXTURE_3D:GLenum = 0x806F
const GL_PROXY_TEXTURE_3D:GLenum = 0x8070
const GL_TEXTURE_DEPTH:GLenum = 0x8071
const GL_TEXTURE_WRAP_R:GLenum = 0x8072
const GL_MAX_3D_TEXTURE_SIZE:GLenum = 0x8073
const GL_VERTEX_ARRAY:GLenum = 0x8074
const GL_NORMAL_ARRAY:GLenum = 0x8075
const GL_COLOR_ARRAY:GLenum = 0x8076
const GL_INDEX_ARRAY:GLenum = 0x8077
const GL_TEXTURE_COORD_ARRAY:GLenum = 0x8078
const GL_EDGE_FLAG_ARRAY:GLenum = 0x8079
const GL_VERTEX_ARRAY_SIZE:GLenum = 0x807A
const GL_VERTEX_ARRAY_TYPE:GLenum = 0x807B
const GL_VERTEX_ARRAY_STRIDE:GLenum = 0x807C
const GL_NORMAL_ARRAY_TYPE:GLenum = 0x807E
const GL_NORMAL_ARRAY_STRIDE:GLenum = 0x807F
const GL_COLOR_ARRAY_SIZE:GLenum = 0x8081
const GL_COLOR_ARRAY_TYPE:GLenum = 0x8082
const GL_COLOR_ARRAY_STRIDE:GLenum = 0x8083
const GL_INDEX_ARRAY_TYPE:GLenum = 0x8085
const GL_INDEX_ARRAY_STRIDE:GLenum = 0x8086
const GL_TEXTURE_COORD_ARRAY_SIZE:GLenum = 0x8088
const GL_TEXTURE_COORD_ARRAY_TYPE:GLenum = 0x8089
const GL_TEXTURE_COORD_ARRAY_STRIDE:GLenum = 0x808A
const GL_EDGE_FLAG_ARRAY_STRIDE:GLenum = 0x808C
const GL_VERTEX_ARRAY_POINTER:GLenum = 0x808E
const GL_NORMAL_ARRAY_POINTER:GLenum = 0x808F
const GL_COLOR_ARRAY_POINTER:GLenum = 0x8090
const GL_INDEX_ARRAY_POINTER:GLenum = 0x8091
const GL_TEXTURE_COORD_ARRAY_POINTER:GLenum = 0x8092
const GL_EDGE_FLAG_ARRAY_POINTER:GLenum = 0x8093
const GL_MULTISAMPLE:GLenum = 0x809D
const GL_SAMPLE_ALPHA_TO_COVERAGE:GLenum = 0x809E
const GL_SAMPLE_ALPHA_TO_ONE:GLenum = 0x809F
const GL_SAMPLE_COVERAGE:GLenum = 0x80A0
const GL_SAMPLE_BUFFERS:GLenum = 0x80A8
const GL_SAMPLES:GLenum = 0x80A9
const GL_SAMPLE_COVERAGE_VALUE:GLenum = 0x80AA
const GL_SAMPLE_COVERAGE_INVERT:GLenum = 0x80AB
const GL_BLEND_DST_RGB:GLenum = 0x80C8
const GL_BLEND_SRC_RGB:GLenum = 0x80C9
const GL_BLEND_DST_ALPHA:GLenum = 0x80CA
const GL_BLEND_SRC_ALPHA:GLenum = 0x80CB
const GL_BGR:GLenum = 0x80E0
const GL_BGRA:GLenum = 0x80E1
const GL_MAX_ELEMENTS_VERTICES:GLenum = 0x80E8
const GL_MAX_ELEMENTS_INDICES:GLenum = 0x80E9
const GL_POINT_SIZE_MIN:GLenum = 0x8126
const GL_POINT_SIZE_MAX:GLenum = 0x8127
const GL_POINT_FADE_THRESHOLD_SIZE:GLenum = 0x8128
const GL_POINT_DISTANCE_ATTENUATION:GLenum = 0x8129
const GL_CLAMP_TO_BORDER:GLenum = 0x812D
const GL_CLAMP_TO_EDGE:GLenum = 0x812F
const GL_TEXTURE_MIN_LOD:GLenum = 0x813A
const GL_TEXTURE_MAX_LOD:GLenum = 0x813B
const GL_TEXTURE_BASE_LEVEL:GLenum = 0x813C
const GL_TEXTURE_MAX_LEVEL:GLenum = 0x813D
const GL_GENERATE_MIPMAP:GLenum = 0x8191
const GL_GENERATE_MIPMAP_HINT:GLenum = 0x8192
const GL_DEPTH_COMPONENT16:GLenum = 0x81A5
const GL_DEPTH_COMPONENT24:GLenum = 0x81A6
const GL_DEPTH_COMPONENT32:GLenum = 0x81A7
const GL_LIGHT_MODEL_COLOR_CONTROL:GLenum = 0x81F8
const GL_SINGLE_COLOR:GLenum = 0x81F9
const GL_SEPARATE_SPECULAR_COLOR:GLenum = 0x81FA
const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:GLenum = 0x8210
const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:GLenum = 0x8211
const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE:GLenum = 0x8212
const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:GLenum = 0x8213
const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:GLenum = 0x8214
const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:GLenum = 0x8215
const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:GLenum = 0x8216
const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:GLenum = 0x8217
const GL_FRAMEBUFFER_DEFAULT:GLenum = 0x8218
const GL_FRAMEBUFFER_UNDEFINED:GLenum = 0x8219
const GL_DEPTH_STENCIL_ATTACHMENT:GLenum = 0x821A
const GL_MAJOR_VERSION:GLenum = 0x821B
const GL_MINOR_VERSION:GLenum = 0x821C
const GL_NUM_EXTENSIONS:GLenum = 0x821D
const GL_CONTEXT_FLAGS:GLenum = 0x821E
const GL_BUFFER_IMMUTABLE_STORAGE:GLenum = 0x821F
const GL_BUFFER_STORAGE_FLAGS:GLenum = 0x8220
const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED:GLenum = 0x8221
const GL_INDEX:GLenum = 0x8222
const GL_COMPRESSED_RED:GLenum = 0x8225
const GL_COMPRESSED_RG:GLenum = 0x8226
const GL_RG:GLenum = 0x8227
const GL_RG_INTEGER:GLenum = 0x8228
const GL_R8:GLenum = 0x8229
const GL_R16:GLenum = 0x822A
const GL_RG8:GLenum = 0x822B
const GL_RG16:GLenum = 0x822C
const GL_R16F:GLenum = 0x822D
const GL_R32F:GLenum = 0x822E
const GL_RG16F:GLenum = 0x822F
const GL_RG32F:GLenum = 0x8230
const GL_R8I:GLenum = 0x8231
const GL_R8UI:GLenum = 0x8232
const GL_R16I:GLenum = 0x8233
const GL_R16UI:GLenum = 0x8234
const GL_R32I:GLenum = 0x8235
const GL_R32UI:GLenum = 0x8236
const GL_RG8I:GLenum = 0x8237
const GL_RG8UI:GLenum = 0x8238
const GL_RG16I:GLenum = 0x8239
const GL_RG16UI:GLenum = 0x823A
const GL_RG32I:GLenum = 0x823B
const GL_RG32UI:GLenum = 0x823C
const GL_DEBUG_OUTPUT_SYNCHRONOUS:GLenum = 0x8242
const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH:GLenum = 0x8243
const GL_DEBUG_CALLBACK_FUNCTION:GLenum = 0x8244
const GL_DEBUG_CALLBACK_USER_PARAM:GLenum = 0x8245
const GL_DEBUG_SOURCE_API:GLenum = 0x8246
const GL_DEBUG_SOURCE_WINDOW_SYSTEM:GLenum = 0x8247
const GL_DEBUG_SOURCE_SHADER_COMPILER:GLenum = 0x8248
const GL_DEBUG_SOURCE_THIRD_PARTY:GLenum = 0x8249
const GL_DEBUG_SOURCE_APPLICATION:GLenum = 0x824A
const GL_DEBUG_SOURCE_OTHER:GLenum = 0x824B
const GL_DEBUG_TYPE_ERROR:GLenum = 0x824C
const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:GLenum = 0x824D
const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:GLenum = 0x824E
const GL_DEBUG_TYPE_PORTABILITY:GLenum = 0x824F
const GL_DEBUG_TYPE_PERFORMANCE:GLenum = 0x8250
const GL_DEBUG_TYPE_OTHER:GLenum = 0x8251
const GL_LOSE_CONTEXT_ON_RESET:GLenum = 0x8252
const GL_GUILTY_CONTEXT_RESET:GLenum = 0x8253
const GL_INNOCENT_CONTEXT_RESET:GLenum = 0x8254
const GL_UNKNOWN_CONTEXT_RESET:GLenum = 0x8255
const GL_RESET_NOTIFICATION_STRATEGY:GLenum = 0x8256
const GL_PROGRAM_BINARY_RETRIEVABLE_HINT:GLenum = 0x8257
const GL_PROGRAM_SEPARABLE:GLenum = 0x8258
const GL_ACTIVE_PROGRAM:GLenum = 0x8259
const GL_PROGRAM_PIPELINE_BINDING:GLenum = 0x825A
const GL_MAX_VIEWPORTS:GLenum = 0x825B
const GL_VIEWPORT_SUBPIXEL_BITS:GLenum = 0x825C
const GL_VIEWPORT_BOUNDS_RANGE:GLenum = 0x825D
const GL_LAYER_PROVOKING_VERTEX:GLenum = 0x825E
const GL_VIEWPORT_INDEX_PROVOKING_VERTEX:GLenum = 0x825F
const GL_UNDEFINED_VERTEX:GLenum = 0x8260
const GL_NO_RESET_NOTIFICATION:GLenum = 0x8261
const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE:GLenum = 0x8262
const GL_MAX_COMPUTE_UNIFORM_COMPONENTS:GLenum = 0x8263
const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS:GLenum = 0x8264
const GL_MAX_COMPUTE_ATOMIC_COUNTERS:GLenum = 0x8265
const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS:GLenum = 0x8266
const GL_COMPUTE_WORK_GROUP_SIZE:GLenum = 0x8267
const GL_DEBUG_TYPE_MARKER:GLenum = 0x8268
const GL_DEBUG_TYPE_PUSH_GROUP:GLenum = 0x8269
const GL_DEBUG_TYPE_POP_GROUP:GLenum = 0x826A
const GL_DEBUG_SEVERITY_NOTIFICATION:GLenum = 0x826B
const GL_MAX_DEBUG_GROUP_STACK_DEPTH:GLenum = 0x826C
const GL_DEBUG_GROUP_STACK_DEPTH:GLenum = 0x826D
const GL_MAX_UNIFORM_LOCATIONS:GLenum = 0x826E
const GL_INTERNALFORMAT_SUPPORTED:GLenum = 0x826F
const GL_INTERNALFORMAT_PREFERRED:GLenum = 0x8270
const GL_INTERNALFORMAT_RED_SIZE:GLenum = 0x8271
const GL_INTERNALFORMAT_GREEN_SIZE:GLenum = 0x8272
const GL_INTERNALFORMAT_BLUE_SIZE:GLenum = 0x8273
const GL_INTERNALFORMAT_ALPHA_SIZE:GLenum = 0x8274
const GL_INTERNALFORMAT_DEPTH_SIZE:GLenum = 0x8275
const GL_INTERNALFORMAT_STENCIL_SIZE:GLenum = 0x8276
const GL_INTERNALFORMAT_SHARED_SIZE:GLenum = 0x8277
const GL_INTERNALFORMAT_RED_TYPE:GLenum = 0x8278
const GL_INTERNALFORMAT_GREEN_TYPE:GLenum = 0x8279
const GL_INTERNALFORMAT_BLUE_TYPE:GLenum = 0x827A
const GL_INTERNALFORMAT_ALPHA_TYPE:GLenum = 0x827B
const GL_INTERNALFORMAT_DEPTH_TYPE:GLenum = 0x827C
const GL_INTERNALFORMAT_STENCIL_TYPE:GLenum = 0x827D
const GL_MAX_WIDTH:GLenum = 0x827E
const GL_MAX_HEIGHT:GLenum = 0x827F
const GL_MAX_DEPTH:GLenum = 0x8280
const GL_MAX_LAYERS:GLenum = 0x8281
const GL_MAX_COMBINED_DIMENSIONS:GLenum = 0x8282
const GL_COLOR_COMPONENTS:GLenum = 0x8283
const GL_DEPTH_COMPONENTS:GLenum = 0x8284
const GL_STENCIL_COMPONENTS:GLenum = 0x8285
const GL_COLOR_RENDERABLE:GLenum = 0x8286
const GL_DEPTH_RENDERABLE:GLenum = 0x8287
const GL_STENCIL_RENDERABLE:GLenum = 0x8288
const GL_FRAMEBUFFER_RENDERABLE:GLenum = 0x8289
const GL_FRAMEBUFFER_RENDERABLE_LAYERED:GLenum = 0x828A
const GL_FRAMEBUFFER_BLEND:GLenum = 0x828B
const GL_READ_PIXELS:GLenum = 0x828C
const GL_READ_PIXELS_FORMAT:GLenum = 0x828D
const GL_READ_PIXELS_TYPE:GLenum = 0x828E
const GL_TEXTURE_IMAGE_FORMAT:GLenum = 0x828F
const GL_TEXTURE_IMAGE_TYPE:GLenum = 0x8290
const GL_GET_TEXTURE_IMAGE_FORMAT:GLenum = 0x8291
const GL_GET_TEXTURE_IMAGE_TYPE:GLenum = 0x8292
const GL_MIPMAP:GLenum = 0x8293
const GL_MANUAL_GENERATE_MIPMAP:GLenum = 0x8294
# Should be deprecated
const GL_AUTO_GENERATE_MIPMAP:GLenum = 0x8295
const GL_COLOR_ENCODING:GLenum = 0x8296
const GL_SRGB_READ:GLenum = 0x8297
const GL_SRGB_WRITE:GLenum = 0x8298
const GL_FILTER:GLenum = 0x829A
const GL_VERTEX_TEXTURE:GLenum = 0x829B
const GL_TESS_CONTROL_TEXTURE:GLenum = 0x829C
const GL_TESS_EVALUATION_TEXTURE:GLenum = 0x829D
const GL_GEOMETRY_TEXTURE:GLenum = 0x829E
const GL_FRAGMENT_TEXTURE:GLenum = 0x829F
const GL_COMPUTE_TEXTURE:GLenum = 0x82A0
const GL_TEXTURE_SHADOW:GLenum = 0x82A1
const GL_TEXTURE_GATHER:GLenum = 0x82A2
const GL_TEXTURE_GATHER_SHADOW:GLenum = 0x82A3
const GL_SHADER_IMAGE_LOAD:GLenum = 0x82A4
const GL_SHADER_IMAGE_STORE:GLenum = 0x82A5
const GL_SHADER_IMAGE_ATOMIC:GLenum = 0x82A6
const GL_IMAGE_TEXEL_SIZE:GLenum = 0x82A7
const GL_IMAGE_COMPATIBILITY_CLASS:GLenum = 0x82A8
const GL_IMAGE_PIXEL_FORMAT:GLenum = 0x82A9
const GL_IMAGE_PIXEL_TYPE:GLenum = 0x82AA
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST:GLenum = 0x82AC
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST:GLenum = 0x82AD
const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE:GLenum = 0x82AE
const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE:GLenum = 0x82AF
const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH:GLenum = 0x82B1
const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT:GLenum = 0x82B2
const GL_TEXTURE_COMPRESSED_BLOCK_SIZE:GLenum = 0x82B3
const GL_CLEAR_BUFFER:GLenum = 0x82B4
const GL_TEXTURE_VIEW:GLenum = 0x82B5
const GL_VIEW_COMPATIBILITY_CLASS:GLenum = 0x82B6
const GL_FULL_SUPPORT:GLenum = 0x82B7
const GL_CAVEAT_SUPPORT:GLenum = 0x82B8
const GL_IMAGE_CLASS_4_X_32:GLenum = 0x82B9
const GL_IMAGE_CLASS_2_X_32:GLenum = 0x82BA
const GL_IMAGE_CLASS_1_X_32:GLenum = 0x82BB
const GL_IMAGE_CLASS_4_X_16:GLenum = 0x82BC
const GL_IMAGE_CLASS_2_X_16:GLenum = 0x82BD
const GL_IMAGE_CLASS_1_X_16:GLenum = 0x82BE
const GL_IMAGE_CLASS_4_X_8:GLenum = 0x82BF
const GL_IMAGE_CLASS_2_X_8:GLenum = 0x82C0
const GL_IMAGE_CLASS_1_X_8:GLenum = 0x82C1
const GL_IMAGE_CLASS_11_11_10:GLenum = 0x82C2
const GL_IMAGE_CLASS_10_10_10_2:GLenum = 0x82C3
const GL_VIEW_CLASS_128_BITS:GLenum = 0x82C4
const GL_VIEW_CLASS_96_BITS:GLenum = 0x82C5
const GL_VIEW_CLASS_64_BITS:GLenum = 0x82C6
const GL_VIEW_CLASS_48_BITS:GLenum = 0x82C7
const GL_VIEW_CLASS_32_BITS:GLenum = 0x82C8
const GL_VIEW_CLASS_24_BITS:GLenum = 0x82C9
const GL_VIEW_CLASS_16_BITS:GLenum = 0x82CA
const GL_VIEW_CLASS_8_BITS:GLenum = 0x82CB
const GL_VIEW_CLASS_S3TC_DXT1_RGB:GLenum = 0x82CC
const GL_VIEW_CLASS_S3TC_DXT1_RGBA:GLenum = 0x82CD
const GL_VIEW_CLASS_S3TC_DXT3_RGBA:GLenum = 0x82CE
const GL_VIEW_CLASS_S3TC_DXT5_RGBA:GLenum = 0x82CF
const GL_VIEW_CLASS_RGTC1_RED:GLenum = 0x82D0
const GL_VIEW_CLASS_RGTC2_RG:GLenum = 0x82D1
const GL_VIEW_CLASS_BPTC_UNORM:GLenum = 0x82D2
const GL_VIEW_CLASS_BPTC_FLOAT:GLenum = 0x82D3
const GL_VERTEX_ATTRIB_BINDING:GLenum = 0x82D4
const GL_VERTEX_ATTRIB_RELATIVE_OFFSET:GLenum = 0x82D5
const GL_VERTEX_BINDING_DIVISOR:GLenum = 0x82D6
const GL_VERTEX_BINDING_OFFSET:GLenum = 0x82D7
const GL_VERTEX_BINDING_STRIDE:GLenum = 0x82D8
const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET:GLenum = 0x82D9
const GL_MAX_VERTEX_ATTRIB_BINDINGS:GLenum = 0x82DA
const GL_TEXTURE_VIEW_MIN_LEVEL:GLenum = 0x82DB
const GL_TEXTURE_VIEW_NUM_LEVELS:GLenum = 0x82DC
const GL_TEXTURE_VIEW_MIN_LAYER:GLenum = 0x82DD
const GL_TEXTURE_VIEW_NUM_LAYERS:GLenum = 0x82DE
const GL_TEXTURE_IMMUTABLE_LEVELS:GLenum = 0x82DF
const GL_BUFFER:GLenum = 0x82E0
const GL_SHADER:GLenum = 0x82E1
const GL_PROGRAM:GLenum = 0x82E2
const GL_QUERY:GLenum = 0x82E3
const GL_PROGRAM_PIPELINE:GLenum = 0x82E4
const GL_MAX_VERTEX_ATTRIB_STRIDE:GLenum = 0x82E5
const GL_SAMPLER:GLenum = 0x82E6
const GL_DISPLAY_LIST:GLenum = 0x82E7
const GL_MAX_LABEL_LENGTH:GLenum = 0x82E8
const GL_NUM_SHADING_LANGUAGE_VERSIONS:GLenum = 0x82E9
const GL_QUERY_TARGET:GLenum = 0x82EA
const GL_MAX_CULL_DISTANCES:GLenum = 0x82F9
const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES:GLenum = 0x82FA
const GL_CONTEXT_RELEASE_BEHAVIOR:GLenum = 0x82FB
const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH:GLenum = 0x82FC
const GL_UNSIGNED_BYTE_2_3_3_REV:GLenum = 0x8362
const GL_UNSIGNED_SHORT_5_6_5:GLenum = 0x8363
const GL_UNSIGNED_SHORT_5_6_5_REV:GLenum = 0x8364
const GL_UNSIGNED_SHORT_4_4_4_4_REV:GLenum = 0x8365
const GL_UNSIGNED_SHORT_1_5_5_5_REV:GLenum = 0x8366
const GL_UNSIGNED_INT_8_8_8_8_REV:GLenum = 0x8367
const GL_UNSIGNED_INT_2_10_10_10_REV:GLenum = 0x8368
const GL_MIRRORED_REPEAT:GLenum = 0x8370
const GL_FOG_COORDINATE_SOURCE:GLenum = 0x8450
const GL_FOG_COORD_SRC:GLenum = 0x8450
const GL_FOG_COORDINATE:GLenum = 0x8451
const GL_FOG_COORD:GLenum = 0x8451
const GL_FRAGMENT_DEPTH:GLenum = 0x8452
const GL_CURRENT_FOG_COORDINATE:GLenum = 0x8453
const GL_CURRENT_FOG_COORD:GLenum = 0x8453
const GL_FOG_COORDINATE_ARRAY_TYPE:GLenum = 0x8454
const GL_FOG_COORD_ARRAY_TYPE:GLenum = 0x8454
const GL_FOG_COORDINATE_ARRAY_STRIDE:GLenum = 0x8455
const GL_FOG_COORD_ARRAY_STRIDE:GLenum = 0x8455
const GL_FOG_COORDINATE_ARRAY_POINTER:GLenum = 0x8456
const GL_FOG_COORD_ARRAY_POINTER:GLenum = 0x8456
const GL_FOG_COORDINATE_ARRAY:GLenum = 0x8457
const GL_FOG_COORD_ARRAY:GLenum = 0x8457
const GL_COLOR_SUM:GLenum = 0x8458
const GL_CURRENT_SECONDARY_COLOR:GLenum = 0x8459
const GL_SECONDARY_COLOR_ARRAY_SIZE:GLenum = 0x845A
const GL_SECONDARY_COLOR_ARRAY_TYPE:GLenum = 0x845B
const GL_SECONDARY_COLOR_ARRAY_STRIDE:GLenum = 0x845C
const GL_SECONDARY_COLOR_ARRAY_POINTER:GLenum = 0x845D
const GL_SECONDARY_COLOR_ARRAY:GLenum = 0x845E
const GL_CURRENT_RASTER_SECONDARY_COLOR:GLenum = 0x845F
const GL_ALIASED_POINT_SIZE_RANGE:GLenum = 0x846D
const GL_ALIASED_LINE_WIDTH_RANGE:GLenum = 0x846E
const GL_TEXTURE0:GLenum = 0x84C0
const GL_TEXTURE1:GLenum = 0x84C1
const GL_TEXTURE2:GLenum = 0x84C2
const GL_TEXTURE3:GLenum = 0x84C3
const GL_TEXTURE4:GLenum = 0x84C4
const GL_TEXTURE5:GLenum = 0x84C5
const GL_TEXTURE6:GLenum = 0x84C6
const GL_TEXTURE7:GLenum = 0x84C7
const GL_TEXTURE8:GLenum = 0x84C8
const GL_TEXTURE9:GLenum = 0x84C9
const GL_TEXTURE10:GLenum = 0x84CA
const GL_TEXTURE11:GLenum = 0x84CB
const GL_TEXTURE12:GLenum = 0x84CC
const GL_TEXTURE13:GLenum = 0x84CD
const GL_TEXTURE14:GLenum = 0x84CE
const GL_TEXTURE15:GLenum = 0x84CF
const GL_TEXTURE16:GLenum = 0x84D0
const GL_TEXTURE17:GLenum = 0x84D1
const GL_TEXTURE18:GLenum = 0x84D2
const GL_TEXTURE19:GLenum = 0x84D3
const GL_TEXTURE20:GLenum = 0x84D4
const GL_TEXTURE21:GLenum = 0x84D5
const GL_TEXTURE22:GLenum = 0x84D6
const GL_TEXTURE23:GLenum = 0x84D7
const GL_TEXTURE24:GLenum = 0x84D8
const GL_TEXTURE25:GLenum = 0x84D9
const GL_TEXTURE26:GLenum = 0x84DA
const GL_TEXTURE27:GLenum = 0x84DB
const GL_TEXTURE28:GLenum = 0x84DC
const GL_TEXTURE29:GLenum = 0x84DD
const GL_TEXTURE30:GLenum = 0x84DE
const GL_TEXTURE31:GLenum = 0x84DF
const GL_ACTIVE_TEXTURE:GLenum = 0x84E0
const GL_CLIENT_ACTIVE_TEXTURE:GLenum = 0x84E1
const GL_MAX_TEXTURE_UNITS:GLenum = 0x84E2
const GL_TRANSPOSE_MODELVIEW_MATRIX:GLenum = 0x84E3
const GL_TRANSPOSE_PROJECTION_MATRIX:GLenum = 0x84E4
const GL_TRANSPOSE_TEXTURE_MATRIX:GLenum = 0x84E5
const GL_TRANSPOSE_COLOR_MATRIX:GLenum = 0x84E6
const GL_SUBTRACT:GLenum = 0x84E7
const GL_MAX_RENDERBUFFER_SIZE:GLenum = 0x84E8
const GL_COMPRESSED_ALPHA:GLenum = 0x84E9
const GL_COMPRESSED_LUMINANCE:GLenum = 0x84EA
const GL_COMPRESSED_LUMINANCE_ALPHA:GLenum = 0x84EB
const GL_COMPRESSED_INTENSITY:GLenum = 0x84EC
const GL_COMPRESSED_RGB:GLenum = 0x84ED
const GL_COMPRESSED_RGBA:GLenum = 0x84EE
const GL_TEXTURE_COMPRESSION_HINT:GLenum = 0x84EF
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER:GLenum = 0x84F0
const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER:GLenum = 0x84F1
const GL_TEXTURE_RECTANGLE:GLenum = 0x84F5
const GL_TEXTURE_BINDING_RECTANGLE:GLenum = 0x84F6
const GL_PROXY_TEXTURE_RECTANGLE:GLenum = 0x84F7
const GL_MAX_RECTANGLE_TEXTURE_SIZE:GLenum = 0x84F8
const GL_DEPTH_STENCIL:GLenum = 0x84F9
const GL_UNSIGNED_INT_24_8:GLenum = 0x84FA
const GL_MAX_TEXTURE_LOD_BIAS:GLenum = 0x84FD
const GL_TEXTURE_FILTER_CONTROL:GLenum = 0x8500
const GL_TEXTURE_LOD_BIAS:GLenum = 0x8501
const GL_INCR_WRAP:GLenum = 0x8507
const GL_DECR_WRAP:GLenum = 0x8508
const GL_NORMAL_MAP:GLenum = 0x8511
const GL_REFLECTION_MAP:GLenum = 0x8512
const GL_TEXTURE_CUBE_MAP:GLenum = 0x8513
const GL_TEXTURE_BINDING_CUBE_MAP:GLenum = 0x8514
const GL_TEXTURE_CUBE_MAP_POSITIVE_X:GLenum = 0x8515
const GL_TEXTURE_CUBE_MAP_NEGATIVE_X:GLenum = 0x8516
const GL_TEXTURE_CUBE_MAP_POSITIVE_Y:GLenum = 0x8517
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y:GLenum = 0x8518
const GL_TEXTURE_CUBE_MAP_POSITIVE_Z:GLenum = 0x8519
const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z:GLenum = 0x851A
const GL_PROXY_TEXTURE_CUBE_MAP:GLenum = 0x851B
const GL_MAX_CUBE_MAP_TEXTURE_SIZE:GLenum = 0x851C
const GL_COMBINE:GLenum = 0x8570
const GL_COMBINE_RGB:GLenum = 0x8571
const GL_COMBINE_ALPHA:GLenum = 0x8572
const GL_RGB_SCALE:GLenum = 0x8573
const GL_ADD_SIGNED:GLenum = 0x8574
const GL_INTERPOLATE:GLenum = 0x8575
const GL_CONSTANT:GLenum = 0x8576
const GL_PRIMARY_COLOR:GLenum = 0x8577
const GL_PREVIOUS:GLenum = 0x8578
const GL_SOURCE0_RGB:GLenum = 0x8580
const GL_SRC0_RGB:GLenum = 0x8580
const GL_SOURCE1_RGB:GLenum = 0x8581
const GL_SRC1_RGB:GLenum = 0x8581
const GL_SOURCE2_RGB:GLenum = 0x8582
const GL_SRC2_RGB:GLenum = 0x8582
const GL_SOURCE0_ALPHA:GLenum = 0x8588
const GL_SRC0_ALPHA:GLenum = 0x8588
const GL_SOURCE1_ALPHA:GLenum = 0x8589
const GL_SRC1_ALPHA:GLenum = 0x8589
const GL_SOURCE2_ALPHA:GLenum = 0x858A
const GL_SRC2_ALPHA:GLenum = 0x858A
const GL_OPERAND0_RGB:GLenum = 0x8590
const GL_OPERAND1_RGB:GLenum = 0x8591
const GL_OPERAND2_RGB:GLenum = 0x8592
const GL_OPERAND0_ALPHA:GLenum = 0x8598
const GL_OPERAND1_ALPHA:GLenum = 0x8599
const GL_OPERAND2_ALPHA:GLenum = 0x859A
const GL_VERTEX_ARRAY_BINDING:GLenum = 0x85B5
const GL_VERTEX_ATTRIB_ARRAY_ENABLED:GLenum = 0x8622
const GL_VERTEX_ATTRIB_ARRAY_SIZE:GLenum = 0x8623
const GL_VERTEX_ATTRIB_ARRAY_STRIDE:GLenum = 0x8624
const GL_VERTEX_ATTRIB_ARRAY_TYPE:GLenum = 0x8625
const GL_CURRENT_VERTEX_ATTRIB:GLenum = 0x8626
const GL_VERTEX_PROGRAM_POINT_SIZE:GLenum = 0x8642
const GL_PROGRAM_POINT_SIZE:GLenum = 0x8642
const GL_VERTEX_PROGRAM_TWO_SIDE:GLenum = 0x8643
const GL_VERTEX_ATTRIB_ARRAY_POINTER:GLenum = 0x8645
const GL_DEPTH_CLAMP:GLenum = 0x864F
const GL_TEXTURE_COMPRESSED_IMAGE_SIZE:GLenum = 0x86A0
const GL_TEXTURE_COMPRESSED:GLenum = 0x86A1
const GL_NUM_COMPRESSED_TEXTURE_FORMATS:GLenum = 0x86A2
const GL_COMPRESSED_TEXTURE_FORMATS:GLenum = 0x86A3
const GL_DOT3_RGB:GLenum = 0x86AE
const GL_DOT3_RGBA:GLenum = 0x86AF
const GL_PROGRAM_BINARY_LENGTH:GLenum = 0x8741
const GL_MIRROR_CLAMP_TO_EDGE:GLenum = 0x8743
const GL_VERTEX_ATTRIB_ARRAY_LONG:GLenum = 0x874E
const GL_BUFFER_SIZE:GLenum = 0x8764
const GL_BUFFER_USAGE:GLenum = 0x8765
const GL_NUM_PROGRAM_BINARY_FORMATS:GLenum = 0x87FE
const GL_PROGRAM_BINARY_FORMATS:GLenum = 0x87FF
const GL_STENCIL_BACK_FUNC:GLenum = 0x8800
const GL_STENCIL_BACK_FAIL:GLenum = 0x8801
const GL_STENCIL_BACK_PASS_DEPTH_FAIL:GLenum = 0x8802
const GL_STENCIL_BACK_PASS_DEPTH_PASS:GLenum = 0x8803
const GL_RGBA32F:GLenum = 0x8814
const GL_RGB32F:GLenum = 0x8815
const GL_RGBA16F:GLenum = 0x881A
const GL_RGB16F:GLenum = 0x881B
const GL_MAX_DRAW_BUFFERS:GLenum = 0x8824
const GL_DRAW_BUFFER0:GLenum = 0x8825
const GL_DRAW_BUFFER1:GLenum = 0x8826
const GL_DRAW_BUFFER2:GLenum = 0x8827
const GL_DRAW_BUFFER3:GLenum = 0x8828
const GL_DRAW_BUFFER4:GLenum = 0x8829
const GL_DRAW_BUFFER5:GLenum = 0x882A
const GL_DRAW_BUFFER6:GLenum = 0x882B
const GL_DRAW_BUFFER7:GLenum = 0x882C
const GL_DRAW_BUFFER8:GLenum = 0x882D
const GL_DRAW_BUFFER9:GLenum = 0x882E
const GL_DRAW_BUFFER10:GLenum = 0x882F
const GL_DRAW_BUFFER11:GLenum = 0x8830
const GL_DRAW_BUFFER12:GLenum = 0x8831
const GL_DRAW_BUFFER13:GLenum = 0x8832
const GL_DRAW_BUFFER14:GLenum = 0x8833
const GL_DRAW_BUFFER15:GLenum = 0x8834
const GL_BLEND_EQUATION_ALPHA:GLenum = 0x883D
const GL_TEXTURE_DEPTH_SIZE:GLenum = 0x884A
const GL_DEPTH_TEXTURE_MODE:GLenum = 0x884B
const GL_TEXTURE_COMPARE_MODE:GLenum = 0x884C
const GL_TEXTURE_COMPARE_FUNC:GLenum = 0x884D
const GL_COMPARE_R_TO_TEXTURE:GLenum = 0x884E
const GL_COMPARE_REF_TO_TEXTURE:GLenum = 0x884E
const GL_TEXTURE_CUBE_MAP_SEAMLESS:GLenum = 0x884F
const GL_POINT_SPRITE:GLenum = 0x8861
const GL_COORD_REPLACE:GLenum = 0x8862
const GL_QUERY_COUNTER_BITS:GLenum = 0x8864
const GL_CURRENT_QUERY:GLenum = 0x8865
const GL_QUERY_RESULT:GLenum = 0x8866
const GL_QUERY_RESULT_AVAILABLE:GLenum = 0x8867
const GL_MAX_VERTEX_ATTRIBS:GLenum = 0x8869
const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED:GLenum = 0x886A
const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS:GLenum = 0x886C
const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS:GLenum = 0x886D
const GL_MAX_TEXTURE_COORDS:GLenum = 0x8871
const GL_MAX_TEXTURE_IMAGE_UNITS:GLenum = 0x8872
const GL_GEOMETRY_SHADER_INVOCATIONS:GLenum = 0x887F
const GL_ARRAY_BUFFER:GLenum = 0x8892
const GL_ELEMENT_ARRAY_BUFFER:GLenum = 0x8893
const GL_ARRAY_BUFFER_BINDING:GLenum = 0x8894
const GL_ELEMENT_ARRAY_BUFFER_BINDING:GLenum = 0x8895
const GL_VERTEX_ARRAY_BUFFER_BINDING:GLenum = 0x8896
const GL_NORMAL_ARRAY_BUFFER_BINDING:GLenum = 0x8897
const GL_COLOR_ARRAY_BUFFER_BINDING:GLenum = 0x8898
const GL_INDEX_ARRAY_BUFFER_BINDING:GLenum = 0x8899
const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING:GLenum = 0x889A
const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING:GLenum = 0x889B
const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING:GLenum = 0x889C
const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING:GLenum = 0x889D
const GL_FOG_COORD_ARRAY_BUFFER_BINDING:GLenum = 0x889D
const GL_WEIGHT_ARRAY_BUFFER_BINDING:GLenum = 0x889E
const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:GLenum = 0x889F
const GL_READ_ONLY:GLenum = 0x88B8
const GL_WRITE_ONLY:GLenum = 0x88B9
const GL_READ_WRITE:GLenum = 0x88BA
const GL_BUFFER_ACCESS:GLenum = 0x88BB
const GL_BUFFER_MAPPED:GLenum = 0x88BC
const GL_BUFFER_MAP_POINTER:GLenum = 0x88BD
const GL_TIME_ELAPSED:GLenum = 0x88BF
const GL_STREAM_DRAW:GLenum = 0x88E0
const GL_STREAM_READ:GLenum = 0x88E1
const GL_STREAM_COPY:GLenum = 0x88E2
const GL_STATIC_DRAW:GLenum = 0x88E4
const GL_STATIC_READ:GLenum = 0x88E5
const GL_STATIC_COPY:GLenum = 0x88E6
const GL_DYNAMIC_DRAW:GLenum = 0x88E8
const GL_DYNAMIC_READ:GLenum = 0x88E9
const GL_DYNAMIC_COPY:GLenum = 0x88EA
const GL_PIXEL_PACK_BUFFER:GLenum = 0x88EB
const GL_PIXEL_UNPACK_BUFFER:GLenum = 0x88EC
const GL_PIXEL_PACK_BUFFER_BINDING:GLenum = 0x88ED
const GL_PIXEL_UNPACK_BUFFER_BINDING:GLenum = 0x88EF
const GL_DEPTH24_STENCIL8:GLenum = 0x88F0
const GL_TEXTURE_STENCIL_SIZE:GLenum = 0x88F1
const GL_SRC1_COLOR:GLenum = 0x88F9
const GL_ONE_MINUS_SRC1_COLOR:GLenum = 0x88FA
const GL_ONE_MINUS_SRC1_ALPHA:GLenum = 0x88FB
const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS:GLenum = 0x88FC
const GL_VERTEX_ATTRIB_ARRAY_INTEGER:GLenum = 0x88FD
const GL_VERTEX_ATTRIB_ARRAY_DIVISOR:GLenum = 0x88FE
const GL_MAX_ARRAY_TEXTURE_LAYERS:GLenum = 0x88FF
const GL_MIN_PROGRAM_TEXEL_OFFSET:GLenum = 0x8904
const GL_MAX_PROGRAM_TEXEL_OFFSET:GLenum = 0x8905
const GL_SAMPLES_PASSED:GLenum = 0x8914
const GL_GEOMETRY_VERTICES_OUT:GLenum = 0x8916
const GL_GEOMETRY_INPUT_TYPE:GLenum = 0x8917
const GL_GEOMETRY_OUTPUT_TYPE:GLenum = 0x8918
const GL_SAMPLER_BINDING:GLenum = 0x8919
const GL_CLAMP_VERTEX_COLOR:GLenum = 0x891A
const GL_CLAMP_FRAGMENT_COLOR:GLenum = 0x891B
const GL_CLAMP_READ_COLOR:GLenum = 0x891C
const GL_FIXED_ONLY:GLenum = 0x891D
const GL_UNIFORM_BUFFER:GLenum = 0x8A11
const GL_UNIFORM_BUFFER_BINDING:GLenum = 0x8A28
const GL_UNIFORM_BUFFER_START:GLenum = 0x8A29
const GL_UNIFORM_BUFFER_SIZE:GLenum = 0x8A2A
const GL_MAX_VERTEX_UNIFORM_BLOCKS:GLenum = 0x8A2B
const GL_MAX_GEOMETRY_UNIFORM_BLOCKS:GLenum = 0x8A2C
const GL_MAX_FRAGMENT_UNIFORM_BLOCKS:GLenum = 0x8A2D
const GL_MAX_COMBINED_UNIFORM_BLOCKS:GLenum = 0x8A2E
const GL_MAX_UNIFORM_BUFFER_BINDINGS:GLenum = 0x8A2F
const GL_MAX_UNIFORM_BLOCK_SIZE:GLenum = 0x8A30
const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:GLenum = 0x8A31
const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS:GLenum = 0x8A32
const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:GLenum = 0x8A33
const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT:GLenum = 0x8A34
const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH:GLenum = 0x8A35
const GL_ACTIVE_UNIFORM_BLOCKS:GLenum = 0x8A36
const GL_UNIFORM_TYPE:GLenum = 0x8A37
const GL_UNIFORM_SIZE:GLenum = 0x8A38
const GL_UNIFORM_NAME_LENGTH:GLenum = 0x8A39
const GL_UNIFORM_BLOCK_INDEX:GLenum = 0x8A3A
const GL_UNIFORM_OFFSET:GLenum = 0x8A3B
const GL_UNIFORM_ARRAY_STRIDE:GLenum = 0x8A3C
const GL_UNIFORM_MATRIX_STRIDE:GLenum = 0x8A3D
const GL_UNIFORM_IS_ROW_MAJOR:GLenum = 0x8A3E
const GL_UNIFORM_BLOCK_BINDING:GLenum = 0x8A3F
const GL_UNIFORM_BLOCK_DATA_SIZE:GLenum = 0x8A40
const GL_UNIFORM_BLOCK_NAME_LENGTH:GLenum = 0x8A41
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS:GLenum = 0x8A42
const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:GLenum = 0x8A43
const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:GLenum = 0x8A44
const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER:GLenum = 0x8A45
const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:GLenum = 0x8A46
const GL_FRAGMENT_SHADER:GLenum = 0x8B30
const GL_VERTEX_SHADER:GLenum = 0x8B31
const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS:GLenum = 0x8B49
const GL_MAX_VERTEX_UNIFORM_COMPONENTS:GLenum = 0x8B4A
const GL_MAX_VARYING_FLOATS:GLenum = 0x8B4B
const GL_MAX_VARYING_COMPONENTS:GLenum = 0x8B4B
const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS:GLenum = 0x8B4C
const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS:GLenum = 0x8B4D
const GL_SHADER_TYPE:GLenum = 0x8B4F
const GL_FLOAT_VEC2:GLenum = 0x8B50
const GL_FLOAT_VEC3:GLenum = 0x8B51
const GL_FLOAT_VEC4:GLenum = 0x8B52
const GL_INT_VEC2:GLenum = 0x8B53
const GL_INT_VEC3:GLenum = 0x8B54
const GL_INT_VEC4:GLenum = 0x8B55
const GL_BOOL:GLenum = 0x8B56
const GL_BOOL_VEC2:GLenum = 0x8B57
const GL_BOOL_VEC3:GLenum = 0x8B58
const GL_BOOL_VEC4:GLenum = 0x8B59
const GL_FLOAT_MAT2:GLenum = 0x8B5A
const GL_FLOAT_MAT3:GLenum = 0x8B5B
const GL_FLOAT_MAT4:GLenum = 0x8B5C
const GL_SAMPLER_1D:GLenum = 0x8B5D
const GL_SAMPLER_2D:GLenum = 0x8B5E
const GL_SAMPLER_3D:GLenum = 0x8B5F
const GL_SAMPLER_CUBE:GLenum = 0x8B60
const GL_SAMPLER_1D_SHADOW:GLenum = 0x8B61
const GL_SAMPLER_2D_SHADOW:GLenum = 0x8B62
const GL_SAMPLER_2D_RECT:GLenum = 0x8B63
const GL_SAMPLER_2D_RECT_SHADOW:GLenum = 0x8B64
const GL_FLOAT_MAT2x3:GLenum = 0x8B65
const GL_FLOAT_MAT2x4:GLenum = 0x8B66
const GL_FLOAT_MAT3x2:GLenum = 0x8B67
const GL_FLOAT_MAT3x4:GLenum = 0x8B68
const GL_FLOAT_MAT4x2:GLenum = 0x8B69
const GL_FLOAT_MAT4x3:GLenum = 0x8B6A
const GL_DELETE_STATUS:GLenum = 0x8B80
const GL_COMPILE_STATUS:GLenum = 0x8B81
const GL_LINK_STATUS:GLenum = 0x8B82
const GL_VALIDATE_STATUS:GLenum = 0x8B83
const GL_INFO_LOG_LENGTH:GLenum = 0x8B84
const GL_ATTACHED_SHADERS:GLenum = 0x8B85
const GL_ACTIVE_UNIFORMS:GLenum = 0x8B86
const GL_ACTIVE_UNIFORM_MAX_LENGTH:GLenum = 0x8B87
const GL_SHADER_SOURCE_LENGTH:GLenum = 0x8B88
const GL_ACTIVE_ATTRIBUTES:GLenum = 0x8B89
const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH:GLenum = 0x8B8A
const GL_FRAGMENT_SHADER_DERIVATIVE_HINT:GLenum = 0x8B8B
const GL_SHADING_LANGUAGE_VERSION:GLenum = 0x8B8C
const GL_CURRENT_PROGRAM:GLenum = 0x8B8D
const GL_IMPLEMENTATION_COLOR_READ_TYPE:GLenum = 0x8B9A
const GL_IMPLEMENTATION_COLOR_READ_FORMAT:GLenum = 0x8B9B
const GL_TEXTURE_RED_TYPE:GLenum = 0x8C10
const GL_TEXTURE_GREEN_TYPE:GLenum = 0x8C11
const GL_TEXTURE_BLUE_TYPE:GLenum = 0x8C12
const GL_TEXTURE_ALPHA_TYPE:GLenum = 0x8C13
const GL_TEXTURE_LUMINANCE_TYPE:GLenum = 0x8C14
const GL_TEXTURE_INTENSITY_TYPE:GLenum = 0x8C15
const GL_TEXTURE_DEPTH_TYPE:GLenum = 0x8C16
const GL_UNSIGNED_NORMALIZED:GLenum = 0x8C17
const GL_TEXTURE_1D_ARRAY:GLenum = 0x8C18
const GL_PROXY_TEXTURE_1D_ARRAY:GLenum = 0x8C19
const GL_TEXTURE_2D_ARRAY:GLenum = 0x8C1A
const GL_PROXY_TEXTURE_2D_ARRAY:GLenum = 0x8C1B
const GL_TEXTURE_BINDING_1D_ARRAY:GLenum = 0x8C1C
const GL_TEXTURE_BINDING_2D_ARRAY:GLenum = 0x8C1D
const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS:GLenum = 0x8C29
const GL_TEXTURE_BUFFER:GLenum = 0x8C2A
# Equivalent to GL_TEXTURE_BUFFER_ARB query, but named more consistently
const GL_TEXTURE_BUFFER_BINDING:GLenum = 0x8C2A
const GL_MAX_TEXTURE_BUFFER_SIZE:GLenum = 0x8C2B
const GL_TEXTURE_BINDING_BUFFER:GLenum = 0x8C2C
const GL_TEXTURE_BUFFER_DATA_STORE_BINDING:GLenum = 0x8C2D
const GL_ANY_SAMPLES_PASSED:GLenum = 0x8C2F
const GL_SAMPLE_SHADING:GLenum = 0x8C36
const GL_MIN_SAMPLE_SHADING_VALUE:GLenum = 0x8C37
const GL_R11F_G11F_B10F:GLenum = 0x8C3A
const GL_UNSIGNED_INT_10F_11F_11F_REV:GLenum = 0x8C3B
const GL_RGB9_E5:GLenum = 0x8C3D
const GL_UNSIGNED_INT_5_9_9_9_REV:GLenum = 0x8C3E
const GL_TEXTURE_SHARED_SIZE:GLenum = 0x8C3F
const GL_SRGB:GLenum = 0x8C40
const GL_SRGB8:GLenum = 0x8C41
const GL_SRGB_ALPHA:GLenum = 0x8C42
const GL_SRGB8_ALPHA8:GLenum = 0x8C43
const GL_SLUMINANCE_ALPHA:GLenum = 0x8C44
const GL_SLUMINANCE8_ALPHA8:GLenum = 0x8C45
const GL_SLUMINANCE:GLenum = 0x8C46
const GL_SLUMINANCE8:GLenum = 0x8C47
const GL_COMPRESSED_SRGB:GLenum = 0x8C48
const GL_COMPRESSED_SRGB_ALPHA:GLenum = 0x8C49
const GL_COMPRESSED_SLUMINANCE:GLenum = 0x8C4A
const GL_COMPRESSED_SLUMINANCE_ALPHA:GLenum = 0x8C4B
const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH:GLenum = 0x8C76
const GL_TRANSFORM_FEEDBACK_BUFFER_MODE:GLenum = 0x8C7F
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:GLenum = 0x8C80
const GL_TRANSFORM_FEEDBACK_VARYINGS:GLenum = 0x8C83
const GL_TRANSFORM_FEEDBACK_BUFFER_START:GLenum = 0x8C84
const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE:GLenum = 0x8C85
const GL_PRIMITIVES_GENERATED:GLenum = 0x8C87
const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:GLenum = 0x8C88
const GL_RASTERIZER_DISCARD:GLenum = 0x8C89
const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:GLenum = 0x8C8A
const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:GLenum = 0x8C8B
const GL_INTERLEAVED_ATTRIBS:GLenum = 0x8C8C
const GL_SEPARATE_ATTRIBS:GLenum = 0x8C8D
const GL_TRANSFORM_FEEDBACK_BUFFER:GLenum = 0x8C8E
const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING:GLenum = 0x8C8F
const GL_POINT_SPRITE_COORD_ORIGIN:GLenum = 0x8CA0
const GL_LOWER_LEFT:GLenum = 0x8CA1
const GL_UPPER_LEFT:GLenum = 0x8CA2
const GL_STENCIL_BACK_REF:GLenum = 0x8CA3
const GL_STENCIL_BACK_VALUE_MASK:GLenum = 0x8CA4
const GL_STENCIL_BACK_WRITEMASK:GLenum = 0x8CA5
const GL_DRAW_FRAMEBUFFER_BINDING:GLenum = 0x8CA6
const GL_FRAMEBUFFER_BINDING:GLenum = 0x8CA6
const GL_RENDERBUFFER_BINDING:GLenum = 0x8CA7
const GL_READ_FRAMEBUFFER:GLenum = 0x8CA8
const GL_DRAW_FRAMEBUFFER:GLenum = 0x8CA9
const GL_READ_FRAMEBUFFER_BINDING:GLenum = 0x8CAA
const GL_RENDERBUFFER_SAMPLES:GLenum = 0x8CAB
const GL_DEPTH_COMPONENT32F:GLenum = 0x8CAC
const GL_DEPTH32F_STENCIL8:GLenum = 0x8CAD
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:GLenum = 0x8CD0
const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:GLenum = 0x8CD1
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:GLenum = 0x8CD2
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:GLenum = 0x8CD3
const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:GLenum = 0x8CD4
const GL_FRAMEBUFFER_COMPLETE:GLenum = 0x8CD5
const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:GLenum = 0x8CD6
const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:GLenum = 0x8CD7
const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:GLenum = 0x8CDB
const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:GLenum = 0x8CDC
const GL_FRAMEBUFFER_UNSUPPORTED:GLenum = 0x8CDD
const GL_MAX_COLOR_ATTACHMENTS:GLenum = 0x8CDF
const GL_COLOR_ATTACHMENT0:GLenum = 0x8CE0
const GL_COLOR_ATTACHMENT1:GLenum = 0x8CE1
const GL_COLOR_ATTACHMENT2:GLenum = 0x8CE2
const GL_COLOR_ATTACHMENT3:GLenum = 0x8CE3
const GL_COLOR_ATTACHMENT4:GLenum = 0x8CE4
const GL_COLOR_ATTACHMENT5:GLenum = 0x8CE5
const GL_COLOR_ATTACHMENT6:GLenum = 0x8CE6
const GL_COLOR_ATTACHMENT7:GLenum = 0x8CE7
const GL_COLOR_ATTACHMENT8:GLenum = 0x8CE8
const GL_COLOR_ATTACHMENT9:GLenum = 0x8CE9
const GL_COLOR_ATTACHMENT10:GLenum = 0x8CEA
const GL_COLOR_ATTACHMENT11:GLenum = 0x8CEB
const GL_COLOR_ATTACHMENT12:GLenum = 0x8CEC
const GL_COLOR_ATTACHMENT13:GLenum = 0x8CED
const GL_COLOR_ATTACHMENT14:GLenum = 0x8CEE
const GL_COLOR_ATTACHMENT15:GLenum = 0x8CEF
const GL_COLOR_ATTACHMENT16:GLenum = 0x8CF0
const GL_COLOR_ATTACHMENT17:GLenum = 0x8CF1
const GL_COLOR_ATTACHMENT18:GLenum = 0x8CF2
const GL_COLOR_ATTACHMENT19:GLenum = 0x8CF3
const GL_COLOR_ATTACHMENT20:GLenum = 0x8CF4
const GL_COLOR_ATTACHMENT21:GLenum = 0x8CF5
const GL_COLOR_ATTACHMENT22:GLenum = 0x8CF6
const GL_COLOR_ATTACHMENT23:GLenum = 0x8CF7
const GL_COLOR_ATTACHMENT24:GLenum = 0x8CF8
const GL_COLOR_ATTACHMENT25:GLenum = 0x8CF9
const GL_COLOR_ATTACHMENT26:GLenum = 0x8CFA
const GL_COLOR_ATTACHMENT27:GLenum = 0x8CFB
const GL_COLOR_ATTACHMENT28:GLenum = 0x8CFC
const GL_COLOR_ATTACHMENT29:GLenum = 0x8CFD
const GL_COLOR_ATTACHMENT30:GLenum = 0x8CFE
const GL_COLOR_ATTACHMENT31:GLenum = 0x8CFF
const GL_DEPTH_ATTACHMENT:GLenum = 0x8D00
const GL_STENCIL_ATTACHMENT:GLenum = 0x8D20
const GL_FRAMEBUFFER:GLenum = 0x8D40
const GL_RENDERBUFFER:GLenum = 0x8D41
const GL_RENDERBUFFER_WIDTH:GLenum = 0x8D42
const GL_RENDERBUFFER_HEIGHT:GLenum = 0x8D43
const GL_RENDERBUFFER_INTERNAL_FORMAT:GLenum = 0x8D44
const GL_STENCIL_INDEX1:GLenum = 0x8D46
const GL_STENCIL_INDEX4:GLenum = 0x8D47
const GL_STENCIL_INDEX8:GLenum = 0x8D48
const GL_STENCIL_INDEX16:GLenum = 0x8D49
const GL_RENDERBUFFER_RED_SIZE:GLenum = 0x8D50
const GL_RENDERBUFFER_GREEN_SIZE:GLenum = 0x8D51
const GL_RENDERBUFFER_BLUE_SIZE:GLenum = 0x8D52
const GL_RENDERBUFFER_ALPHA_SIZE:GLenum = 0x8D53
const GL_RENDERBUFFER_DEPTH_SIZE:GLenum = 0x8D54
const GL_RENDERBUFFER_STENCIL_SIZE:GLenum = 0x8D55
const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:GLenum = 0x8D56
const GL_MAX_SAMPLES:GLenum = 0x8D57
const GL_RGB565:GLenum = 0x8D62
const GL_PRIMITIVE_RESTART_FIXED_INDEX:GLenum = 0x8D69
const GL_ANY_SAMPLES_PASSED_CONSERVATIVE:GLenum = 0x8D6A
const GL_MAX_ELEMENT_INDEX:GLenum = 0x8D6B
const GL_RGBA32UI:GLenum = 0x8D70
const GL_RGB32UI:GLenum = 0x8D71
const GL_RGBA16UI:GLenum = 0x8D76
const GL_RGB16UI:GLenum = 0x8D77
const GL_RGBA8UI:GLenum = 0x8D7C
const GL_RGB8UI:GLenum = 0x8D7D
const GL_RGBA32I:GLenum = 0x8D82
const GL_RGB32I:GLenum = 0x8D83
const GL_RGBA16I:GLenum = 0x8D88
const GL_RGB16I:GLenum = 0x8D89
const GL_RGBA8I:GLenum = 0x8D8E
const GL_RGB8I:GLenum = 0x8D8F
const GL_RED_INTEGER:GLenum = 0x8D94
const GL_GREEN_INTEGER:GLenum = 0x8D95
const GL_BLUE_INTEGER:GLenum = 0x8D96
const GL_ALPHA_INTEGER:GLenum = 0x8D97
const GL_RGB_INTEGER:GLenum = 0x8D98
const GL_RGBA_INTEGER:GLenum = 0x8D99
const GL_BGR_INTEGER:GLenum = 0x8D9A
const GL_BGRA_INTEGER:GLenum = 0x8D9B
const GL_INT_2_10_10_10_REV:GLenum = 0x8D9F
const GL_FRAMEBUFFER_ATTACHMENT_LAYERED:GLenum = 0x8DA7
const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS:GLenum = 0x8DA8
const GL_FLOAT_32_UNSIGNED_INT_24_8_REV:GLenum = 0x8DAD
const GL_FRAMEBUFFER_SRGB:GLenum = 0x8DB9
const GL_COMPRESSED_RED_RGTC1:GLenum = 0x8DBB
const GL_COMPRESSED_SIGNED_RED_RGTC1:GLenum = 0x8DBC
const GL_COMPRESSED_RG_RGTC2:GLenum = 0x8DBD
const GL_COMPRESSED_SIGNED_RG_RGTC2:GLenum = 0x8DBE
const GL_SAMPLER_1D_ARRAY:GLenum = 0x8DC0
const GL_SAMPLER_2D_ARRAY:GLenum = 0x8DC1
const GL_SAMPLER_BUFFER:GLenum = 0x8DC2
const GL_SAMPLER_1D_ARRAY_SHADOW:GLenum = 0x8DC3
const GL_SAMPLER_2D_ARRAY_SHADOW:GLenum = 0x8DC4
const GL_SAMPLER_CUBE_SHADOW:GLenum = 0x8DC5
const GL_UNSIGNED_INT_VEC2:GLenum = 0x8DC6
const GL_UNSIGNED_INT_VEC3:GLenum = 0x8DC7
const GL_UNSIGNED_INT_VEC4:GLenum = 0x8DC8
const GL_INT_SAMPLER_1D:GLenum = 0x8DC9
const GL_INT_SAMPLER_2D:GLenum = 0x8DCA
const GL_INT_SAMPLER_3D:GLenum = 0x8DCB
const GL_INT_SAMPLER_CUBE:GLenum = 0x8DCC
const GL_INT_SAMPLER_2D_RECT:GLenum = 0x8DCD
const GL_INT_SAMPLER_1D_ARRAY:GLenum = 0x8DCE
const GL_INT_SAMPLER_2D_ARRAY:GLenum = 0x8DCF
const GL_INT_SAMPLER_BUFFER:GLenum = 0x8DD0
const GL_UNSIGNED_INT_SAMPLER_1D:GLenum = 0x8DD1
const GL_UNSIGNED_INT_SAMPLER_2D:GLenum = 0x8DD2
const GL_UNSIGNED_INT_SAMPLER_3D:GLenum = 0x8DD3
const GL_UNSIGNED_INT_SAMPLER_CUBE:GLenum = 0x8DD4
const GL_UNSIGNED_INT_SAMPLER_2D_RECT:GLenum = 0x8DD5
const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY:GLenum = 0x8DD6
const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY:GLenum = 0x8DD7
const GL_UNSIGNED_INT_SAMPLER_BUFFER:GLenum = 0x8DD8
const GL_GEOMETRY_SHADER:GLenum = 0x8DD9
const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS:GLenum = 0x8DDF
const GL_MAX_GEOMETRY_OUTPUT_VERTICES:GLenum = 0x8DE0
const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS:GLenum = 0x8DE1
const GL_ACTIVE_SUBROUTINES:GLenum = 0x8DE5
const GL_ACTIVE_SUBROUTINE_UNIFORMS:GLenum = 0x8DE6
const GL_MAX_SUBROUTINES:GLenum = 0x8DE7
const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS:GLenum = 0x8DE8
const GL_LOW_FLOAT:GLenum = 0x8DF0
const GL_MEDIUM_FLOAT:GLenum = 0x8DF1
const GL_HIGH_FLOAT:GLenum = 0x8DF2
const GL_LOW_INT:GLenum = 0x8DF3
const GL_MEDIUM_INT:GLenum = 0x8DF4
const GL_HIGH_INT:GLenum = 0x8DF5
const GL_SHADER_BINARY_FORMATS:GLenum = 0x8DF8
const GL_NUM_SHADER_BINARY_FORMATS:GLenum = 0x8DF9
const GL_SHADER_COMPILER:GLenum = 0x8DFA
const GL_MAX_VERTEX_UNIFORM_VECTORS:GLenum = 0x8DFB
const GL_MAX_VARYING_VECTORS:GLenum = 0x8DFC
const GL_MAX_FRAGMENT_UNIFORM_VECTORS:GLenum = 0x8DFD
const GL_QUERY_WAIT:GLenum = 0x8E13
const GL_QUERY_NO_WAIT:GLenum = 0x8E14
const GL_QUERY_BY_REGION_WAIT:GLenum = 0x8E15
const GL_QUERY_BY_REGION_NO_WAIT:GLenum = 0x8E16
const GL_QUERY_WAIT_INVERTED:GLenum = 0x8E17
const GL_QUERY_NO_WAIT_INVERTED:GLenum = 0x8E18
const GL_QUERY_BY_REGION_WAIT_INVERTED:GLenum = 0x8E19
const GL_QUERY_BY_REGION_NO_WAIT_INVERTED:GLenum = 0x8E1A
const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS:GLenum = 0x8E1E
const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS:GLenum = 0x8E1F
const GL_TRANSFORM_FEEDBACK:GLenum = 0x8E22
const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED:GLenum = 0x8E23
const GL_TRANSFORM_FEEDBACK_PAUSED:GLenum = 0x8E23
const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE:GLenum = 0x8E24
const GL_TRANSFORM_FEEDBACK_ACTIVE:GLenum = 0x8E24
const GL_TRANSFORM_FEEDBACK_BINDING:GLenum = 0x8E25
const GL_TIMESTAMP:GLenum = 0x8E28
const GL_TEXTURE_SWIZZLE_R:GLenum = 0x8E42
const GL_TEXTURE_SWIZZLE_G:GLenum = 0x8E43
const GL_TEXTURE_SWIZZLE_B:GLenum = 0x8E44
const GL_TEXTURE_SWIZZLE_A:GLenum = 0x8E45
const GL_TEXTURE_SWIZZLE_RGBA:GLenum = 0x8E46
const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS:GLenum = 0x8E47
const GL_ACTIVE_SUBROUTINE_MAX_LENGTH:GLenum = 0x8E48
const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH:GLenum = 0x8E49
const GL_NUM_COMPATIBLE_SUBROUTINES:GLenum = 0x8E4A
const GL_COMPATIBLE_SUBROUTINES:GLenum = 0x8E4B
const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION:GLenum = 0x8E4C
const GL_FIRST_VERTEX_CONVENTION:GLenum = 0x8E4D
const GL_LAST_VERTEX_CONVENTION:GLenum = 0x8E4E
const GL_PROVOKING_VERTEX:GLenum = 0x8E4F
const GL_SAMPLE_POSITION:GLenum = 0x8E50
const GL_SAMPLE_MASK:GLenum = 0x8E51
const GL_SAMPLE_MASK_VALUE:GLenum = 0x8E52
const GL_MAX_SAMPLE_MASK_WORDS:GLenum = 0x8E59
const GL_MAX_GEOMETRY_SHADER_INVOCATIONS:GLenum = 0x8E5A
const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET:GLenum = 0x8E5B
const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET:GLenum = 0x8E5C
const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS:GLenum = 0x8E5D
const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET:GLenum = 0x8E5E
const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET:GLenum = 0x8E5F
const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS:GLenum = 0x8E70
const GL_MAX_VERTEX_STREAMS:GLenum = 0x8E71
const GL_PATCH_VERTICES:GLenum = 0x8E72
const GL_PATCH_DEFAULT_INNER_LEVEL:GLenum = 0x8E73
const GL_PATCH_DEFAULT_OUTER_LEVEL:GLenum = 0x8E74
const GL_TESS_CONTROL_OUTPUT_VERTICES:GLenum = 0x8E75
const GL_TESS_GEN_MODE:GLenum = 0x8E76
const GL_TESS_GEN_SPACING:GLenum = 0x8E77
const GL_TESS_GEN_VERTEX_ORDER:GLenum = 0x8E78
const GL_TESS_GEN_POINT_MODE:GLenum = 0x8E79
const GL_ISOLINES:GLenum = 0x8E7A
const GL_FRACTIONAL_ODD:GLenum = 0x8E7B
const GL_FRACTIONAL_EVEN:GLenum = 0x8E7C
const GL_MAX_PATCH_VERTICES:GLenum = 0x8E7D
const GL_MAX_TESS_GEN_LEVEL:GLenum = 0x8E7E
const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS:GLenum = 0x8E7F
const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS:GLenum = 0x8E80
const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS:GLenum = 0x8E81
const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS:GLenum = 0x8E82
const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS:GLenum = 0x8E83
const GL_MAX_TESS_PATCH_COMPONENTS:GLenum = 0x8E84
const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS:GLenum = 0x8E85
const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS:GLenum = 0x8E86
const GL_TESS_EVALUATION_SHADER:GLenum = 0x8E87
const GL_TESS_CONTROL_SHADER:GLenum = 0x8E88
const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS:GLenum = 0x8E89
const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS:GLenum = 0x8E8A
const GL_COMPRESSED_RGBA_BPTC_UNORM:GLenum = 0x8E8C
const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM:GLenum = 0x8E8D
const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT:GLenum = 0x8E8E
const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT:GLenum = 0x8E8F
const GL_COPY_READ_BUFFER:GLenum = 0x8F36
const GL_COPY_READ_BUFFER_BINDING:GLenum = 0x8F36
const GL_COPY_WRITE_BUFFER:GLenum = 0x8F37
const GL_COPY_WRITE_BUFFER_BINDING:GLenum = 0x8F37
const GL_MAX_IMAGE_UNITS:GLenum = 0x8F38
const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS:GLenum = 0x8F39
const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES:GLenum = 0x8F39
const GL_IMAGE_BINDING_NAME:GLenum = 0x8F3A
const GL_IMAGE_BINDING_LEVEL:GLenum = 0x8F3B
const GL_IMAGE_BINDING_LAYERED:GLenum = 0x8F3C
const GL_IMAGE_BINDING_LAYER:GLenum = 0x8F3D
const GL_IMAGE_BINDING_ACCESS:GLenum = 0x8F3E
const GL_DRAW_INDIRECT_BUFFER:GLenum = 0x8F3F
const GL_DRAW_INDIRECT_BUFFER_BINDING:GLenum = 0x8F43
const GL_DOUBLE_MAT2:GLenum = 0x8F46
const GL_DOUBLE_MAT3:GLenum = 0x8F47
const GL_DOUBLE_MAT4:GLenum = 0x8F48
const GL_DOUBLE_MAT2x3:GLenum = 0x8F49
const GL_DOUBLE_MAT2x4:GLenum = 0x8F4A
const GL_DOUBLE_MAT3x2:GLenum = 0x8F4B
const GL_DOUBLE_MAT3x4:GLenum = 0x8F4C
const GL_DOUBLE_MAT4x2:GLenum = 0x8F4D
const GL_DOUBLE_MAT4x3:GLenum = 0x8F4E
const GL_VERTEX_BINDING_BUFFER:GLenum = 0x8F4F
const GL_R8_SNORM:GLenum = 0x8F94
const GL_RG8_SNORM:GLenum = 0x8F95
const GL_RGB8_SNORM:GLenum = 0x8F96
const GL_RGBA8_SNORM:GLenum = 0x8F97
const GL_R16_SNORM:GLenum = 0x8F98
const GL_RG16_SNORM:GLenum = 0x8F99
const GL_RGB16_SNORM:GLenum = 0x8F9A
const GL_RGBA16_SNORM:GLenum = 0x8F9B
const GL_SIGNED_NORMALIZED:GLenum = 0x8F9C
const GL_PRIMITIVE_RESTART:GLenum = 0x8F9D
const GL_PRIMITIVE_RESTART_INDEX:GLenum = 0x8F9E
const GL_DOUBLE_VEC2:GLenum = 0x8FFC
const GL_DOUBLE_VEC3:GLenum = 0x8FFD
const GL_DOUBLE_VEC4:GLenum = 0x8FFE
const GL_TEXTURE_CUBE_MAP_ARRAY:GLenum = 0x9009
const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY:GLenum = 0x900A
const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY:GLenum = 0x900B
const GL_SAMPLER_CUBE_MAP_ARRAY:GLenum = 0x900C
const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW:GLenum = 0x900D
const GL_INT_SAMPLER_CUBE_MAP_ARRAY:GLenum = 0x900E
const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY:GLenum = 0x900F
const GL_IMAGE_1D:GLenum = 0x904C
const GL_IMAGE_2D:GLenum = 0x904D
const GL_IMAGE_3D:GLenum = 0x904E
const GL_IMAGE_2D_RECT:GLenum = 0x904F
const GL_IMAGE_CUBE:GLenum = 0x9050
const GL_IMAGE_BUFFER:GLenum = 0x9051
const GL_IMAGE_1D_ARRAY:GLenum = 0x9052
const GL_IMAGE_2D_ARRAY:GLenum = 0x9053
const GL_IMAGE_CUBE_MAP_ARRAY:GLenum = 0x9054
const GL_IMAGE_2D_MULTISAMPLE:GLenum = 0x9055
const GL_IMAGE_2D_MULTISAMPLE_ARRAY:GLenum = 0x9056
const GL_INT_IMAGE_1D:GLenum = 0x9057
const GL_INT_IMAGE_2D:GLenum = 0x9058
const GL_INT_IMAGE_3D:GLenum = 0x9059
const GL_INT_IMAGE_2D_RECT:GLenum = 0x905A
const GL_INT_IMAGE_CUBE:GLenum = 0x905B
const GL_INT_IMAGE_BUFFER:GLenum = 0x905C
const GL_INT_IMAGE_1D_ARRAY:GLenum = 0x905D
const GL_INT_IMAGE_2D_ARRAY:GLenum = 0x905E
const GL_INT_IMAGE_CUBE_MAP_ARRAY:GLenum = 0x905F
const GL_INT_IMAGE_2D_MULTISAMPLE:GLenum = 0x9060
const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY:GLenum = 0x9061
const GL_UNSIGNED_INT_IMAGE_1D:GLenum = 0x9062
const GL_UNSIGNED_INT_IMAGE_2D:GLenum = 0x9063
const GL_UNSIGNED_INT_IMAGE_3D:GLenum = 0x9064
const GL_UNSIGNED_INT_IMAGE_2D_RECT:GLenum = 0x9065
const GL_UNSIGNED_INT_IMAGE_CUBE:GLenum = 0x9066
const GL_UNSIGNED_INT_IMAGE_BUFFER:GLenum = 0x9067
const GL_UNSIGNED_INT_IMAGE_1D_ARRAY:GLenum = 0x9068
const GL_UNSIGNED_INT_IMAGE_2D_ARRAY:GLenum = 0x9069
const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY:GLenum = 0x906A
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE:GLenum = 0x906B
const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY:GLenum = 0x906C
const GL_MAX_IMAGE_SAMPLES:GLenum = 0x906D
const GL_IMAGE_BINDING_FORMAT:GLenum = 0x906E
const GL_RGB10_A2UI:GLenum = 0x906F
const GL_MIN_MAP_BUFFER_ALIGNMENT:GLenum = 0x90BC
const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE:GLenum = 0x90C7
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE:GLenum = 0x90C8
const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS:GLenum = 0x90C9
const GL_MAX_VERTEX_IMAGE_UNIFORMS:GLenum = 0x90CA
const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS:GLenum = 0x90CB
const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS:GLenum = 0x90CC
const GL_MAX_GEOMETRY_IMAGE_UNIFORMS:GLenum = 0x90CD
const GL_MAX_FRAGMENT_IMAGE_UNIFORMS:GLenum = 0x90CE
const GL_MAX_COMBINED_IMAGE_UNIFORMS:GLenum = 0x90CF
const GL_SHADER_STORAGE_BUFFER:GLenum = 0x90D2
const GL_SHADER_STORAGE_BUFFER_BINDING:GLenum = 0x90D3
const GL_SHADER_STORAGE_BUFFER_START:GLenum = 0x90D4
const GL_SHADER_STORAGE_BUFFER_SIZE:GLenum = 0x90D5
const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS:GLenum = 0x90D6
const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS:GLenum = 0x90D7
const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS:GLenum = 0x90D8
const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS:GLenum = 0x90D9
const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS:GLenum = 0x90DA
const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS:GLenum = 0x90DB
const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS:GLenum = 0x90DC
const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS:GLenum = 0x90DD
const GL_MAX_SHADER_STORAGE_BLOCK_SIZE:GLenum = 0x90DE
const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT:GLenum = 0x90DF
const GL_DEPTH_STENCIL_TEXTURE_MODE:GLenum = 0x90EA
const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS:GLenum = 0x90EB
const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER:GLenum = 0x90EC
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER:GLenum = 0x90ED
const GL_DISPATCH_INDIRECT_BUFFER:GLenum = 0x90EE
const GL_DISPATCH_INDIRECT_BUFFER_BINDING:GLenum = 0x90EF
const GL_TEXTURE_2D_MULTISAMPLE:GLenum = 0x9100
const GL_PROXY_TEXTURE_2D_MULTISAMPLE:GLenum = 0x9101
const GL_TEXTURE_2D_MULTISAMPLE_ARRAY:GLenum = 0x9102
const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY:GLenum = 0x9103
const GL_TEXTURE_BINDING_2D_MULTISAMPLE:GLenum = 0x9104
const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY:GLenum = 0x9105
const GL_TEXTURE_SAMPLES:GLenum = 0x9106
const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS:GLenum = 0x9107
const GL_SAMPLER_2D_MULTISAMPLE:GLenum = 0x9108
const GL_INT_SAMPLER_2D_MULTISAMPLE:GLenum = 0x9109
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE:GLenum = 0x910A
const GL_SAMPLER_2D_MULTISAMPLE_ARRAY:GLenum = 0x910B
const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:GLenum = 0x910C
const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:GLenum = 0x910D
const GL_MAX_COLOR_TEXTURE_SAMPLES:GLenum = 0x910E
const GL_MAX_DEPTH_TEXTURE_SAMPLES:GLenum = 0x910F
const GL_MAX_INTEGER_SAMPLES:GLenum = 0x9110
const GL_MAX_SERVER_WAIT_TIMEOUT:GLenum = 0x9111
const GL_OBJECT_TYPE:GLenum = 0x9112
const GL_SYNC_CONDITION:GLenum = 0x9113
const GL_SYNC_STATUS:GLenum = 0x9114
const GL_SYNC_FLAGS:GLenum = 0x9115
const GL_SYNC_FENCE:GLenum = 0x9116
const GL_SYNC_GPU_COMMANDS_COMPLETE:GLenum = 0x9117
const GL_UNSIGNALED:GLenum = 0x9118
const GL_SIGNALED:GLenum = 0x9119
const GL_ALREADY_SIGNALED:GLenum = 0x911A
const GL_TIMEOUT_EXPIRED:GLenum = 0x911B
const GL_CONDITION_SATISFIED:GLenum = 0x911C
const GL_WAIT_FAILED:GLenum = 0x911D
const GL_BUFFER_ACCESS_FLAGS:GLenum = 0x911F
const GL_BUFFER_MAP_LENGTH:GLenum = 0x9120
const GL_BUFFER_MAP_OFFSET:GLenum = 0x9121
const GL_MAX_VERTEX_OUTPUT_COMPONENTS:GLenum = 0x9122
const GL_MAX_GEOMETRY_INPUT_COMPONENTS:GLenum = 0x9123
const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS:GLenum = 0x9124
const GL_MAX_FRAGMENT_INPUT_COMPONENTS:GLenum = 0x9125
const GL_CONTEXT_PROFILE_MASK:GLenum = 0x9126
const GL_UNPACK_COMPRESSED_BLOCK_WIDTH:GLenum = 0x9127
const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT:GLenum = 0x9128
const GL_UNPACK_COMPRESSED_BLOCK_DEPTH:GLenum = 0x9129
const GL_UNPACK_COMPRESSED_BLOCK_SIZE:GLenum = 0x912A
const GL_PACK_COMPRESSED_BLOCK_WIDTH:GLenum = 0x912B
const GL_PACK_COMPRESSED_BLOCK_HEIGHT:GLenum = 0x912C
const GL_PACK_COMPRESSED_BLOCK_DEPTH:GLenum = 0x912D
const GL_PACK_COMPRESSED_BLOCK_SIZE:GLenum = 0x912E
const GL_TEXTURE_IMMUTABLE_FORMAT:GLenum = 0x912F
const GL_MAX_DEBUG_MESSAGE_LENGTH:GLenum = 0x9143
const GL_MAX_DEBUG_LOGGED_MESSAGES:GLenum = 0x9144
const GL_DEBUG_LOGGED_MESSAGES:GLenum = 0x9145
const GL_DEBUG_SEVERITY_HIGH:GLenum = 0x9146
const GL_DEBUG_SEVERITY_MEDIUM:GLenum = 0x9147
const GL_DEBUG_SEVERITY_LOW:GLenum = 0x9148
const GL_QUERY_BUFFER:GLenum = 0x9192
const GL_QUERY_BUFFER_BINDING:GLenum = 0x9193
const GL_QUERY_RESULT_NO_WAIT:GLenum = 0x9194
const GL_TEXTURE_BUFFER_OFFSET:GLenum = 0x919D
const GL_TEXTURE_BUFFER_SIZE:GLenum = 0x919E
const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT:GLenum = 0x919F
const GL_COMPUTE_SHADER:GLenum = 0x91B9
const GL_MAX_COMPUTE_UNIFORM_BLOCKS:GLenum = 0x91BB
const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS:GLenum = 0x91BC
const GL_MAX_COMPUTE_IMAGE_UNIFORMS:GLenum = 0x91BD
const GL_MAX_COMPUTE_WORK_GROUP_COUNT:GLenum = 0x91BE
const GL_MAX_COMPUTE_WORK_GROUP_SIZE:GLenum = 0x91BF
const GL_COMPRESSED_R11_EAC:GLenum = 0x9270
const GL_COMPRESSED_SIGNED_R11_EAC:GLenum = 0x9271
const GL_COMPRESSED_RG11_EAC:GLenum = 0x9272
const GL_COMPRESSED_SIGNED_RG11_EAC:GLenum = 0x9273
const GL_COMPRESSED_RGB8_ETC2:GLenum = 0x9274
const GL_COMPRESSED_SRGB8_ETC2:GLenum = 0x9275
const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:GLenum = 0x9276
const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:GLenum = 0x9277
const GL_COMPRESSED_RGBA8_ETC2_EAC:GLenum = 0x9278
const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:GLenum = 0x9279
const GL_ATOMIC_COUNTER_BUFFER:GLenum = 0x92C0
const GL_ATOMIC_COUNTER_BUFFER_BINDING:GLenum = 0x92C1
const GL_ATOMIC_COUNTER_BUFFER_START:GLenum = 0x92C2
const GL_ATOMIC_COUNTER_BUFFER_SIZE:GLenum = 0x92C3
const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE:GLenum = 0x92C4
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS:GLenum = 0x92C5
const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES:GLenum = 0x92C6
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER:GLenum = 0x92C7
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER:GLenum = 0x92C8
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER:GLenum = 0x92C9
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER:GLenum = 0x92CA
const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER:GLenum = 0x92CB
const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS:GLenum = 0x92CC
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS:GLenum = 0x92CD
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS:GLenum = 0x92CE
const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS:GLenum = 0x92CF
const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS:GLenum = 0x92D0
const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS:GLenum = 0x92D1
const GL_MAX_VERTEX_ATOMIC_COUNTERS:GLenum = 0x92D2
const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS:GLenum = 0x92D3
const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS:GLenum = 0x92D4
const GL_MAX_GEOMETRY_ATOMIC_COUNTERS:GLenum = 0x92D5
const GL_MAX_FRAGMENT_ATOMIC_COUNTERS:GLenum = 0x92D6
const GL_MAX_COMBINED_ATOMIC_COUNTERS:GLenum = 0x92D7
const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE:GLenum = 0x92D8
const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS:GLenum = 0x92D9
const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX:GLenum = 0x92DA
const GL_UNSIGNED_INT_ATOMIC_COUNTER:GLenum = 0x92DB
const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS:GLenum = 0x92DC
const GL_DEBUG_OUTPUT:GLenum = 0x92E0
const GL_UNIFORM:GLenum = 0x92E1
const GL_UNIFORM_BLOCK:GLenum = 0x92E2
const GL_PROGRAM_INPUT:GLenum = 0x92E3
const GL_PROGRAM_OUTPUT:GLenum = 0x92E4
const GL_BUFFER_VARIABLE:GLenum = 0x92E5
const GL_SHADER_STORAGE_BLOCK:GLenum = 0x92E6
const GL_IS_PER_PATCH:GLenum = 0x92E7
const GL_VERTEX_SUBROUTINE:GLenum = 0x92E8
const GL_TESS_CONTROL_SUBROUTINE:GLenum = 0x92E9
const GL_TESS_EVALUATION_SUBROUTINE:GLenum = 0x92EA
const GL_GEOMETRY_SUBROUTINE:GLenum = 0x92EB
const GL_FRAGMENT_SUBROUTINE:GLenum = 0x92EC
const GL_COMPUTE_SUBROUTINE:GLenum = 0x92ED
const GL_VERTEX_SUBROUTINE_UNIFORM:GLenum = 0x92EE
const GL_TESS_CONTROL_SUBROUTINE_UNIFORM:GLenum = 0x92EF
const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM:GLenum = 0x92F0
const GL_GEOMETRY_SUBROUTINE_UNIFORM:GLenum = 0x92F1
const GL_FRAGMENT_SUBROUTINE_UNIFORM:GLenum = 0x92F2
const GL_COMPUTE_SUBROUTINE_UNIFORM:GLenum = 0x92F3
const GL_TRANSFORM_FEEDBACK_VARYING:GLenum = 0x92F4
const GL_ACTIVE_RESOURCES:GLenum = 0x92F5
const GL_MAX_NAME_LENGTH:GLenum = 0x92F6
const GL_MAX_NUM_ACTIVE_VARIABLES:GLenum = 0x92F7
const GL_MAX_NUM_COMPATIBLE_SUBROUTINES:GLenum = 0x92F8
const GL_NAME_LENGTH:GLenum = 0x92F9
const GL_TYPE:GLenum = 0x92FA
const GL_ARRAY_SIZE:GLenum = 0x92FB
const GL_OFFSET:GLenum = 0x92FC
const GL_BLOCK_INDEX:GLenum = 0x92FD
const GL_ARRAY_STRIDE:GLenum = 0x92FE
const GL_MATRIX_STRIDE:GLenum = 0x92FF
const GL_IS_ROW_MAJOR:GLenum = 0x9300
const GL_ATOMIC_COUNTER_BUFFER_INDEX:GLenum = 0x9301
const GL_BUFFER_BINDING:GLenum = 0x9302
const GL_BUFFER_DATA_SIZE:GLenum = 0x9303
const GL_NUM_ACTIVE_VARIABLES:GLenum = 0x9304
const GL_ACTIVE_VARIABLES:GLenum = 0x9305
const GL_REFERENCED_BY_VERTEX_SHADER:GLenum = 0x9306
const GL_REFERENCED_BY_TESS_CONTROL_SHADER:GLenum = 0x9307
const GL_REFERENCED_BY_TESS_EVALUATION_SHADER:GLenum = 0x9308
const GL_REFERENCED_BY_GEOMETRY_SHADER:GLenum = 0x9309
const GL_REFERENCED_BY_FRAGMENT_SHADER:GLenum = 0x930A
const GL_REFERENCED_BY_COMPUTE_SHADER:GLenum = 0x930B
const GL_TOP_LEVEL_ARRAY_SIZE:GLenum = 0x930C
const GL_TOP_LEVEL_ARRAY_STRIDE:GLenum = 0x930D
const GL_LOCATION:GLenum = 0x930E
const GL_LOCATION_INDEX:GLenum = 0x930F
const GL_FRAMEBUFFER_DEFAULT_WIDTH:GLenum = 0x9310
const GL_FRAMEBUFFER_DEFAULT_HEIGHT:GLenum = 0x9311
const GL_FRAMEBUFFER_DEFAULT_LAYERS:GLenum = 0x9312
const GL_FRAMEBUFFER_DEFAULT_SAMPLES:GLenum = 0x9313
const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS:GLenum = 0x9314
const GL_MAX_FRAMEBUFFER_WIDTH:GLenum = 0x9315
const GL_MAX_FRAMEBUFFER_HEIGHT:GLenum = 0x9316
const GL_MAX_FRAMEBUFFER_LAYERS:GLenum = 0x9317
const GL_MAX_FRAMEBUFFER_SAMPLES:GLenum = 0x9318
const GL_LOCATION_COMPONENT:GLenum = 0x934A
const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX:GLenum = 0x934B
const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE:GLenum = 0x934C
const GL_CLIP_ORIGIN:GLenum = 0x935C
const GL_CLIP_DEPTH_MODE:GLenum = 0x935D
const GL_NEGATIVE_ONE_TO_ONE:GLenum = 0x935E
const GL_ZERO_TO_ONE:GLenum = 0x935F
const GL_CLEAR_TEXTURE:GLenum = 0x9365
const GL_NUM_SAMPLE_COUNTS:GLenum = 0x9380
proc "importc" glAccum(op: GLenum, value: GLfloat) -> void
proc "importc" glActiveShaderProgram(pipeline: GLuint, program: GLuint) -> void
proc "importc" glActiveTexture(texture: GLenum) -> void
proc "importc" glAlphaFunc(func: GLenum, ref: GLfloat) -> void
proc "importc" glAreTexturesResident(n: GLsizei, textures: ptr(GLuint), residences: ptr(GLboolean)) -> GLboolean
proc "importc" glArrayElement(i: GLint) -> void
proc "importc" glAttachShader(program: GLuint, shader: GLuint) -> void
proc "importc" glBegin(mode: GLenum) -> void
proc "importc" glBeginConditionalRender(id: GLuint, mode: GLenum) -> void
proc "importc" glBeginQuery(target: GLenum, id: GLuint) -> void
proc "importc" glBeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint) -> void
proc "importc" glBeginTransformFeedback(primitiveMode: GLenum) -> void
proc "importc" glBindAttribLocation(program: GLuint, index: GLuint, name: cstr) -> void
proc "importc" glBindBuffer(target: GLenum, buffer: GLuint) -> void
proc "importc" glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint) -> void
proc "importc" glBindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void
proc "importc" glBindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr(GLuint)) -> void
proc "importc" glBindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: ptr(GLuint), offsets: ptr(GLintptr), sizes: ptr(GLsizeiptr)) -> void
proc "importc" glBindFragDataLocation(program: GLuint, color: GLuint, name: cstr) -> void
proc "importc" glBindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: cstr) -> void
proc "importc" glBindFramebuffer(target: GLenum, framebuffer: GLuint) -> void
proc "importc" glBindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> void
proc "importc" glBindImageTextures(first: GLuint, count: GLsizei, textures: ptr(GLuint)) -> void
proc "importc" glBindProgramPipeline(pipeline: GLuint) -> void
proc "importc" glBindRenderbuffer(target: GLenum, renderbuffer: GLuint) -> void
proc "importc" glBindSampler(unit: GLuint, sampler: GLuint) -> void
proc "importc" glBindSamplers(first: GLuint, count: GLsizei, samplers: ptr(GLuint)) -> void
proc "importc" glBindTexture(target: GLenum, texture: GLuint) -> void
proc "importc" glBindTextureUnit(unit: GLuint, texture: GLuint) -> void
proc "importc" glBindTextures(first: GLuint, count: GLsizei, textures: ptr(GLuint)) -> void
proc "importc" glBindTransformFeedback(target: GLenum, id: GLuint) -> void
proc "importc" glBindVertexArray(array: GLuint) -> void
proc "importc" glBindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void
proc "importc" glBindVertexBuffers(first: GLuint, count: GLsizei, buffers: ptr(GLuint), offsets: ptr(GLintptr), strides: ptr(GLsizei)) -> void
proc "importc" glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: ptr(GLubyte)) -> void
proc "importc" glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void
proc "importc" glBlendEquation(mode: GLenum) -> void
proc "importc" glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) -> void
proc "importc" glBlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> void
proc "importc" glBlendEquationi(buf: GLuint, mode: GLenum) -> void
proc "importc" glBlendFunc(sfactor: GLenum, dfactor: GLenum) -> void
proc "importc" glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> void
proc "importc" glBlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> void
proc "importc" glBlendFunci(buf: GLuint, src: GLenum, dst: GLenum) -> void
proc "importc" glBlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void
proc "importc" glBlitNamedFramebuffer(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void
proc "importc" glBufferData(target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) -> void
proc "importc" glBufferStorage(target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield) -> void
proc "importc" glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) -> void
proc "importc" glCallList(list: GLuint) -> void
proc "importc" glCallLists(n: GLsizei, typ: GLenum, lists: pointer) -> void
proc "importc" glCheckFramebufferStatus(target: GLenum) -> GLenum
proc "importc" glCheckNamedFramebufferStatus(framebuffer: GLuint, target: GLenum) -> GLenum
proc "importc" glClampColor(target: GLenum, clamp: GLenum) -> void
proc "importc" glClear(mask: GLbitfield) -> void
proc "importc" glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void
proc "importc" glClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, typ: GLenum, data: pointer) -> void
proc "importc" glClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, typ: GLenum, data: pointer) -> void
proc "importc" glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void
proc "importc" glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: ptr(GLfloat)) -> void
proc "importc" glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: ptr(GLint)) -> void
proc "importc" glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: ptr(GLuint)) -> void
proc "importc" glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void
proc "importc" glClearDepth(depth: GLdouble) -> void
proc "importc" glClearDepthf(d: GLfloat) -> void
proc "importc" glClearIndex(c: GLfloat) -> void
proc "importc" glClearNamedBufferData(buffer: GLuint, internalformat: GLenum, format: GLenum, typ: GLenum, data: pointer) -> void
proc "importc" glClearNamedBufferSubData(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, typ: GLenum, data: pointer) -> void
proc "importc" glClearNamedFramebufferfi(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void
proc "importc" glClearNamedFramebufferfv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr(GLfloat)) -> void
proc "importc" glClearNamedFramebufferiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr(GLint)) -> void
proc "importc" glClearNamedFramebufferuiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr(GLuint)) -> void
proc "importc" glClearStencil(s: GLint) -> void
proc "importc" glClearTexImage(texture: GLuint, level: GLint, format: GLenum, typ: GLenum, data: pointer) -> void
proc "importc" glClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, typ: GLenum, data: pointer) -> void
proc "importc" glClientActiveTexture(texture: GLenum) -> void
proc "importc" glClipControl(origin: GLenum, depth: GLenum) -> void
proc "importc" glClipPlane(plane: GLenum, equation: ptr(GLdouble)) -> void
proc "importc" glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> void
proc "importc" glColor3bv(v: ptr(GLbyte)) -> void
proc "importc" glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> void
proc "importc" glColor3dv(v: ptr(GLdouble)) -> void
proc "importc" glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> void
proc "importc" glColor3fv(v: ptr(GLfloat)) -> void
proc "importc" glColor3i(red: GLint, green: GLint, blue: GLint) -> void
proc "importc" glColor3iv(v: ptr(GLint)) -> void
proc "importc" glColor3s(red: GLshort, green: GLshort, blue: GLshort) -> void
proc "importc" glColor3sv(v: ptr(GLshort)) -> void
proc "importc" glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> void
proc "importc" glColor3ubv(v: ptr(GLubyte)) -> void
proc "importc" glColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> void
proc "importc" glColor3uiv(v: ptr(GLuint)) -> void
proc "importc" glColor3us(red: GLushort, green: GLushort, blue: GLushort) -> void
proc "importc" glColor3usv(v: ptr(GLushort)) -> void
proc "importc" glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> void
proc "importc" glColor4bv(v: ptr(GLbyte)) -> void
proc "importc" glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> void
proc "importc" glColor4dv(v: ptr(GLdouble)) -> void
proc "importc" glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void
proc "importc" glColor4fv(v: ptr(GLfloat)) -> void
proc "importc" glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> void
proc "importc" glColor4iv(v: ptr(GLint)) -> void
proc "importc" glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> void
proc "importc" glColor4sv(v: ptr(GLshort)) -> void
proc "importc" glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> void
proc "importc" glColor4ubv(v: ptr(GLubyte)) -> void
proc "importc" glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> void
proc "importc" glColor4uiv(v: ptr(GLuint)) -> void
proc "importc" glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> void
proc "importc" glColor4usv(v: ptr(GLushort)) -> void
proc "importc" glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void
proc "importc" glColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> void
proc "importc" glColorMaterial(face: GLenum, mode: GLenum) -> void
proc "importc" glColorP3ui(typ: GLenum, color: GLuint) -> void
proc "importc" glColorP3uiv(typ: GLenum, color: ptr(GLuint)) -> void
proc "importc" glColorP4ui(typ: GLenum, color: GLuint) -> void
proc "importc" glColorP4uiv(typ: GLenum, color: ptr(GLuint)) -> void
proc "importc" glColorPointer(size: GLint, typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glCompileShader(shader: GLuint) -> void
proc "importc" glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCompressedTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) -> void
proc "importc" glCopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void
proc "importc" glCopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> void
proc "importc" glCopyNamedBufferSubData(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void
proc "importc" glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, typ: GLenum) -> void
proc "importc" glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> void
proc "importc" glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void
proc "importc" glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void
proc "importc" glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glCopyTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> void
proc "importc" glCopyTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glCopyTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glCreateBuffers(n: GLsizei, buffers: ptr(GLuint)) -> void
proc "importc" glCreateFramebuffers(n: GLsizei, framebuffers: ptr(GLuint)) -> void
proc "importc" glCreateProgram() -> GLuint
proc "importc" glCreateProgramPipelines(n: GLsizei, pipelines: ptr(GLuint)) -> void
proc "importc" glCreateQueries(target: GLenum, n: GLsizei, ids: ptr(GLuint)) -> void
proc "importc" glCreateRenderbuffers(n: GLsizei, renderbuffers: ptr(GLuint)) -> void
proc "importc" glCreateSamplers(n: GLsizei, samplers: ptr(GLuint)) -> void
proc "importc" glCreateShader(typ: GLenum) -> GLuint
proc "importc" glCreateShaderProgramv(typ: GLenum, count: GLsizei, strings: ptr(cstr)) -> GLuint
proc "importc" glCreateTextures(target: GLenum, n: GLsizei, textures: ptr(GLuint)) -> void
proc "importc" glCreateTransformFeedbacks(n: GLsizei, ids: ptr(GLuint)) -> void
proc "importc" glCreateVertexArrays(n: GLsizei, arrays: ptr(GLuint)) -> void
proc "importc" glCullFace(mode: GLenum) -> void
proc "importc" glDebugMessageControl(source: GLenum, typ: GLenum, severity: GLenum, count: GLsizei, ids: ptr(GLuint), enabled: GLboolean) -> void
proc "importc" glDebugMessageInsert(source: GLenum, typ: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstr) -> void
proc "importc" glDeleteBuffers(n: GLsizei, buffers: ptr(GLuint)) -> void
proc "importc" glDeleteFramebuffers(n: GLsizei, framebuffers: ptr(GLuint)) -> void
proc "importc" glDeleteLists(list: GLuint, range: GLsizei) -> void
proc "importc" glDeleteProgram(program: GLuint) -> void
proc "importc" glDeleteProgramPipelines(n: GLsizei, pipelines: ptr(GLuint)) -> void
proc "importc" glDeleteQueries(n: GLsizei, ids: ptr(GLuint)) -> void
proc "importc" glDeleteRenderbuffers(n: GLsizei, renderbuffers: ptr(GLuint)) -> void
proc "importc" glDeleteSamplers(count: GLsizei, samplers: ptr(GLuint)) -> void
proc "importc" glDeleteShader(shader: GLuint) -> void
proc "importc" glDeleteTextures(n: GLsizei, textures: ptr(GLuint)) -> void
proc "importc" glDeleteTransformFeedbacks(n: GLsizei, ids: ptr(GLuint)) -> void
proc "importc" glDeleteVertexArrays(n: GLsizei, arrays: ptr(GLuint)) -> void
proc "importc" glDepthFunc(func: GLenum) -> void
proc "importc" glDepthMask(flag: GLboolean) -> void
proc "importc" glDepthRange(near: GLdouble, far: GLdouble) -> void
proc "importc" glDepthRangeArrayv(first: GLuint, count: GLsizei, v: ptr(GLdouble)) -> void
proc "importc" glDepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble) -> void
proc "importc" glDepthRangef(n: GLfloat, f: GLfloat) -> void
proc "importc" glDetachShader(program: GLuint, shader: GLuint) -> void
proc "importc" glDisable(cap: GLenum) -> void
proc "importc" glDisableClientState(array: GLenum) -> void
proc "importc" glDisableVertexArrayAttrib(vaobj: GLuint, index: GLuint) -> void
proc "importc" glDisableVertexAttribArray(index: GLuint) -> void
proc "importc" glDisablei(target: GLenum, index: GLuint) -> void
proc "importc" glDispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> void
proc "importc" glDispatchComputeIndirect(indirect: GLintptr) -> void
proc "importc" glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> void
proc "importc" glDrawArraysIndirect(mode: GLenum, indirect: pointer) -> void
proc "importc" glDrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> void
proc "importc" glDrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> void
proc "importc" glDrawBuffer(buf: GLenum) -> void
proc "importc" glDrawBuffers(n: GLsizei, bufs: ptr(GLenum)) -> void
proc "importc" glDrawElements(mode: GLenum, count: GLsizei, typ: GLenum, indices: pointer) -> void
proc "importc" glDrawElementsBaseVertex(mode: GLenum, count: GLsizei, typ: GLenum, indices: pointer, basevertex: GLint) -> void
proc "importc" glDrawElementsIndirect(mode: GLenum, typ: GLenum, indirect: pointer) -> void
proc "importc" glDrawElementsInstanced(mode: GLenum, count: GLsizei, typ: GLenum, indices: pointer, instancecount: GLsizei) -> void
proc "importc" glDrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, typ: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint) -> void
proc "importc" glDrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, typ: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) -> void
proc "importc" glDrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, typ: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> void
proc "importc" glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, typ: GLenum, indices: pointer) -> void
proc "importc" glDrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, typ: GLenum, indices: pointer, basevertex: GLint) -> void
proc "importc" glDrawTransformFeedback(mode: GLenum, id: GLuint) -> void
proc "importc" glDrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei) -> void
proc "importc" glDrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint) -> void
proc "importc" glDrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> void
proc "importc" glEdgeFlag(flag: GLboolean) -> void
proc "importc" glEdgeFlagPointer(stride: GLsizei, pointer: pointer) -> void
proc "importc" glEdgeFlagv(flag: ptr(GLboolean)) -> void
proc "importc" glEnable(cap: GLenum) -> void
proc "importc" glEnableClientState(array: GLenum) -> void
proc "importc" glEnableVertexArrayAttrib(vaobj: GLuint, index: GLuint) -> void
proc "importc" glEnableVertexAttribArray(index: GLuint) -> void
proc "importc" glEnablei(target: GLenum, index: GLuint) -> void
proc "importc" glEnd() -> void
proc "importc" glEndConditionalRender() -> void
proc "importc" glEndList() -> void
proc "importc" glEndQuery(target: GLenum) -> void
proc "importc" glEndQueryIndexed(target: GLenum, index: GLuint) -> void
proc "importc" glEndTransformFeedback() -> void
proc "importc" glEvalCoord1d(u: GLdouble) -> void
proc "importc" glEvalCoord1dv(u: ptr(GLdouble)) -> void
proc "importc" glEvalCoord1f(u: GLfloat) -> void
proc "importc" glEvalCoord1fv(u: ptr(GLfloat)) -> void
proc "importc" glEvalCoord2d(u: GLdouble, v: GLdouble) -> void
proc "importc" glEvalCoord2dv(u: ptr(GLdouble)) -> void
proc "importc" glEvalCoord2f(u: GLfloat, v: GLfloat) -> void
proc "importc" glEvalCoord2fv(u: ptr(GLfloat)) -> void
proc "importc" glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint) -> void
proc "importc" glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> void
proc "importc" glEvalPoint1(i: GLint) -> void
proc "importc" glEvalPoint2(i: GLint, j: GLint) -> void
proc "importc" glFeedbackBuffer(size: GLsizei, typ: GLenum, buffer: ptr(GLfloat)) -> void
proc "importc" glFinish() -> void
proc "importc" glFlush() -> void
proc "importc" glFlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> void
proc "importc" glFlushMappedNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> void
proc "importc" glFogCoordPointer(typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glFogCoordd(coord: GLdouble) -> void
proc "importc" glFogCoorddv(coord: ptr(GLdouble)) -> void
proc "importc" glFogCoordf(coord: GLfloat) -> void
proc "importc" glFogCoordfv(coord: ptr(GLfloat)) -> void
proc "importc" glFogf(pname: GLenum, param: GLfloat) -> void
proc "importc" glFogfv(pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glFogi(pname: GLenum, param: GLint) -> void
proc "importc" glFogiv(pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glFramebufferParameteri(target: GLenum, pname: GLenum, param: GLint) -> void
proc "importc" glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void
proc "importc" glFramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> void
proc "importc" glFramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void
proc "importc" glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void
proc "importc" glFramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> void
proc "importc" glFramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void
proc "importc" glFrontFace(mode: GLenum) -> void
proc "importc" glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void
proc "importc" glGenBuffers(n: GLsizei, buffers: ptr(GLuint)) -> void
proc "importc" glGenFramebuffers(n: GLsizei, framebuffers: ptr(GLuint)) -> void
proc "importc" glGenLists(range: GLsizei) -> GLuint
proc "importc" glGenProgramPipelines(n: GLsizei, pipelines: ptr(GLuint)) -> void
proc "importc" glGenQueries(n: GLsizei, ids: ptr(GLuint)) -> void
proc "importc" glGenRenderbuffers(n: GLsizei, renderbuffers: ptr(GLuint)) -> void
proc "importc" glGenSamplers(count: GLsizei, samplers: ptr(GLuint)) -> void
proc "importc" glGenTextures(n: GLsizei, textures: ptr(GLuint)) -> void
proc "importc" glGenTransformFeedbacks(n: GLsizei, ids: ptr(GLuint)) -> void
proc "importc" glGenVertexArrays(n: GLsizei, arrays: ptr(GLuint)) -> void
proc "importc" glGenerateMipmap(target: GLenum) -> void
proc "importc" glGenerateTextureMipmap(texture: GLuint) -> void
proc "importc" glGetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr(GLsizei), size: ptr(GLint), typ: ptr(GLenum), name: cstr) -> void
proc "importc" glGetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: ptr(GLsizei), name: cstr) -> void
proc "importc" glGetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: ptr(GLsizei), name: cstr) -> void
proc "importc" glGetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr(GLint)) -> void
proc "importc" glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr(GLsizei), size: ptr(GLint), typ: ptr(GLenum), name: cstr) -> void
proc "importc" glGetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr(GLsizei), uniformBlockName: cstr) -> void
proc "importc" glGetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr(GLsizei), uniformName: cstr) -> void
proc "importc" glGetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: ptr(GLuint), pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: ptr(GLsizei), shaders: ptr(GLuint)) -> void
proc "importc" glGetAttribLocation(program: GLuint, name: cstr) -> GLint
proc "importc" glGetBooleani_v(target: GLenum, index: GLuint, data: ptr(GLboolean)) -> void
proc "importc" glGetBooleanv(pname: GLenum, data: ptr(GLboolean)) -> void
proc "importc" glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: ptr(GLint64)) -> void
proc "importc" glGetBufferParameteriv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetBufferPointerv(target: GLenum, pname: GLenum, params: pointer) -> void
proc "importc" glGetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) -> void
proc "importc" glGetClipPlane(plane: GLenum, equation: ptr(GLdouble)) -> void
proc "importc" glGetCompressedTexImage(target: GLenum, level: GLint, img: pointer) -> void
proc "importc" glGetCompressedTextureImage(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer) -> void
proc "importc" glGetCompressedTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer) -> void
proc "importc" glGetDebugMessageLog(count: GLuint, bufSize: GLsizei, sources: ptr(GLenum), types: ptr(GLenum), ids: ptr(GLuint), severities: ptr(GLenum), lengths: ptr(GLsizei), messageLog: cstr) -> GLuint
proc "importc" glGetDoublei_v(target: GLenum, index: GLuint, data: ptr(GLdouble)) -> void
proc "importc" glGetDoublev(pname: GLenum, data: ptr(GLdouble)) -> void
proc "importc" glGetError() -> GLenum
proc "importc" glGetFloati_v(target: GLenum, index: GLuint, data: ptr(GLfloat)) -> void
proc "importc" glGetFloatv(pname: GLenum, data: ptr(GLfloat)) -> void
proc "importc" glGetFragDataIndex(program: GLuint, name: cstr) -> GLint
proc "importc" glGetFragDataLocation(program: GLuint, name: cstr) -> GLint
proc "importc" glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetFramebufferParameteriv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetGraphicsResetStatus() -> GLenum
proc "importc" glGetInteger64i_v(target: GLenum, index: GLuint, data: ptr(GLint64)) -> void
proc "importc" glGetInteger64v(pname: GLenum, data: ptr(GLint64)) -> void
proc "importc" glGetIntegeri_v(target: GLenum, index: GLuint, data: ptr(GLint)) -> void
proc "importc" glGetIntegerv(pname: GLenum, data: ptr(GLint)) -> void
proc "importc" glGetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: ptr(GLint64)) -> void
proc "importc" glGetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: ptr(GLint)) -> void
proc "importc" glGetLightfv(light: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetLightiv(light: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetMapdv(target: GLenum, query: GLenum, v: ptr(GLdouble)) -> void
proc "importc" glGetMapfv(target: GLenum, query: GLenum, v: ptr(GLfloat)) -> void
proc "importc" glGetMapiv(target: GLenum, query: GLenum, v: ptr(GLint)) -> void
proc "importc" glGetMaterialfv(face: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetMaterialiv(face: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetMultisamplefv(pname: GLenum, index: GLuint, val: ptr(GLfloat)) -> void
proc "importc" glGetNamedBufferParameteri64v(buffer: GLuint, pname: GLenum, params: ptr(GLint64)) -> void
proc "importc" glGetNamedBufferParameteriv(buffer: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetNamedBufferPointerv(buffer: GLuint, pname: GLenum, params: pointer) -> void
proc "importc" glGetNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) -> void
proc "importc" glGetNamedFramebufferAttachmentParameteriv(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetNamedFramebufferParameteriv(framebuffer: GLuint, pname: GLenum, param: ptr(GLint)) -> void
proc "importc" glGetNamedRenderbufferParameteriv(renderbuffer: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr(GLsizei), label: cstr) -> void
proc "importc" glGetObjectPtrLabel(`ptr`: pointer, bufSize: GLsizei, length: ptr(GLsizei), label: cstr) -> void
proc "importc" glGetPixelMapfv(map: GLenum, values: ptr(GLfloat)) -> void
proc "importc" glGetPixelMapuiv(map: GLenum, values: ptr(GLuint)) -> void
proc "importc" glGetPixelMapusv(map: GLenum, values: ptr(GLushort)) -> void
proc "importc" glGetPointerv(pname: GLenum, params: pointer) -> void
proc "importc" glGetPolygonStipple(mask: ptr(GLubyte)) -> void
proc "importc" glGetProgramBinary(program: GLuint, bufSize: GLsizei, length: ptr(GLsizei), binaryFormat: ptr(GLenum), binary: pointer) -> void
proc "importc" glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: ptr(GLsizei), infoLog: cstr) -> void
proc "importc" glGetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: ptr(GLsizei), infoLog: cstr) -> void
proc "importc" glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: cstr) -> GLuint
proc "importc" glGetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: cstr) -> GLint
proc "importc" glGetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: cstr) -> GLint
proc "importc" glGetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr(GLsizei), name: cstr) -> void
proc "importc" glGetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr(GLenum), bufSize: GLsizei, length: ptr(GLsizei), params: ptr(GLint)) -> void
proc "importc" glGetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr(GLint)) -> void
proc "importc" glGetProgramiv(program: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetQueryBufferObjecti64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void
proc "importc" glGetQueryBufferObjectiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void
proc "importc" glGetQueryBufferObjectui64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void
proc "importc" glGetQueryBufferObjectuiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> void
proc "importc" glGetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetQueryObjecti64v(id: GLuint, pname: GLenum, params: ptr(GLint64)) -> void
proc "importc" glGetQueryObjectiv(id: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetQueryObjectui64v(id: GLuint, pname: GLenum, params: ptr(GLuint64)) -> void
proc "importc" glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: ptr(GLuint)) -> void
proc "importc" glGetQueryiv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: ptr(GLuint)) -> void
proc "importc" glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: ptr(GLsizei), infoLog: cstr) -> void
proc "importc" glGetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: ptr(GLint), precision: ptr(GLint)) -> void
proc "importc" glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: ptr(GLsizei), source: cstr) -> void
proc "importc" glGetShaderiv(shader: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetString(name: GLenum) -> GLubyte
proc "importc" glGetStringi(name: GLenum, index: GLuint) -> GLubyte
proc "importc" glGetSubroutineIndex(program: GLuint, shadertype: GLenum, name: cstr) -> GLuint
proc "importc" glGetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: cstr) -> GLint
proc "importc" glGetTexEnvfv(target: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetTexEnviv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTexGendv(coord: GLenum, pname: GLenum, params: ptr(GLdouble)) -> void
proc "importc" glGetTexGenfv(coord: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetTexGeniv(coord: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTexImage(target: GLenum, level: GLint, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTexParameterIiv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTexParameterIuiv(target: GLenum, pname: GLenum, params: ptr(GLuint)) -> void
proc "importc" glGetTexParameterfv(target: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetTexParameteriv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTextureImage(texture: GLuint, level: GLint, format: GLenum, typ: GLenum, bufSize: GLsizei, pixels: pointer) -> void
proc "importc" glGetTextureLevelParameterfv(texture: GLuint, level: GLint, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetTextureLevelParameteriv(texture: GLuint, level: GLint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTextureParameterIiv(texture: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTextureParameterIuiv(texture: GLuint, pname: GLenum, params: ptr(GLuint)) -> void
proc "importc" glGetTextureParameterfv(texture: GLuint, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetTextureParameteriv(texture: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, typ: GLenum, bufSize: GLsizei, pixels: pointer) -> void
proc "importc" glGetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr(GLsizei), size: ptr(GLsizei), typ: ptr(GLenum), name: cstr) -> void
proc "importc" glGetTransformFeedbacki64_v(xfb: GLuint, pname: GLenum, index: GLuint, param: ptr(GLint64)) -> void
proc "importc" glGetTransformFeedbacki_v(xfb: GLuint, pname: GLenum, index: GLuint, param: ptr(GLint)) -> void
proc "importc" glGetTransformFeedbackiv(xfb: GLuint, pname: GLenum, param: ptr(GLint)) -> void
proc "importc" glGetUniformBlockIndex(program: GLuint, uniformBlockName: cstr) -> GLuint
proc "importc" glGetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: ptr(cstr), uniformIndices: ptr(GLuint)) -> void
proc "importc" glGetUniformLocation(program: GLuint, name: cstr) -> GLint
proc "importc" glGetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: ptr(GLuint)) -> void
proc "importc" glGetUniformdv(program: GLuint, location: GLint, params: ptr(GLdouble)) -> void
proc "importc" glGetUniformfv(program: GLuint, location: GLint, params: ptr(GLfloat)) -> void
proc "importc" glGetUniformiv(program: GLuint, location: GLint, params: ptr(GLint)) -> void
proc "importc" glGetUniformuiv(program: GLuint, location: GLint, params: ptr(GLuint)) -> void
proc "importc" glGetVertexArrayIndexed64iv(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr(GLint64)) -> void
proc "importc" glGetVertexArrayIndexediv(vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr(GLint)) -> void
proc "importc" glGetVertexArrayiv(vaobj: GLuint, pname: GLenum, param: ptr(GLint)) -> void
proc "importc" glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: ptr(GLuint)) -> void
proc "importc" glGetVertexAttribLdv(index: GLuint, pname: GLenum, params: ptr(GLdouble)) -> void
proc "importc" glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: pointer) -> void
proc "importc" glGetVertexAttribdv(index: GLuint, pname: GLenum, params: ptr(GLdouble)) -> void
proc "importc" glGetVertexAttribfv(index: GLuint, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glGetVertexAttribiv(index: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glGetnColorTable(target: GLenum, format: GLenum, typ: GLenum, bufSize: GLsizei, table: pointer) -> void
proc "importc" glGetnCompressedTexImage(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: pointer) -> void
proc "importc" glGetnConvolutionFilter(target: GLenum, format: GLenum, typ: GLenum, bufSize: GLsizei, image: pointer) -> void
proc "importc" glGetnHistogram(target: GLenum, reset: GLboolean, format: GLenum, typ: GLenum, bufSize: GLsizei, values: pointer) -> void
proc "importc" glGetnMapdv(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr(GLdouble)) -> void
proc "importc" glGetnMapfv(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr(GLfloat)) -> void
proc "importc" glGetnMapiv(target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr(GLint)) -> void
proc "importc" glGetnMinmax(target: GLenum, reset: GLboolean, format: GLenum, typ: GLenum, bufSize: GLsizei, values: pointer) -> void
proc "importc" glGetnPixelMapfv(map: GLenum, bufSize: GLsizei, values: ptr(GLfloat)) -> void
proc "importc" glGetnPixelMapuiv(map: GLenum, bufSize: GLsizei, values: ptr(GLuint)) -> void
proc "importc" glGetnPixelMapusv(map: GLenum, bufSize: GLsizei, values: ptr(GLushort)) -> void
proc "importc" glGetnPolygonStipple(bufSize: GLsizei, pattern: ptr(GLubyte)) -> void
proc "importc" glGetnSeparableFilter(target: GLenum, format: GLenum, typ: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer) -> void
proc "importc" glGetnTexImage(target: GLenum, level: GLint, format: GLenum, typ: GLenum, bufSize: GLsizei, pixels: pointer) -> void
proc "importc" glGetnUniformdv(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr(GLdouble)) -> void
proc "importc" glGetnUniformfv(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr(GLfloat)) -> void
proc "importc" glGetnUniformiv(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr(GLint)) -> void
proc "importc" glGetnUniformuiv(program: GLuint, location: GLint, bufSize: GLsizei, params: ptr(GLuint)) -> void
proc "importc" glHint(target: GLenum, mode: GLenum) -> void
proc "importc" glIndexMask(mask: GLuint) -> void
proc "importc" glIndexPointer(typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glIndexd(c: GLdouble) -> void
proc "importc" glIndexdv(c: ptr(GLdouble)) -> void
proc "importc" glIndexf(c: GLfloat) -> void
proc "importc" glIndexfv(c: ptr(GLfloat)) -> void
proc "importc" glIndexi(c: GLint) -> void
proc "importc" glIndexiv(c: ptr(GLint)) -> void
proc "importc" glIndexs(c: GLshort) -> void
proc "importc" glIndexsv(c: ptr(GLshort)) -> void
proc "importc" glIndexub(c: GLubyte) -> void
proc "importc" glIndexubv(c: ptr(GLubyte)) -> void
proc "importc" glInitNames() -> void
proc "importc" glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glInvalidateBufferData(buffer: GLuint) -> void
proc "importc" glInvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> void
proc "importc" glInvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: ptr(GLenum)) -> void
proc "importc" glInvalidateNamedFramebufferData(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr(GLenum)) -> void
proc "importc" glInvalidateNamedFramebufferSubData(framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr(GLenum), x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glInvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: ptr(GLenum), x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glInvalidateTexImage(texture: GLuint, level: GLint) -> void
proc "importc" glInvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> void
proc "importc" glIsBuffer(buffer: GLuint) -> GLboolean
proc "importc" glIsEnabled(cap: GLenum) -> GLboolean
proc "importc" glIsEnabledi(target: GLenum, index: GLuint) -> GLboolean
proc "importc" glIsFramebuffer(framebuffer: GLuint) -> GLboolean
proc "importc" glIsList(list: GLuint) -> GLboolean
proc "importc" glIsProgram(program: GLuint) -> GLboolean
proc "importc" glIsProgramPipeline(pipeline: GLuint) -> GLboolean
proc "importc" glIsQuery(id: GLuint) -> GLboolean
proc "importc" glIsRenderbuffer(renderbuffer: GLuint) -> GLboolean
proc "importc" glIsSampler(sampler: GLuint) -> GLboolean
proc "importc" glIsShader(shader: GLuint) -> GLboolean
proc "importc" glIsTexture(texture: GLuint) -> GLboolean
proc "importc" glIsTransformFeedback(id: GLuint) -> GLboolean
proc "importc" glIsVertexArray(array: GLuint) -> GLboolean
proc "importc" glLightModelf(pname: GLenum, param: GLfloat) -> void
proc "importc" glLightModelfv(pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glLightModeli(pname: GLenum, param: GLint) -> void
proc "importc" glLightModeliv(pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glLightf(light: GLenum, pname: GLenum, param: GLfloat) -> void
proc "importc" glLightfv(light: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glLighti(light: GLenum, pname: GLenum, param: GLint) -> void
proc "importc" glLightiv(light: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glLineStipple(factor: GLint, pattern: GLushort) -> void
proc "importc" glLineWidth(width: GLfloat) -> void
proc "importc" glLinkProgram(program: GLuint) -> void
proc "importc" glListBase(base: GLuint) -> void
proc "importc" glLoadIdentity() -> void
proc "importc" glLoadMatrixd(m: ptr(GLdouble)) -> void
proc "importc" glLoadMatrixf(m: ptr(GLfloat)) -> void
proc "importc" glLoadName(name: GLuint) -> void
proc "importc" glLoadTransposeMatrixd(m: ptr(GLdouble)) -> void
proc "importc" glLoadTransposeMatrixf(m: ptr(GLfloat)) -> void
proc "importc" glLogicOp(opcode: GLenum) -> void
proc "importc" glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr(GLdouble)) -> pointer
proc "importc" glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr(GLfloat)) -> pointer
proc "importc" glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr(GLdouble)) -> pointer
proc "importc" glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr(GLfloat)) -> pointer
proc "importc" glMapBuffer(target: GLenum, access: GLenum) -> pointer
proc "importc" glMapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> pointer
proc "importc" glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) -> pointer
proc "importc" glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) -> pointer
proc "importc" glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> pointer
proc "importc" glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> pointer
proc "importc" glMapNamedBuffer(buffer: GLuint, access: GLenum) -> pointer
proc "importc" glMapNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> pointer
proc "importc" glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) -> void
proc "importc" glMaterialfv(face: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glMateriali(face: GLenum, pname: GLenum, param: GLint) -> void
proc "importc" glMaterialiv(face: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glMatrixMode(mode: GLenum) -> void
proc "importc" glMemoryBarrier(barriers: GLbitfield) -> void
proc "importc" glMemoryBarrierByRegion(barriers: GLbitfield) -> void
proc "importc" glMinSampleShading(value: GLfloat) -> void
proc "importc" glMultMatrixd(m: ptr(GLdouble)) -> void
proc "importc" glMultMatrixf(m: ptr(GLfloat)) -> void
proc "importc" glMultTransposeMatrixd(m: ptr(GLdouble)) -> void
proc "importc" glMultTransposeMatrixf(m: ptr(GLfloat)) -> void
proc "importc" glMultiDrawArrays(mode: GLenum, first: ptr(GLint), count: ptr(GLsizei), drawcount: GLsizei) -> void
proc "importc" glMultiDrawArraysIndirect(mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) -> void
proc "importc" glMultiDrawElements(mode: GLenum, count: ptr(GLsizei), typ: GLenum, indices: pointer, drawcount: GLsizei) -> void
proc "importc" glMultiDrawElementsBaseVertex(mode: GLenum, count: ptr(GLsizei), typ: GLenum, indices: pointer, drawcount: GLsizei, basevertex: ptr(GLint)) -> void
proc "importc" glMultiDrawElementsIndirect(mode: GLenum, typ: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) -> void
proc "importc" glMultiTexCoord1d(target: GLenum, s: GLdouble) -> void
proc "importc" glMultiTexCoord1dv(target: GLenum, v: ptr(GLdouble)) -> void
proc "importc" glMultiTexCoord1f(target: GLenum, s: GLfloat) -> void
proc "importc" glMultiTexCoord1fv(target: GLenum, v: ptr(GLfloat)) -> void
proc "importc" glMultiTexCoord1i(target: GLenum, s: GLint) -> void
proc "importc" glMultiTexCoord1iv(target: GLenum, v: ptr(GLint)) -> void
proc "importc" glMultiTexCoord1s(target: GLenum, s: GLshort) -> void
proc "importc" glMultiTexCoord1sv(target: GLenum, v: ptr(GLshort)) -> void
proc "importc" glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) -> void
proc "importc" glMultiTexCoord2dv(target: GLenum, v: ptr(GLdouble)) -> void
proc "importc" glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) -> void
proc "importc" glMultiTexCoord2fv(target: GLenum, v: ptr(GLfloat)) -> void
proc "importc" glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) -> void
proc "importc" glMultiTexCoord2iv(target: GLenum, v: ptr(GLint)) -> void
proc "importc" glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) -> void
proc "importc" glMultiTexCoord2sv(target: GLenum, v: ptr(GLshort)) -> void
proc "importc" glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> void
proc "importc" glMultiTexCoord3dv(target: GLenum, v: ptr(GLdouble)) -> void
proc "importc" glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> void
proc "importc" glMultiTexCoord3fv(target: GLenum, v: ptr(GLfloat)) -> void
proc "importc" glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) -> void
proc "importc" glMultiTexCoord3iv(target: GLenum, v: ptr(GLint)) -> void
proc "importc" glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> void
proc "importc" glMultiTexCoord3sv(target: GLenum, v: ptr(GLshort)) -> void
proc "importc" glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void
proc "importc" glMultiTexCoord4dv(target: GLenum, v: ptr(GLdouble)) -> void
proc "importc" glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void
proc "importc" glMultiTexCoord4fv(target: GLenum, v: ptr(GLfloat)) -> void
proc "importc" glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> void
proc "importc" glMultiTexCoord4iv(target: GLenum, v: ptr(GLint)) -> void
proc "importc" glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void
proc "importc" glMultiTexCoord4sv(target: GLenum, v: ptr(GLshort)) -> void
proc "importc" glMultiTexCoordP1ui(texture: GLenum, typ: GLenum, coords: GLuint) -> void
proc "importc" glMultiTexCoordP1uiv(texture: GLenum, typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glMultiTexCoordP2ui(texture: GLenum, typ: GLenum, coords: GLuint) -> void
proc "importc" glMultiTexCoordP2uiv(texture: GLenum, typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glMultiTexCoordP3ui(texture: GLenum, typ: GLenum, coords: GLuint) -> void
proc "importc" glMultiTexCoordP3uiv(texture: GLenum, typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glMultiTexCoordP4ui(texture: GLenum, typ: GLenum, coords: GLuint) -> void
proc "importc" glMultiTexCoordP4uiv(texture: GLenum, typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glNamedBufferData(buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) -> void
proc "importc" glNamedBufferStorage(buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) -> void
proc "importc" glNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) -> void
proc "importc" glNamedFramebufferDrawBuffer(framebuffer: GLuint, buf: GLenum) -> void
proc "importc" glNamedFramebufferDrawBuffers(framebuffer: GLuint, n: GLsizei, bufs: ptr(GLenum)) -> void
proc "importc" glNamedFramebufferParameteri(framebuffer: GLuint, pname: GLenum, param: GLint) -> void
proc "importc" glNamedFramebufferReadBuffer(framebuffer: GLuint, src: GLenum) -> void
proc "importc" glNamedFramebufferRenderbuffer(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void
proc "importc" glNamedFramebufferTexture(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> void
proc "importc" glNamedFramebufferTextureLayer(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void
proc "importc" glNamedRenderbufferStorage(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void
proc "importc" glNamedRenderbufferStorageMultisample(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void
proc "importc" glNewList(list: GLuint, mode: GLenum) -> void
proc "importc" glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> void
proc "importc" glNormal3bv(v: ptr(GLbyte)) -> void
proc "importc" glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> void
proc "importc" glNormal3dv(v: ptr(GLdouble)) -> void
proc "importc" glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> void
proc "importc" glNormal3fv(v: ptr(GLfloat)) -> void
proc "importc" glNormal3i(nx: GLint, ny: GLint, nz: GLint) -> void
proc "importc" glNormal3iv(v: ptr(GLint)) -> void
proc "importc" glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) -> void
proc "importc" glNormal3sv(v: ptr(GLshort)) -> void
proc "importc" glNormalP3ui(typ: GLenum, coords: GLuint) -> void
proc "importc" glNormalP3uiv(typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glNormalPointer(typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: cstr) -> void
proc "importc" glObjectPtrLabel(`ptr`: pointer, length: GLsizei, label: cstr) -> void
proc "importc" glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> void
proc "importc" glPassThrough(token: GLfloat) -> void
proc "importc" glPatchParameterfv(pname: GLenum, values: ptr(GLfloat)) -> void
proc "importc" glPatchParameteri(pname: GLenum, value: GLint) -> void
proc "importc" glPauseTransformFeedback() -> void
proc "importc" glPixelMapfv(map: GLenum, mapsize: GLsizei, values: ptr(GLfloat)) -> void
proc "importc" glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: ptr(GLuint)) -> void
proc "importc" glPixelMapusv(map: GLenum, mapsize: GLsizei, values: ptr(GLushort)) -> void
proc "importc" glPixelStoref(pname: GLenum, param: GLfloat) -> void
proc "importc" glPixelStorei(pname: GLenum, param: GLint) -> void
proc "importc" glPixelTransferf(pname: GLenum, param: GLfloat) -> void
proc "importc" glPixelTransferi(pname: GLenum, param: GLint) -> void
proc "importc" glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) -> void
proc "importc" glPointParameterf(pname: GLenum, param: GLfloat) -> void
proc "importc" glPointParameterfv(pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glPointParameteri(pname: GLenum, param: GLint) -> void
proc "importc" glPointParameteriv(pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glPointSize(size: GLfloat) -> void
proc "importc" glPolygonMode(face: GLenum, mode: GLenum) -> void
proc "importc" glPolygonOffset(factor: GLfloat, units: GLfloat) -> void
proc "importc" glPolygonStipple(mask: ptr(GLubyte)) -> void
proc "importc" glPopAttrib() -> void
proc "importc" glPopClientAttrib() -> void
proc "importc" glPopDebugGroup() -> void
proc "importc" glPopMatrix() -> void
proc "importc" glPopName() -> void
proc "importc" glPrimitiveRestartIndex(index: GLuint) -> void
proc "importc" glPrioritizeTextures(n: GLsizei, textures: ptr(GLuint), priorities: ptr(GLfloat)) -> void
proc "importc" glProgramBinary(program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) -> void
proc "importc" glProgramParameteri(program: GLuint, pname: GLenum, value: GLint) -> void
proc "importc" glProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble) -> void
proc "importc" glProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat) -> void
proc "importc" glProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniform1i(program: GLuint, location: GLint, v0: GLint) -> void
proc "importc" glProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint) -> void
proc "importc" glProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> void
proc "importc" glProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void
proc "importc" glProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void
proc "importc" glProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void
proc "importc" glProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> void
proc "importc" glProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void
proc "importc" glProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void
proc "importc" glProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void
proc "importc" glProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> void
proc "importc" glProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void
proc "importc" glProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void
proc "importc" glProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void
proc "importc" glProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glProvokingVertex(mode: GLenum) -> void
proc "importc" glPushAttrib(mask: GLbitfield) -> void
proc "importc" glPushClientAttrib(mask: GLbitfield) -> void
proc "importc" glPushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: cstr) -> void
proc "importc" glPushMatrix() -> void
proc "importc" glPushName(name: GLuint) -> void
proc "importc" glQueryCounter(id: GLuint, target: GLenum) -> void
proc "importc" glRasterPos2d(x: GLdouble, y: GLdouble) -> void
proc "importc" glRasterPos2dv(v: ptr(GLdouble)) -> void
proc "importc" glRasterPos2f(x: GLfloat, y: GLfloat) -> void
proc "importc" glRasterPos2fv(v: ptr(GLfloat)) -> void
proc "importc" glRasterPos2i(x: GLint, y: GLint) -> void
proc "importc" glRasterPos2iv(v: ptr(GLint)) -> void
proc "importc" glRasterPos2s(x: GLshort, y: GLshort) -> void
proc "importc" glRasterPos2sv(v: ptr(GLshort)) -> void
proc "importc" glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glRasterPos3dv(v: ptr(GLdouble)) -> void
proc "importc" glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void
proc "importc" glRasterPos3fv(v: ptr(GLfloat)) -> void
proc "importc" glRasterPos3i(x: GLint, y: GLint, z: GLint) -> void
proc "importc" glRasterPos3iv(v: ptr(GLint)) -> void
proc "importc" glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) -> void
proc "importc" glRasterPos3sv(v: ptr(GLshort)) -> void
proc "importc" glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void
proc "importc" glRasterPos4dv(v: ptr(GLdouble)) -> void
proc "importc" glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void
proc "importc" glRasterPos4fv(v: ptr(GLfloat)) -> void
proc "importc" glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void
proc "importc" glRasterPos4iv(v: ptr(GLint)) -> void
proc "importc" glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void
proc "importc" glRasterPos4sv(v: ptr(GLshort)) -> void
proc "importc" glReadBuffer(src: GLenum) -> void
proc "importc" glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glReadnPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, bufSize: GLsizei, data: pointer) -> void
proc "importc" glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> void
proc "importc" glRectdv(v1: ptr(GLdouble), v2: ptr(GLdouble)) -> void
proc "importc" glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> void
proc "importc" glRectfv(v1: ptr(GLfloat), v2: ptr(GLfloat)) -> void
proc "importc" glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> void
proc "importc" glRectiv(v1: ptr(GLint), v2: ptr(GLint)) -> void
proc "importc" glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> void
proc "importc" glRectsv(v1: ptr(GLshort), v2: ptr(GLshort)) -> void
proc "importc" glReleaseShaderCompiler() -> void
proc "importc" glRenderMode(mode: GLenum) -> GLint
proc "importc" glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void
proc "importc" glRenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void
proc "importc" glResumeTransformFeedback() -> void
proc "importc" glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> void
proc "importc" glSampleCoverage(value: GLfloat, invert: GLboolean) -> void
proc "importc" glSampleMaski(maskNumber: GLuint, mask: GLbitfield) -> void
proc "importc" glSamplerParameterIiv(sampler: GLuint, pname: GLenum, param: ptr(GLint)) -> void
proc "importc" glSamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: ptr(GLuint)) -> void
proc "importc" glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat) -> void
proc "importc" glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: ptr(GLfloat)) -> void
proc "importc" glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint) -> void
proc "importc" glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: ptr(GLint)) -> void
proc "importc" glScaled(x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glScalef(x: GLfloat, y: GLfloat, z: GLfloat) -> void
proc "importc" glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glScissorArrayv(first: GLuint, count: GLsizei, v: ptr(GLint)) -> void
proc "importc" glScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glScissorIndexedv(index: GLuint, v: ptr(GLint)) -> void
proc "importc" glSecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> void
proc "importc" glSecondaryColor3bv(v: ptr(GLbyte)) -> void
proc "importc" glSecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> void
proc "importc" glSecondaryColor3dv(v: ptr(GLdouble)) -> void
proc "importc" glSecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> void
proc "importc" glSecondaryColor3fv(v: ptr(GLfloat)) -> void
proc "importc" glSecondaryColor3i(red: GLint, green: GLint, blue: GLint) -> void
proc "importc" glSecondaryColor3iv(v: ptr(GLint)) -> void
proc "importc" glSecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort) -> void
proc "importc" glSecondaryColor3sv(v: ptr(GLshort)) -> void
proc "importc" glSecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> void
proc "importc" glSecondaryColor3ubv(v: ptr(GLubyte)) -> void
proc "importc" glSecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> void
proc "importc" glSecondaryColor3uiv(v: ptr(GLuint)) -> void
proc "importc" glSecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort) -> void
proc "importc" glSecondaryColor3usv(v: ptr(GLushort)) -> void
proc "importc" glSecondaryColorP3ui(typ: GLenum, color: GLuint) -> void
proc "importc" glSecondaryColorP3uiv(typ: GLenum, color: ptr(GLuint)) -> void
proc "importc" glSecondaryColorPointer(size: GLint, typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glSelectBuffer(size: GLsizei, buffer: ptr(GLuint)) -> void
proc "importc" glShadeModel(mode: GLenum) -> void
proc "importc" glShaderBinary(count: GLsizei, shaders: ptr(GLuint), binaryformat: GLenum, binary: pointer, length: GLsizei) -> void
proc "importc" glShaderSource(shader: GLuint, count: GLsizei, string: ptr(cstr), length: ptr(GLint)) -> void
proc "importc" glShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> void
proc "importc" glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) -> void
proc "importc" glStencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) -> void
proc "importc" glStencilMask(mask: GLuint) -> void
proc "importc" glStencilMaskSeparate(face: GLenum, mask: GLuint) -> void
proc "importc" glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> void
proc "importc" glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> void
proc "importc" glTexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint) -> void
proc "importc" glTexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void
proc "importc" glTexCoord1d(s: GLdouble) -> void
proc "importc" glTexCoord1dv(v: ptr(GLdouble)) -> void
proc "importc" glTexCoord1f(s: GLfloat) -> void
proc "importc" glTexCoord1fv(v: ptr(GLfloat)) -> void
proc "importc" glTexCoord1i(s: GLint) -> void
proc "importc" glTexCoord1iv(v: ptr(GLint)) -> void
proc "importc" glTexCoord1s(s: GLshort) -> void
proc "importc" glTexCoord1sv(v: ptr(GLshort)) -> void
proc "importc" glTexCoord2d(s: GLdouble, t: GLdouble) -> void
proc "importc" glTexCoord2dv(v: ptr(GLdouble)) -> void
proc "importc" glTexCoord2f(s: GLfloat, t: GLfloat) -> void
proc "importc" glTexCoord2fv(v: ptr(GLfloat)) -> void
proc "importc" glTexCoord2i(s: GLint, t: GLint) -> void
proc "importc" glTexCoord2iv(v: ptr(GLint)) -> void
proc "importc" glTexCoord2s(s: GLshort, t: GLshort) -> void
proc "importc" glTexCoord2sv(v: ptr(GLshort)) -> void
proc "importc" glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) -> void
proc "importc" glTexCoord3dv(v: ptr(GLdouble)) -> void
proc "importc" glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) -> void
proc "importc" glTexCoord3fv(v: ptr(GLfloat)) -> void
proc "importc" glTexCoord3i(s: GLint, t: GLint, r: GLint) -> void
proc "importc" glTexCoord3iv(v: ptr(GLint)) -> void
proc "importc" glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) -> void
proc "importc" glTexCoord3sv(v: ptr(GLshort)) -> void
proc "importc" glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> void
proc "importc" glTexCoord4dv(v: ptr(GLdouble)) -> void
proc "importc" glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> void
proc "importc" glTexCoord4fv(v: ptr(GLfloat)) -> void
proc "importc" glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) -> void
proc "importc" glTexCoord4iv(v: ptr(GLint)) -> void
proc "importc" glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> void
proc "importc" glTexCoord4sv(v: ptr(GLshort)) -> void
proc "importc" glTexCoordP1ui(typ: GLenum, coords: GLuint) -> void
proc "importc" glTexCoordP1uiv(typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glTexCoordP2ui(typ: GLenum, coords: GLuint) -> void
proc "importc" glTexCoordP2uiv(typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glTexCoordP3ui(typ: GLenum, coords: GLuint) -> void
proc "importc" glTexCoordP3uiv(typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glTexCoordP4ui(typ: GLenum, coords: GLuint) -> void
proc "importc" glTexCoordP4uiv(typ: GLenum, coords: ptr(GLuint)) -> void
proc "importc" glTexCoordPointer(size: GLint, typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) -> void
proc "importc" glTexEnvfv(target: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glTexEnvi(target: GLenum, pname: GLenum, param: GLint) -> void
proc "importc" glTexEnviv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) -> void
proc "importc" glTexGendv(coord: GLenum, pname: GLenum, params: ptr(GLdouble)) -> void
proc "importc" glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) -> void
proc "importc" glTexGenfv(coord: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glTexGeni(coord: GLenum, pname: GLenum, param: GLint) -> void
proc "importc" glTexGeniv(coord: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void
proc "importc" glTexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void
proc "importc" glTexParameterIiv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glTexParameterIuiv(target: GLenum, pname: GLenum, params: ptr(GLuint)) -> void
proc "importc" glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> void
proc "importc" glTexParameterfv(target: GLenum, pname: GLenum, params: ptr(GLfloat)) -> void
proc "importc" glTexParameteri(target: GLenum, pname: GLenum, param: GLint) -> void
proc "importc" glTexParameteriv(target: GLenum, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glTexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void
proc "importc" glTexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void
proc "importc" glTexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void
proc "importc" glTexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void
proc "importc" glTexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void
proc "importc" glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTextureBarrier() -> void
proc "importc" glTextureBuffer(texture: GLuint, internalformat: GLenum, buffer: GLuint) -> void
proc "importc" glTextureBufferRange(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void
proc "importc" glTextureParameterIiv(texture: GLuint, pname: GLenum, params: ptr(GLint)) -> void
proc "importc" glTextureParameterIuiv(texture: GLuint, pname: GLenum, params: ptr(GLuint)) -> void
proc "importc" glTextureParameterf(texture: GLuint, pname: GLenum, param: GLfloat) -> void
proc "importc" glTextureParameterfv(texture: GLuint, pname: GLenum, param: ptr(GLfloat)) -> void
proc "importc" glTextureParameteri(texture: GLuint, pname: GLenum, param: GLint) -> void
proc "importc" glTextureParameteriv(texture: GLuint, pname: GLenum, param: ptr(GLint)) -> void
proc "importc" glTextureStorage1D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> void
proc "importc" glTextureStorage2D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void
proc "importc" glTextureStorage2DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> void
proc "importc" glTextureStorage3D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void
proc "importc" glTextureStorage3DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> void
proc "importc" glTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, typ: GLenum, pixels: pointer) -> void
proc "importc" glTextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> void
proc "importc" glTransformFeedbackBufferBase(xfb: GLuint, index: GLuint, buffer: GLuint) -> void
proc "importc" glTransformFeedbackBufferRange(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void
proc "importc" glTransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: ptr(cstr), bufferMode: GLenum) -> void
proc "importc" glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) -> void
proc "importc" glUniform1d(location: GLint, x: GLdouble) -> void
proc "importc" glUniform1dv(location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glUniform1f(location: GLint, v0: GLfloat) -> void
proc "importc" glUniform1fv(location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glUniform1i(location: GLint, v0: GLint) -> void
proc "importc" glUniform1iv(location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glUniform1ui(location: GLint, v0: GLuint) -> void
proc "importc" glUniform1uiv(location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glUniform2d(location: GLint, x: GLdouble, y: GLdouble) -> void
proc "importc" glUniform2dv(location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat) -> void
proc "importc" glUniform2fv(location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glUniform2i(location: GLint, v0: GLint, v1: GLint) -> void
proc "importc" glUniform2iv(location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glUniform2ui(location: GLint, v0: GLuint, v1: GLuint) -> void
proc "importc" glUniform2uiv(location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glUniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glUniform3dv(location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void
proc "importc" glUniform3fv(location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void
proc "importc" glUniform3iv(location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void
proc "importc" glUniform3uiv(location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glUniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void
proc "importc" glUniform4dv(location: GLint, count: GLsizei, value: ptr(GLdouble)) -> void
proc "importc" glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void
proc "importc" glUniform4fv(location: GLint, count: GLsizei, value: ptr(GLfloat)) -> void
proc "importc" glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void
proc "importc" glUniform4iv(location: GLint, count: GLsizei, value: ptr(GLint)) -> void
proc "importc" glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void
proc "importc" glUniform4uiv(location: GLint, count: GLsizei, value: ptr(GLuint)) -> void
proc "importc" glUniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> void
proc "importc" glUniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLdouble)) -> void
proc "importc" glUniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: ptr(GLfloat)) -> void
proc "importc" glUniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: ptr(GLuint)) -> void
proc "importc" glUnmapBuffer(target: GLenum) -> GLboolean
proc "importc" glUnmapNamedBuffer(buffer: GLuint) -> GLboolean
proc "importc" glUseProgram(program: GLuint) -> void
proc "importc" glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> void
proc "importc" glValidateProgram(program: GLuint) -> void
proc "importc" glValidateProgramPipeline(pipeline: GLuint) -> void
proc "importc" glVertex2d(x: GLdouble, y: GLdouble) -> void
proc "importc" glVertex2dv(v: ptr(GLdouble)) -> void
proc "importc" glVertex2f(x: GLfloat, y: GLfloat) -> void
proc "importc" glVertex2fv(v: ptr(GLfloat)) -> void
proc "importc" glVertex2i(x: GLint, y: GLint) -> void
proc "importc" glVertex2iv(v: ptr(GLint)) -> void
proc "importc" glVertex2s(x: GLshort, y: GLshort) -> void
proc "importc" glVertex2sv(v: ptr(GLshort)) -> void
proc "importc" glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glVertex3dv(v: ptr(GLdouble)) -> void
proc "importc" glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void
proc "importc" glVertex3fv(v: ptr(GLfloat)) -> void
proc "importc" glVertex3i(x: GLint, y: GLint, z: GLint) -> void
proc "importc" glVertex3iv(v: ptr(GLint)) -> void
proc "importc" glVertex3s(x: GLshort, y: GLshort, z: GLshort) -> void
proc "importc" glVertex3sv(v: ptr(GLshort)) -> void
proc "importc" glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void
proc "importc" glVertex4dv(v: ptr(GLdouble)) -> void
proc "importc" glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void
proc "importc" glVertex4fv(v: ptr(GLfloat)) -> void
proc "importc" glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) -> void
proc "importc" glVertex4iv(v: ptr(GLint)) -> void
proc "importc" glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void
proc "importc" glVertex4sv(v: ptr(GLshort)) -> void
proc "importc" glVertexArrayAttribBinding(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> void
proc "importc" glVertexArrayAttribFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, typ: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void
proc "importc" glVertexArrayAttribIFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, typ: GLenum, relativeoffset: GLuint) -> void
proc "importc" glVertexArrayAttribLFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, typ: GLenum, relativeoffset: GLuint) -> void
proc "importc" glVertexArrayBindingDivisor(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> void
proc "importc" glVertexArrayElementBuffer(vaobj: GLuint, buffer: GLuint) -> void
proc "importc" glVertexArrayVertexBuffer(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void
proc "importc" glVertexArrayVertexBuffers(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr(GLuint), offsets: ptr(GLintptr), strides: ptr(GLsizei)) -> void
proc "importc" glVertexAttrib1d(index: GLuint, x: GLdouble) -> void
proc "importc" glVertexAttrib1dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttrib1f(index: GLuint, x: GLfloat) -> void
proc "importc" glVertexAttrib1fv(index: GLuint, v: ptr(GLfloat)) -> void
proc "importc" glVertexAttrib1s(index: GLuint, x: GLshort) -> void
proc "importc" glVertexAttrib1sv(index: GLuint, v: ptr(GLshort)) -> void
proc "importc" glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble) -> void
proc "importc" glVertexAttrib2dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) -> void
proc "importc" glVertexAttrib2fv(index: GLuint, v: ptr(GLfloat)) -> void
proc "importc" glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort) -> void
proc "importc" glVertexAttrib2sv(index: GLuint, v: ptr(GLshort)) -> void
proc "importc" glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glVertexAttrib3dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> void
proc "importc" glVertexAttrib3fv(index: GLuint, v: ptr(GLfloat)) -> void
proc "importc" glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> void
proc "importc" glVertexAttrib3sv(index: GLuint, v: ptr(GLshort)) -> void
proc "importc" glVertexAttrib4Nbv(index: GLuint, v: ptr(GLbyte)) -> void
proc "importc" glVertexAttrib4Niv(index: GLuint, v: ptr(GLint)) -> void
proc "importc" glVertexAttrib4Nsv(index: GLuint, v: ptr(GLshort)) -> void
proc "importc" glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> void
proc "importc" glVertexAttrib4Nubv(index: GLuint, v: ptr(GLubyte)) -> void
proc "importc" glVertexAttrib4Nuiv(index: GLuint, v: ptr(GLuint)) -> void
proc "importc" glVertexAttrib4Nusv(index: GLuint, v: ptr(GLushort)) -> void
proc "importc" glVertexAttrib4bv(index: GLuint, v: ptr(GLbyte)) -> void
proc "importc" glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void
proc "importc" glVertexAttrib4dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void
proc "importc" glVertexAttrib4fv(index: GLuint, v: ptr(GLfloat)) -> void
proc "importc" glVertexAttrib4iv(index: GLuint, v: ptr(GLint)) -> void
proc "importc" glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> void
proc "importc" glVertexAttrib4sv(index: GLuint, v: ptr(GLshort)) -> void
proc "importc" glVertexAttrib4ubv(index: GLuint, v: ptr(GLubyte)) -> void
proc "importc" glVertexAttrib4uiv(index: GLuint, v: ptr(GLuint)) -> void
proc "importc" glVertexAttrib4usv(index: GLuint, v: ptr(GLushort)) -> void
proc "importc" glVertexAttribBinding(attribindex: GLuint, bindingindex: GLuint) -> void
proc "importc" glVertexAttribDivisor(index: GLuint, divisor: GLuint) -> void
proc "importc" glVertexAttribFormat(attribindex: GLuint, size: GLint, typ: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void
proc "importc" glVertexAttribI1i(index: GLuint, x: GLint) -> void
proc "importc" glVertexAttribI1iv(index: GLuint, v: ptr(GLint)) -> void
proc "importc" glVertexAttribI1ui(index: GLuint, x: GLuint) -> void
proc "importc" glVertexAttribI1uiv(index: GLuint, v: ptr(GLuint)) -> void
proc "importc" glVertexAttribI2i(index: GLuint, x: GLint, y: GLint) -> void
proc "importc" glVertexAttribI2iv(index: GLuint, v: ptr(GLint)) -> void
proc "importc" glVertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint) -> void
proc "importc" glVertexAttribI2uiv(index: GLuint, v: ptr(GLuint)) -> void
proc "importc" glVertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint) -> void
proc "importc" glVertexAttribI3iv(index: GLuint, v: ptr(GLint)) -> void
proc "importc" glVertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> void
proc "importc" glVertexAttribI3uiv(index: GLuint, v: ptr(GLuint)) -> void
proc "importc" glVertexAttribI4bv(index: GLuint, v: ptr(GLbyte)) -> void
proc "importc" glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> void
proc "importc" glVertexAttribI4iv(index: GLuint, v: ptr(GLint)) -> void
proc "importc" glVertexAttribI4sv(index: GLuint, v: ptr(GLshort)) -> void
proc "importc" glVertexAttribI4ubv(index: GLuint, v: ptr(GLubyte)) -> void
proc "importc" glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> void
proc "importc" glVertexAttribI4uiv(index: GLuint, v: ptr(GLuint)) -> void
proc "importc" glVertexAttribI4usv(index: GLuint, v: ptr(GLushort)) -> void
proc "importc" glVertexAttribIFormat(attribindex: GLuint, size: GLint, typ: GLenum, relativeoffset: GLuint) -> void
proc "importc" glVertexAttribIPointer(index: GLuint, size: GLint, typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glVertexAttribL1d(index: GLuint, x: GLdouble) -> void
proc "importc" glVertexAttribL1dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble) -> void
proc "importc" glVertexAttribL2dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glVertexAttribL3dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> void
proc "importc" glVertexAttribL4dv(index: GLuint, v: ptr(GLdouble)) -> void
proc "importc" glVertexAttribLFormat(attribindex: GLuint, size: GLint, typ: GLenum, relativeoffset: GLuint) -> void
proc "importc" glVertexAttribLPointer(index: GLuint, size: GLint, typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glVertexAttribP1ui(index: GLuint, typ: GLenum, normalized: GLboolean, value: GLuint) -> void
proc "importc" glVertexAttribP1uiv(index: GLuint, typ: GLenum, normalized: GLboolean, value: ptr(GLuint)) -> void
proc "importc" glVertexAttribP2ui(index: GLuint, typ: GLenum, normalized: GLboolean, value: GLuint) -> void
proc "importc" glVertexAttribP2uiv(index: GLuint, typ: GLenum, normalized: GLboolean, value: ptr(GLuint)) -> void
proc "importc" glVertexAttribP3ui(index: GLuint, typ: GLenum, normalized: GLboolean, value: GLuint) -> void
proc "importc" glVertexAttribP3uiv(index: GLuint, typ: GLenum, normalized: GLboolean, value: ptr(GLuint)) -> void
proc "importc" glVertexAttribP4ui(index: GLuint, typ: GLenum, normalized: GLboolean, value: GLuint) -> void
proc "importc" glVertexAttribP4uiv(index: GLuint, typ: GLenum, normalized: GLboolean, value: ptr(GLuint)) -> void
proc "importc" glVertexAttribPointer(index: GLuint, size: GLint, typ: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) -> void
proc "importc" glVertexBindingDivisor(bindingindex: GLuint, divisor: GLuint) -> void
proc "importc" glVertexP2ui(typ: GLenum, value: GLuint) -> void
proc "importc" glVertexP2uiv(typ: GLenum, value: ptr(GLuint)) -> void
proc "importc" glVertexP3ui(typ: GLenum, value: GLuint) -> void
proc "importc" glVertexP3uiv(typ: GLenum, value: ptr(GLuint)) -> void
proc "importc" glVertexP4ui(typ: GLenum, value: GLuint) -> void
proc "importc" glVertexP4uiv(typ: GLenum, value: ptr(GLuint)) -> void
proc "importc" glVertexPointer(size: GLint, typ: GLenum, stride: GLsizei, pointer: pointer) -> void
proc "importc" glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void
proc "importc" glViewportArrayv(first: GLuint, count: GLsizei, v: ptr(GLfloat)) -> void
proc "importc" glViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> void
proc "importc" glViewportIndexedfv(index: GLuint, v: ptr(GLfloat)) -> void
proc "importc" glWindowPos2d(x: GLdouble, y: GLdouble) -> void
proc "importc" glWindowPos2dv(v: ptr(GLdouble)) -> void
proc "importc" glWindowPos2f(x: GLfloat, y: GLfloat) -> void
proc "importc" glWindowPos2fv(v: ptr(GLfloat)) -> void
proc "importc" glWindowPos2i(x: GLint, y: GLint) -> void
proc "importc" glWindowPos2iv(v: ptr(GLint)) -> void
proc "importc" glWindowPos2s(x: GLshort, y: GLshort) -> void
proc "importc" glWindowPos2sv(v: ptr(GLshort)) -> void
proc "importc" glWindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> void
proc "importc" glWindowPos3dv(v: ptr(GLdouble)) -> void
proc "importc" glWindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> void
proc "importc" glWindowPos3fv(v: ptr(GLfloat)) -> void
proc "importc" glWindowPos3i(x: GLint, y: GLint, z: GLint) -> void
proc "importc" glWindowPos3iv(v: ptr(GLint)) -> void
proc "importc" glWindowPos3s(x: GLshort, y: GLshort, z: GLshort) -> void
proc "importc" glWindowPos3sv(v: ptr(GLshort)) -> void
