# NumErrors:      27

proc foo(arg: i32) -> i64 = {
  printf("foo1: %d\n", i32(arg))
  i64(arg) * i64(arg)
}

proc foo(arg: i64) -> i64 = {
  printf("foo2: %d\n", i32(arg))
  arg * arg
}

## this should be a doc comment
## spanning multiple lines

proc _foo(arg: i64) -> i64 = 0     # Error: proc identifier may not start or end with _ (underscore), reserved for internal usage
proc foo_(arg: i64) -> i64 = 0     # Error: proc identifier may not start or end with _ (underscore), reserved for internal usage
proc foo__bar(arg: i64) -> i64 = 0 # Error: proc identifier may not use __ (double underscore), reserved for internal usage

proc bar1(_arg: i64) -> i64 = 0     # Error: proc arg identifier may not start or end with _ (underscore), reserved for internal usage
proc bar2(arg_: i64) -> i64 = 0     # Error: proc arg identifier may not start or end with _ (underscore), reserved for internal usage
proc bar3(arg__0: i64) -> i64 = 0   # Error: proc arg identifier may not use __ (double underscore), reserved for internal usage

# `untyped` shall not be allowed outside the macro/template context.
proc bar3(arg0: untyped) -> i64 = 0 # Error: Type not found: untyped

proc main() -> i64 = {
  let tmp0 = 321 # Error: int literal needs to have a unique type constraint, but got 'no constraint'
  let tmp1 = 45.67 # Error: float literal needs to have a unique type constraint, but got 'no constraint'
  let tmp2 = "abcdef" # Error: string literal needs to have a unique type constraint, but got 'no constraint'
  let tmp: i8 = 123
  foo(tmp) # Error: expected type 'i32 | i64' but got type 'i8'
  tmp -= 8 # Error: expression must be mutable
  let str: str = "abcdef"
  baz(str, tmp) # Error: proc not found: baz(str, i8)
  let x : i32 = "somestring" # Error: expected type 'i32' but got type '"somestring"'
  let x_ : i32 = 123 # Error: var identifier may not start or end with _ (underscore), reserved for internal usage
  let _x : i32 = 321 # Error: var identifier may not start or end with _ (underscore), reserved for internal usage
  let x__x : str = "abc" # Error: var identifier may not use __ (double underscore), reserved for internal usage
  let tmp3 = i8(128) # Error: int literal needs to have a unique type constraint, but got 'f32 | f64 | i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64'
  # char
  let c: char = "abc" # Error: char lit must have exactly one rune, but it has 3 runes
  let d: char = ""    # Error: char lit must have exactly one rune, but it has 0 runes
  let e: char = "\nx" # Error: char lit must have exactly one rune, but it has 2 runes
  #
  let myarr1 = [1:i32,2,3,4]
  var myarr2 = [4:i32,3,2,1]
  myarr1[2] = 321 # Error: expression must be mutable
  {if tmp > 120 do myarr1 else myarr2}[1] = 123 # Error: expression must be mutable

  static({ # Error: eval for *main.TcCodeBlock node not implemented
    let t1: u64 = 0xabcdef1234567890
    let t2: u64 = 0xdeadbeefdeadbeef
    printf("%x %x %x %x\n", bitand(t1,t2), bitor(t1,t2), bitxor(t1,t2), bitnot(t2))
  })

  return 0
}

proc foo() = {} # Error: proc def needs result type specified

proc shing(a,b,c: i32) -> i32 = a+b+c # Error: previous definition here
proc shing(d,e,f: i32) -> i32 = d*e*f # Error: definition with colliding signature: shing(d: i32, e: i32, f: i32): i32

# proc bar : i32 = {0} # TODO Error: "proc def requires an argument list")
