

trait HasFoo(T) = {
  proc bar(T, i32)
  proc baz(str, f32, T)
}

trait CombineTrait(T,V) = {
  bar(T,V): int
}

trait Ord(T) = {
  compare(x: T, y: T): int
}

proc >[Ord(T)](x, y: T):bool = compare(x, y) > 0

proc <[T](x, y: T):bool = compare(x, y):int < 0 # <- falls nicht praktikabel

type MyStruct = struct {
  a: int
}

proc compare(x,y: MyStruct): int

proc foo[HasFoo(T), CombinaTrait(T,V)](arg1,arg2: T) = {
  bar(arg1, 13)
  bar(arg2, 14)

  let myint = 123:i32

  myint == 12
  12 == myint # <- fehler myint is not of type 12



  let tmp1: str = "abcdef"
  let tmp2: f32 = 123

  baz(tmp1, tmp2, arg1)



}


proc main() = {
   var a: int = 1337
   var b: int = 4711

   foo(a,b)
}
