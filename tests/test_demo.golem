
## my test type
## a: the first part in a 64 bit integer with no meaning
## b: this part is also a number but floating and as meaningful as `a`
## c: some nonsense string member
type MyStruct = struct {
  a: i64
  b: f64
  c: str
}

proc myfun1(a, b, c: i64): i64 = {
  return a + b * c
  # a + b * c
}

proc myfun2(a,b:i64, c: i64): i64 = a * b + a * c
#proc myfun2(a,b,c: i64): i64 = a * b + a * c

## an empty function with nothing in it
## a: first argument
## b: another argument
## c: yet another argument
## d: even more arugment that is very very importanti
## e: yabadabaduditaaa
## f:
proc myfun3(a,b,c,d,e,f: str): void = {
}

proc foobar(arg: MyStruct): void = {
  printf("a: %d\n", arg.a)
  printf("b: %f\n", arg.b)
  printf("c: %s\n", arg.c)
}

proc max(a,b: i64): i64 = if a > b do a else b


proc max(a,b: f64): f64 = {
  if a < b do {
    return b
  } else {
    return a
  }
}

## Tests side effects behavior of `and` and `or` operators.
proc testBooleanOpsWithBlockExpr(): void = {
  var arr: array(2, bool) = [true, false]
  for c4 in arr do {
    for c3 in arr do {
      for c2 in arr do {
        for c1 in arr do {
          if { printf("1"); c1} and { printf("2"); c2} or {printf("3"); c3} and {printf("4"); c4} do {
             printf("5")
          }
          printf("\n")
        }
      }
    }
  }
}

proc maxParenDepth(expr: str): i64 = {
  var depth: i64 = 0
  var maxDepth: i64 = 0
  for c in expr do {
    if c == '(' do depth += 1
    if c == ')' do depth -= 1
    maxDepth = max(depth, maxDepth)
  }
  maxDepth
}

## this should be a doc comment.
proc main():i64 = {
  let x = myfun1(12, 13, 14)
  let y = myfun2(15, 16, 17)
  printf("Hallo Welt!\n")
  printf("x: %d y: %d\n", x, y)

  ## f1: some useless doc comment
  let f1 = 123:f64
  let f2: f64 = 567
  let i1: i64 = 123
  let i2: i64 = 456

  printf("abc %d \n", 123:i8);

  # let myf32 = 123456789:f32
  printf("max(f1,f2) = %f\n", max(f1,f2))
  printf("max(i1,i2) = %d\n", max(i1,i2))

  ## exprStr: a string containing an expression to count parenthesis depth
  let exprStr = "(1+(2*3)+((8)/4))+1"
  let depth = maxParenDepth(exprStr)
  printf("max paren depth: %d\n", i32(depth))
  testBooleanOpsWithBlockExpr()
  let myArray: array(7, i64) = [123, -456, -789, -234, 567, 891, -123]
  let myOtherArray: array(2, f64) = [12.34, 56.78]
  var myStruct: MyStruct = [a=12, b=34.56, c="def"]
  printf("initialized Values\n")
  printf("a: %d b: %f c: %s\n", myStruct.a, myStruct.b, myStruct.c)
  myStruct.a = 23
  myStruct.b = 45.67
  myStruct.c = "efg"
  foobar(myStruct)
  printf("a: %d b: %f c: %s\n", myStruct.a, myStruct.b, myStruct.c)

  printf("max test: max(a,b): %d\n", i32(max(x,y)))

  var ff1 = 123.456:f64
  let ff2 = 654.321:f64
  ff1 += 8
  printf("ff1: %f ff2: %f\n", ff1, ff2);
  printf("max test: max(fx,f2): %f\n", max(ff1, ff2))
  printf("printftest %d %d %s\n", 1:i32, 2:i32, "mystring")
  printf("myArray[3]: %d\n", myArray[3])

  0
}
