


type MyStruct = struct {
  a: i64
  b: f64
  c: str
}

type MyEnum = enum {
  Option1
  Option2
  Option3
}

type StructNest1 = struct {
  nest1: MyStruct
}

type StructNest2 = struct {
  nest2: StructNest1
}

type StructNest3 = struct {
  nest3: StructNest2
}

type FooFlags = enum { Any; Words; Work; As; Enum; Values }

proc foo(arg: MyStruct, flags: set(FooFlags)): void = {
  printf("a: %d b: %f c: %s\n", arg.a, arg.b, arg.c)
  let b1 = contains(flags, Words)
  let b2 = contains(flags, As)
  let b3:bool = contains(flags, Enum)
}

proc bar(arg1: i64, arg2: MyEnum): void = {
  printf("bar:\n  arg1: %d, string(arg2): %s int(arg2): %d\n", arg1, string(arg2), i32(arg2))
}

proc bar(arg1: i64, arg2: str): void = {}

proc main():i32 = {
  var myStruct1: MyStruct = [a=12, b=34.56, c="def"] # type at variable def, all fields assigned
  var myStruct2 = [12, 34.56, "def"]:MyStruct        # in order initialization, postfix type assertion
  var myStruct3 = [a=78, c="ghi"]:MyStruct           # default value for b

  var myEnumSet : set(MyEnum) = [Option1, Option3]

  #var myEnum = Option2:MyEnum
  bar(123:i64, MyEnum(2:i64))
  bar(654:i64, Option1:MyEnum)

  #printf("default Values\n")
  printf("a: %d b: %f c: %s\n", myStruct1.a, myStruct1.b, myStruct1.c)
  printf("a: %d b: %f c: %s\n", myStruct2.a, myStruct2.b, myStruct2.c)
  printf("a: %d b: %f c: %s\n", myStruct3.a, myStruct3.b, myStruct3.c)
  foo(myStruct1, [Any,Work,As])

  # struct nesting
  var myNestedStruct: StructNest3
  myNestedStruct.nest3.nest2.nest1.a = 123
  printf("a: %d\n", myNestedStruct.nest3.nest2.nest1.a)
  0
}
