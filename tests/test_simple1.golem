#proc assert(cond: Bool)

proc mutableArgFunc(var arg: f32, somearg: f32) -> void = {
  arg += somearg
  arg *= somearg
}

proc foo(a,b,c,d: f32) -> f32 = a*b+c*d

proc main() -> i32 = {
  {
    let x = 1:i32
    let y = 2:i32
    assert((x <  y) == true)
    assert((x <= y) == true)
    assert((x == y) == false)
    assert((x >= y) == false)
    assert((x >  y) == false)
  }

  {
    let x = 1.0:f32
    let y = 2.0:f32
    assert((x <  y) == true)
    assert((x <= y) == true)
    assert((x == y) == false)
    assert((x >= y) == false)
    assert((x >  y) == false)
  }

  {
    let x = 1.0:f64
    let y = 2.0:f64
    let z = 3.0:f64
    printf("abc %f\n", (x + y) * z)
  }

  { # type assertions
    let tmp1: i8 = 123
    let tmp2 = 123:i8
  }

  {
    let high1 = high(type(i8))
    let high2 = high(type(i16))
    let high3 = high(type(i32))
    let high4 = high(type(i64))

    assert(high1 == 127)
    assert(high2 == 32767)
    assert(high3 == 2147483647)
    assert(high4 == 9223372036854775807)

    assert(low(type(i8)) == -128)
    assert(low(type(i16)) == -32768)
    assert(low(type(i32)) == -2147483648)
    assert(low(type(i64)) == -9223372036854775808)
  }

  {
    var myfloat1 = 12:f32
    let myfloat2:f32 = 13

    mutableArgFunc(myfloat1, myfloat2)
    printf("myfloat1: %f\n", myfloat1)
    assert(myfloat1 == 325)
    # test infix call in discard argument
    discard myfloat1 * myfloat2
    # test with newline after operator
    discard myfloat1 *
      myfloat2

    var myfloat3 = myfloat1 * myfloat2
    printf("myfloat3: %f\n", myfloat3)
    assert(myfloat3 == 4225)

    # test newline escape
    # TODO enable this
    #discard myfloat1 \ # test newline escape with comment afterwards
    #* 7
  }

  {
    # test call with argument on multiple lines
    let londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong1 = 1.25:f32
    let londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong2 = 3.375:f32
    let londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong3 = 5.625:f32
    let londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong4 = 7.875:f32

    let theResult = foo(
      londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong1,
      londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong2,
      londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong3,
      londIdentifierThatIsLongForNoParticularReasonExceptForBeeingLong4
    )
    printf("theResult: %f\n", theResult)
  }

  {
    # test casting around
    # TODO, test more here. This is absolute minimal effort test right now
    let myFloat = 1.0:f64
    var myIntA = myFloat | cast(type(i64))
    assert(myIntA == 0x3ff0000000000000)
    var myIntB = myFloat | conv(type(i64))
    assert(myIntB == 1)
  }

  {
    let t1: u64 = 0xabcdef1234567890
    let t2: u64 = 0xdeadbeefdeadbeef
    let t3: u64 = 0xfedcba1234567890
    printf("%x %x %x %x\n", bitand(t1,t2), bitor(t1,t2), bitxor(t1,t2), bitnot(t2))
    printf("%x %x %x\n", bitand(t1,t2,t3), bitor(t1,t2,t3), bitxor(t1,t2,t3))
  }

  return 0
}
