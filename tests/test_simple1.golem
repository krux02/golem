#proc assert(cond: Bool)

proc mutableArgFunc(arg: var f32, somearg: f32):void = {
  arg += somearg
  arg *= somearg
}

proc main():i32 = {
  {
    let x = 1:i32
    let y = 2:i32
    assert((x <  y) == true)
    assert((x <= y) == true)
    assert((x == y) == false)
    assert((x >= y) == false)
    assert((x >  y) == false)
  }

  {
    let x = 1.0:f32
    let y = 2.0:f32
    assert((x <  y) == true)
    assert((x <= y) == true)
    assert((x == y) == false)
    assert((x >= y) == false)
    assert((x >  y) == false)
  }

  {
    let x = 1.0:f64
    let y = 2.0:f64
    let z = 3.0:f64
    printf("abc %f\n", (x + y) * z)
  }

  { # type assertions
    let tmp1: i8 = 123
    let tmp2 = 123:i8
    # let tmp3 = i8(128) # TODO uncomment this, problem
  }

  {
    let high1 = high(type i8)
    let high2 = high(type i16)
    let high3 = high(type i32)
    let high4 = high(type i64)

    assert(high1 == 127)
    assert(high2 == 32767)
    assert(high3 == 2147483647)
    assert(high4 == 9223372036854775807)

    assert(low(type i8) == -128)
    assert(low(type i16) == -32768)
    assert(low(type i32) == -2147483648)
    # TODO this should also work without the () around the negative literal
    assert(low(type i64) == (-9223372036854775807):i64 - 1)
  }

  {
    var myfloat1 = 12:f32
    let myfloat2:f32 = 13
    mutableArgFunc(myfloat1, myfloat2)
    printf("myfloat1: %f\n", myfloat1)
    assert(myfloat1 == 325)
    assert(myfloat1 == 325)
  }

  return 0
}
