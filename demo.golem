

#  array[6,Int]
let myArray = [123, 456, 789, 234, 567, 891, 123]

type MyStruct = struct {
  a: int
  b: float
  c: string
}

proc myfun1(a, b, c: int): int = {
  return a + b * c
  # a + b * c
}

proc myfun2(a,b:int; c: int): int = a * b + a * c
#proc myfun2(a,b,c: int): int = a * b + a * c

# empty function with nothing in it
proc myfun3(a,b,c,d,e,f: string): void = {}

proc max(a,b: int): int = {
  if a > b {a} else {b}
}

proc maxParenDepth(expr: string): int = {
  var depth: int = 0
  var maxDepth: int = 0
  for c in expr {
    if c == '(' {
      depth += 1
    }
    if c == ')' {
      depth -= 1
    }
    maxDepth = max(depth, maxDepth)
  }
  maxDepth
}

## this is a doc comment
proc main():int = {
  let x:int = myfun1(12, 13, 14)
  let y = myfun2(15, 16, 17)
  printf("Hallo Welt!\n")
  printf("x: %d y: %d\n", x, y)

  let exprStr = "(1+(2*3)+((8)/4))+1"
  let depth = maxParenDepth(exprStr)
  printf("max paren depth: %d\n", depth)
  0
}
