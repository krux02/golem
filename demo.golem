# (progn (load (expand-file-name "golem-mode.el")) (golem-mode))

type MyStruct = struct {
  a: int
  b: float
  c: string
}

proc myfun1(a, b, c: int): int = {
  return a + b * c
  # a + b * c
}

proc myfun2(a,b:int; c: int): int = a * b + a * c
#proc myfun2(a,b,c: int): int = a * b + a * c

# empty function with nothing in it
proc myfun3(a,b,c,d,e,f: string): void = {

}

proc foobar(arg: MyStruct): void = {
  printf("a: %d\n", arg.a)
  printf("b: %f\n", arg.b)
  printf("c: %s\n", arg.c)
}

proc max(a,b: int): int = {
  if a > b do a else b
}

proc max(a,b: float): float = {
  if a < b do b else a
}

## Tests side effects behavior of `and` and `or` operators.
proc testBooleanOpsWithBlockExpr(): void = {
  var arr: array(2)[bool] = [true, false]
  for c4 in arr do {
    for c3 in arr do {
      for c2 in arr do {
        for c1 in arr do {
          if { printf("1"); c1} and { printf("2"); c2} or {printf("3"); c3} and {printf("4"); c4} do {
             printf("5")
          }
          printf("\n")
        }
      }
    }
  }
}

proc maxParenDepth(expr: string): int = {
  var depth: int = 0
  var maxDepth: int = 0
  for c in expr do {
    if c == '(' do depth += 1
    if c == ')' do depth -= 1
    maxDepth = max(depth, maxDepth)
  }
  maxDepth
}

## this should be a doc comment.
proc main():int = {
  let x:int = myfun1(12, 13, 14)
  let y = myfun2(15, 16, 17)
  printf("Hallo Welt!\n")
  printf("x: %d y: %d\n", x, y)

  let exprStr = "(1+(2*3)+((8)/4))+1"
  let depth = maxParenDepth(exprStr)
  printf("max paren depth: %d\n", depth)
  testBooleanOpsWithBlockExpr()
  let myArray: array(7)[int] = [123, -456, -789, -234, 567, 891, -123]
  let myOtherArray: array(2)[float] = [12.34, 56.78]
  var myStruct: MyStruct# = :MyStruct{, a:12, b:34.56, c:"def"}

  #myStruct.a = 12
  #myStruct.b = 34.56
  #myStruct.c = "def"
  printf("a: %d b: %f c: %s", myStruct.a, myStruct.b, myStruct.c)

  printf("max test: max(a,b): %d\n", max(x,y))

  let f1: float = 123.456
  let f2: float = 654.321
  printf("f1: %f f2: %f\n", f1, f2);
  printf("max test: max(fx,f2): %f\n", max(f1,f2))
  0
}


