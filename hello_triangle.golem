emit "#include <GL/gl.h>"
emit "#include <SDL2/SDL.h>"

import "sdl2"
import "gl"

proc main(): i32 = {
  let window = SDL_CreateWindow("hello triangle", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 640, 480, SDL_WINDOW_OPENGL)
  assert(window != nil)
  # SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 4)
  # SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 6)
  # SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, SDL_GL_CONTEXT_DEBUG_FLAG)
  # SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE)
  let context: SDL_GLContext = SDL_GL_CreateContext(window)

  var running: bool = true

  # TODO -1:f32 without braces should work
  let vertexData = [-1:f32,-1,0,1, 1,-1,0,1, 0,1,0,1]
  # let colorData = [1:f32,0,0,0, 0,1,0,0, 0,0,1,0]

  while running do {
    var event: SDL_Event
    while SDL_PollEvent(addr(event)) do {
      if event.`type` == SDL_QUIT do {
        running = false
      } else if event.`type` == SDL_KEYDOWN and event.key.keysym.scancode == SDL_SCANCODE_ESCAPE do {
        running = false
      }
    }

    glClear(GL_COLOR_BUFFER_BIT + GL_DEPTH_BUFFER_BIT)

    glBegin(GL_TRIANGLES)
    glColor3f(1,0,0)
    glVertex2f(-1,-1)
    glColor3f(0,1,0)
    glVertex2f(1,-1)
    glColor3f(0,0,1)
    glVertex2f(0,1)
    glEnd()

    SDL_GL_SwapWindow(window)
  }

  return 0
}
