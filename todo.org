* DONE just use keywords
* DONE implement type checking on 'return'
* DONE implement ~context~ type and parameter for ~TypeCheck~ functions
* DONE provide proper error messages or error instead of panic
* DONE negative literals

* BUG: compiler crash

#+begin_src golem
proc foo(arg: int32): void = {
  printf("foo1: %d\n", int32(arg))
}


proc foo(arg: int64): void = {
  printf("foo2: %d\n", int32(arg))
}

## this should be a doc comment.
proc main():int64 = {
  let tmp: int8 = 123
  foo(tmp)
}
#+end_src


* TODO default int, default float
* TODO add ability for type assertions

#+begin_src golem

let tmp1: int8 = 123
let tmp2 = 123:int8
let tmp3 = int8(128)

#+end_src
* TODO maybe return TypeFloat like in Nim for integer division?
* TODO tests
* TODO pointer
* TODO call by reference
* TODO better distinguish go type information vs golem type information better
* TODO generic arguments
* TODO vm for compile time code execution
* TODO restrict operator precedence to common knowledeg cases (+-*/) require explicit braces everywhere else.
* TODO introduce ~expectAndEatToken~
* DONE static overloading
* TODO C++ interop
* TODO automatic narrowing of literals when type is known from outside.
* TODO make `registerBuiltinX` a method of scope.
* TODO full set of types 
** DONE int float in all sizes
** TODO vector/simd types
** TODO string
** TODO array
** TODO set
* TODO struct
** TODO literals
** TODO passing as function argument
* TODO documentation structuere
* TODO dotExpr should be strictly limited to two elements
