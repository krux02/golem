* TODO fix problems with printf
 1. test %v for all supported types
 2. test %c for chars, especially non ASCII

* TODO make char literals a variant ot string literals
* TODO add infix operators ~in~ and ~notin~ for enum sets
enable lines in [[file:tests/test_struct_enum.golem][test struct enum]]

* TODO find a better syntax for Type : TypeConstraint as colon is already reserved for value : type separation
* TODO allow to disable overloading for some functions
* TODO fix or remove newline escape, curently it has many problems
* TODO trait system
* TODO generic functions !!!
* TODO make addr a generic builtin. suggestions like "expected type 'array(16, f32) | array(1, cstring)' but got type 'str'" are not helpful
* TODO test unmatched { ( [ situation
* TODO inversion of control in mutability inference. Instead of `GetMutable` do request mutability

Currently, ~GetMutable~ returns, if an expression is mutable. I

* TODO templates
* TODO type substitution/generic instancing after overload resolution
* TODO integer division with two return values
* TODO restrict operator precedence to common knowledge cases (+-*/) require explicit braces everywhere else.
* TODO persistent logging
** compiler bootstrapping time,
** test time
** lines of code (in tests),
* TODO C++ interop
* TODO testing
** TODO default value
** TODO operator precedence when many ~:~ and ~.~ are in use
** TODO correct ~Source~ values.
** TODO full coverage of all error messages
* TODO full set of types
** TODO vector/matrix/simd types
** DONE string
** DONE enum
** DONE enum set
** DONE int float in all sizes
** DONE array
** DONE struct
** DONE literals
* TODO code navigation
 [ ] jump to catch from throw
 [ ] jump to throw from catch
 [ ] jump to definition
* TODO potential ambiguous syntax between type definition and type context
* TODO have macros
** TODO virtual machine for compile time code execution
* done
** ensure that int lit types are actually instantiated only once
** implement type checking on 'return'
** implement ~context~ type and parameter for ~TypeCheck~ functions
** provide proper error messages or error instead of panic
** negative literals
** error reporting instead of compiler crashing
** add error type to represent invalid / non-typeable ast
** test infrastructure compiler error reporting
** add field values to struct literals
** testing framework to test the compiler
** allow conversion between enum/int/string
** enum set type
** consistent Typ/Type member name
** distinguish between the type and the expression that defines it
** make high/low values of integer types somehow accessible.
** array access
** pointer
** have varargs for macros (only)
** define order to generate type definitions in
** generic arguments (important for builtin array access)
** add ability for type assertions
** static overloading
** automatic narrowing of literals when type is known from outside.
** documentation structure
** packages and import
** reserve double underscore and underscore pre- and postfix
** C interop (emit and function declarations)
** pass by reference
** mutability inference as orthogonal information to the type of expressions, get rid of MutableType
** display parsing errors as normal error messages
** package linker flags for gl and sdl2
** allow addr, ptr, var, not, discard, return as general prefix expression/operator and test it.
** allow newline in a function call.
** ensure naked literals are conveted to an actual type
