* TODO mutability inference as orthogonal information to the type of expressions, get rid of MutableType
* TODO inversion of control in mutability inference. Instead of `GetMutable` do request mutability
* TODO display parsing errors as normal error messages
* TODO templates
* TODO generic functions
* TODO type substitution/generic instancing after overload resolution
* TODO have macros (stubs at least)
* TODO implement ~true/false~ as enum, currently a big hack.
* TODO C++ interop
* TODO not all ast nodes have correct ~source~ values, for example ~[]~, code needs to deal with it
* TODO full coverage of all error messages
* TODO test operator precedence when many ~:~ and ~.~ are in use (currently buggy)
* TODO maybe return TypeFloat like in Nim for integer division, or a tuple with remainder?
* TODO virtual machine for compile time code execution
* TODO restrict operator precedence to common knowledge cases (+-*/) require explicit braces everywhere else.
* TODO test default value
* TODO compiler passes for some transformations (e.g. moving literals to constants)
* TODO persistent statistic logging about compiler bootstrapping time, lines of code, test time, test lines of code
* TODO performance tracking over time to know when the compiler gets slower and which commits cause compilation slowdowns.
* TODO full set of types
** TODO vector/matrix/simd types
** DONE string
** DONE enum
** DONE enum set
** DONE int float in all sizes
** DONE array
** DONE struct
** DONE literals
* TODO code navigation
 [ ] jump to catch from throw
 [ ] jump to throw from catch
 [ ] jump to definition
* TODO potential ambiguous syntax between type definition and type context
* done
** ensure that int lit types are actually instantiated only once
** implement type checking on 'return'
** implement ~context~ type and parameter for ~TypeCheck~ functions
** provide proper error messages or error instead of panic
** negative literals
** error reporting instead of compiler crashing
** add error type to represent invalid / non-typeable ast
** test infrastructure compiler error reporting
** add field values to struct literals
** testing framework to test the compiler
** allow conversion between enum/int/string
** enum set type
** consistent Typ/Type member name
** distinguish between the type and the expression that defines it
** make high/low values of integer types somehow accessible.
** array access
** pointer
** have varargs for macros (only)
** define order to generate type definitions in
** generic arguments (important for builtin array access)
** add ability for type assertions
** static overloading
** automatic narrowing of literals when type is known from outside.
** documentation structure
** packages and import
** reserve double underscore and underscore pre- and postfix
** C interop (emit and function declarations)
** pass by reference
