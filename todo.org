* TODO proper testing for the | syntax

* TODO Kontakt: Wirtschaftfördering der Stadt Bonn

Kostenlose Verstaltung zum Thema Gründung

IHK Köln
Gründungskompass: Unsere Veranstantung zum Thema Gründung

Fundraising

* TODO untyped type

Implement a constraint that when a function is registered with an argument of untyped type, disable all overloading for that function name.


* TODO Annotation Syntax
* TODO find a better syntax for general annotations.

Annotations need to be ignorable. They need to be a type of synatx that isn't seen my regular ast pattern matching.
An annotation like ~ident @ <Expr>~ must match the pattern of just an identifier, not the ~@~ operator call.
[[file:parser.go::func applyOperatorPrecedenceFromLeft(tokenizerCode string, lhs Expr, op *Ident, rhs Expr) *Call {][applyOperatorPrecedence]]


* TODO move `applyDocComment` to a later phase of semcheck, when type checking is already done.
* TODO rename ArrayLit to something else as it is universal for arrays and structs
* TODO move all complexity from parsing to semchecking and make the untyped AST as trivial as possible.

move all top level statemets to normal statements

* TODO fix problems with printf
 1. test %v for all supported types
    # calling printf on chars requires `setlocale` to be executed. It should just work.
 2. test %c for non ASCII chars

* TODO templates
* TODO add infix operators ~in~ and ~notin~ for enum sets
enable lines in [[file:tests/test_struct_enum.golem][test struct enum]]
* TODO find a better syntax for Type : TypeConstraint as colon is already reserved for value : type separation
* TODO allow to disable overloading for some functions
* TODO fix or remove newline escape, curently it has many problems
* TODO trait system
* TODO generic functions !!!
* TODO test unmatched { ( [ situation
* TODO type substitution/generic instancing after overload resolution
* TODO integer division with two return values
* TODO restrict operator precedence to common knowledge cases (+-*/) require explicit braces everywhere else.
* TODO persistent logging
** compiler bootstrapping time,
** test time
** lines of code (in tests),
* TODO C++ interop
* TODO testing
** TODO default value
** TODO operator precedence when many ~:~ and ~.~ are in use
** TODO correct ~Source~ values.
** TODO full coverage of all error messages
* TODO full set of types
** TODO vector/matrix/simd types
** DONE string
** DONE enum
** DONE enum set
** DONE int float in all sizes
** DONE array
** DONE struct
** DONE literals
* TODO code navigation
 [ ] jump to catch from throw
 [ ] jump to throw from catch
 [ ] jump to definition
* TODO potential ambiguous syntax between type definition and type context
* TODO have macros
** TODO virtual machine for compile time code execution
* TkAddr still exists, but isn't used. Make a clear decision on what should be a token/keyword and what should not be it.
* Bugs
** assignment to an ifelse does not work

#+begin_src golem
  var arr1 = [1:i32,2,3,4]
  var arr2 = [5:i32,4,3,2]

  (if t1 < t2 do arr1 else arr2)[0] = 555
  printf("%d\n", arr1[0])
  printf("%d\n", arr2[0])
#+end_src

* done
** ensure that int lit types are actually instantiated only once
** implement type checking on 'return'
** implement ~context~ type and parameter for ~SemCheck~ functions
** provide proper error messages or error instead of panic
** negative literals
** error reporting instead of compiler crashing
** add error type to represent invalid / non-typeable ast
** test infrastructure compiler error reporting
** add field values to struct literals
** testing framework to test the compiler
** allow conversion between enum/int/string
** enum set type
** consistent Typ/Type member name
** distinguish between the type and the expression that defines it
** make high/low values of integer types somehow accessible.
** array access
** pointer
** have varargs for macros (only)
** define order to generate type definitions in
** generic arguments (important for builtin array access)
** add ability for type assertions
** static overloading
** automatic narrowing of literals when type is known from outside.
** documentation structure
** packages and import
** reserve double underscore and underscore pre- and postfix
** C interop (emit and function declarations)
** pass by reference
** mutability inference as orthogonal information to the type of expressions, get rid of MutableType
** display parsing errors as normal error messages
** package linker flags for gl and sdl2
** allow addr, ptr, var, not, discard, return as general prefix expression/operator and test it.
** allow newline in a function call.
** ensure naked literals are conveted to an actual type
** inversion of control in mutability inference. Instead of `GetMutable` do request mutability

#+begin_src golem
arr[i] = abc
#+end_src

In the example above, the assignment operator requires ~arr[i]~ to be mutable.
~GetMutable~ requests mutability on the full expression, so the error location
will the entire expression ~arr[i]~ needs to be mutable, when it reallity, only
~arr~ needs to be mutable.

With with a ~RequireMutable~ on ~arr[i]~ the algorithm would recurse down
through mutablility propagation to ~arr~ and the error message would actually
just say that ~arr~ needs to be mutable.
** rename typechecker to semchecker
** make char literals a variant ot string literals
** xmake addr a generic builtin. suggestions like "expected type 'array(16, f32) | array(1, cstring)' but got type 'str'" are not helpful
** distinguish between sym usage and sym definition in typed ast

this should be implemented in LookUpLetSymRecursive
